*------------------------------------------------------------*
User:                aadwani
Date:                December 08, 2017
Time:                15:39:46
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 08, 2017
Time:                15:39:36
*------------------------------------------------------------*
14716  proc freq data=EMWS6.Tree_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.TreeMETA;
14718  run;
 
NOTE: There were 14 observations read from the data set EMWS6.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14719  proc print data=WORK.TreeMETA label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS6.Part_TRAIN EMWS6.Part_TRAIN
EMWS6.Part_TRAIN EMWS6.Part_TRAIN EMWS6 Part_TRAIN
EMWS6.Part_TRAIN EMWS6.Part_TRAIN
EMWS6.Part_TRAIN EMWS6.Part_TRAIN EMWS6 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS6.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=2;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14776  title10;
 
"No decisions defined for target "TargetBuy"."
14777  proc print data = EMWS6.Ids_TargetBuy_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 7 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15292  *------------------------------------------------------------*;
15293  * Tree: Generation of macros and macro variables;
15294  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15295  *------------------------------------------------------------*;
 
15296  %let EMEXCEPTIONSTRING=;
15297  *------------------------------------------------------------*;
15298  * TRAIN: Tree;
15299  *------------------------------------------------------------*;
15300  %let EM_ACTION = TRAIN;
15301  %let syscc = 0;
15302  %macro main;
15303
15304    %if %upcase(&EM_ACTION) = CREATE %then %do;
15305      filename temp catalog 'sashelp.emmodl.tree_create.source';
15306      %include temp;
15307      filename temp;
15308
15309      %em_tree_create;
15310    %end;
15311
15312     %else
15313     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15314
15315         filename temp catalog 'sashelp.emmodl.tree_train.source';
15316         %include temp;
15317         filename temp;
15318         %em_tree_train;
15319     %end;
15320
15321    %else
15322    %if %upcase(&EM_ACTION) = SCORE %then %do;
15323      filename temp catalog 'sashelp.emmodl.tree_score.source';
15324      %include temp;
15325      filename temp;
15326
15327      %em_tree_score;
15328
15329    %end;
15330
15331    %else
15332    %if %upcase(&EM_ACTION) = REPORT %then %do;
15333
15334         filename temp catalog 'sashelp.emmodl.tree_report.source';
15335         %include temp;
15336         filename temp;
15337
15338         %em_tree_report;
15339     %end;
15340
15341    %else
15342    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15343
15344         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15345         %include temp;
15346         filename temp;
15347         %EM_TREE_OPENTREEVIEWER;
15348
15349     %end;
15350
15351    %else
15352    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15353
15354         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15355         %include temp;
15356         filename temp;
15357         %EM_TREE_CLOSETREEVIEWER;
15358
15359     %end;
15360
15361
15362     %doendm:
15363  %mend main;
15364
15365  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15367 +%macro em_tree_train;
15369 +   %if &EM_IMPORT_DATA eq %then %do;
15370 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15371 +       %put &em_codebar;
15372 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15373 +       %put &errormsg;
15374 +       %put &em_codebar;
15375 +       %goto doendm;
15376 +   %end;
15377 +   %else
15378 +       %let EMEXCEPTIONSTRING =;
15380 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15381 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15382 +        %put &em_codebar;
15383 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15384 +        %put &errormsg;
15385 +        %put &em_codebar;
15386 +        %goto doendm;
15387 +   %end;
15389 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15390 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15391 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15392 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15393 +        %put &em_codebar;
15394 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15395 +        %put &errormsg;
15396 +        %put &em_codebar;
15397 +        %goto doendm;
15398 +   %end;
15400 +   /* Initialize property macro variables */
15401 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15402 +   %include temp;
15403 +   filename temp;
15405 +   %EM_SetProperties;
15407 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15408 +   %EM_GETNAME(key=EMTREE, type=DATA);
15409 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15410 +     /* if import eq Y and no importtable defined, throw an exception */
15411 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15412 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15413 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15414 +         %put &em_codebar;
15415 +         %put &errmsg;
15416 +         %put &em_codebar;
15417 +         %goto doendm;
15418 +      %end;
15419 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15420 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15421 +         %put &em_codebar;
15422 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15423 +         %put &errormsg;
15424 +         %put &em_codebar;
15425 +         %goto doendm;
15426 +      %end;
15427 +      %else %do;
15428 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15429 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15430 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15431 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15432 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15433 +         %let dsid = %sysfunc(close(&dsid));
15434 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15435 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15436 +            %put &em_codebar;
15437 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15438 +            %put &errormsg;
15439 +            %put &em_codebar;
15440 +            %goto doendm;
15441 +         %end;
15442 +      %end;
15443 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15444 +         proc delete data=&EM_USER_EMTREE;
15445 +         run;
15446 +      %end;
15447 +   %end;
15448 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15449 +      proc delete data=&EM_USER_EMTREE;
15450 +      run;
15451 +   %end;
15453 +   /* load tree macros */
15454 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15455 +   %include temp;
15456 +   filename temp;
15458 +   /* data sets */
15459 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15460 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15461 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15463 +   /* files */
15464 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15466 +   /* check actual num of target levels */
15467 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15468 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15469 +                              nLevel=_nTargetLevel );
15470 +      %if &_nTargetLevel  > 2 %then %do;
15471 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15472 +        %put &em_codebar;
15473 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15474 +        %put &errormsg;
15475 +        %put &em_codebar;
15476 +        %goto doendm;
15477 +      %end;
15478 +   %end;
15480 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15481 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15482 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15483 +        %let costflag=0;
15484 +        data _null_;
15485 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15486 +          if eof then call symput("costflag", _N_);
15487 +        run;
15488 +        %if &costflag gt 0 %then %do;
15489 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15490 +          %put &em_codebar;
15491 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15492 +          %put &errormsg;
15493 +          %put &em_codebar;
15494 +          %goto doendm;
15495 +       %end;
15496 +     %end;
15497 +   %end;
15499 +   /* determine if multiple targets will be processed */
15500 +   %let em_tree_multipleTargets=N;
15501 +   %let em_tree_numTarget = 1;
15502 +   %let em_tree_targetVars=;
15504 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15505 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15506 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15507 +         %let em_tree_multipleTargets=N;
15508 +      %end;
15509 +      %else %do;
15510 +         /* create macro array of targets  */
15511 +         data _null_;
15512 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15513 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15514 +           if eof then
15515 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15516 +        run;
15518 +        %if &em_tree_numTarget gt 1 %then %do;
15519 +           %let em_tree_multipleTargets=Y;
15520 +        %end;
15521 +      %end;
15522 +   %end;
15524 +   /* create view of only necessary variable for performance reasons */
15525 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15526 +   data &tempData / view=&tempData;
15527 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15528 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15529 +       %EM_TARGET
15530 +     %end;
15531 +     %else %do;
15532 +       %if &em_tree_numTarget ne 0 %then %do;
15533 +         %do i=1 %to &em_tree_numTarget;
15534 +            &&em_tree_targetVars&i
15535 +         %end;
15536 +       %end;
15537 +     %end;
15538 +     );
15539 +   run;
15541 +   /* run Tree procedure */
15542 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15544 +   /* Check return code and throw exception if error is detected */
15545 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15546 +   %if &syserr %then %do;
15547 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15548 +     %goto doendm;
15549 +   %end;
15551 +   /* add decision score code if multiple targets are processed */
15552 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15553 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15554 +   %end;
15556 +   /* create outfit dataset if multiple score statements have been executed */
15557 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15559 +   /* create English Rules */
15560 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15561 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15562 +       %em_tree_makeEnglishRules;
15564 +       /* English Rules */
15565 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15567 +     %end;
15568 +   filename x;
15570 +   %doendm:
15571 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15572 +%macro EM_SetProperties;
15574 +   /* train properties */
15575 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15582 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15583 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15617 +   /* properties for interactive sample */
15618 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15623 +   /* report properties */
15624 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15638 +   /* score properties */
15639 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15642 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15644 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15645 +  %global &nLevel;
15646 +  proc dmdb batch data=&indata
15647 +    classout=_tmp_dmdbout;
15648 +    class &target;
15649 +  run;
15650 +  data _tmp_dmdbout;
15651 +    set _tmp_dmdbout;
15652 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15653 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15654 +  run;
15655 +  data _null_;
15656 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15657 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15658 +    %let dsid = %sysfunc(close(&dsid));
15659 +     call symput("&nLevel", put(&_obs, Best12.));
15660 +  run;
15662 +  proc datasets lib=work nolist;
15663 +     delete _tmp_dmdbout;
15664 +  run;
15665 +  quit;
15666 +%Mend EM_CheckBinaryTargetLevel;
15669 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15671 +  /* determine the number of obs in training data */
15672 +  proc sql;
15673 +    reset noprint;
15674 +    select count(*) into :em_nobs from &indata;
15675 +  quit;
15677 +  /* determine the number of input variables */
15678 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15679 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15681 +  /* retrieve targetEvent from decmeta */
15682 +  %let targetEvent=;
15683 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15684 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15685 +      data _null_;
15686 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15687 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15688 +      run;
15689 +    %end;
15690 +  %end;
15692 +  /* create targetTable if multipleTar eq Y */
15693 +  data temptarget;
15694 +    set &EM_DATA_VARIABLESET;
15695 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15696 +  run;
15698 + /* data sets */
15699 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15700 + %EM_GETNAME(key=EMTREE,        type=DATA);
15701 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15702 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15703 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15704 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15705 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15706 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15707 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15708 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15710 + /* files */
15711 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15712 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15714 + /* turn on pmml if requested */
15715 + %let nnpmml=0;
15716 + %if %symexist(EM_PMML) %then %do;
15717 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15718 +       %let nnpmml=1;
15720 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15721 +%end;
15723 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15725 + %if &nnpmml or &numClassTarget %then %do;
15727 +       /* create dmdb needed for pmml generation */
15728 +       %let tree_maxlevel = 512;
15729 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15730 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15731 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15732 +         %end;
15733 +       %end;
15734 +       %if &tree_maxlevel gt 0 %then %do;
15735 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15736 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15737 +       %end;
15739 +       %let targetOrderString =;
15740 +       %let targetString = ;
15741 +       data _null_;
15742 +          length orderString nameString $10000;
15743 +          retain orderString nameString;
15744 +          set &em_data_variableset end=eof;
15745 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15746 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15747 +          %end;
15748 +          %else %do;
15749 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15750 +          %end;          select(order);
15751 +            when('')        order ='DESC';
15752 +            when('FMTASC')  order='ASCFMT';
15753 +            when('FMTDESC') order='DESFMT';
15754 +            otherwise;
15755 +          end;
15756 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15757 +          nameString = trim(nameString)!!' '!!trim(NAME);
15759 +          if eof then do;
15760 +             call symput('targetOrderString', trim(orderString));
15761 +             call symput('targetString', trim(nameString));
15762 +          end;
15763 +       run;
15765 +       %let arborkluge= "work._treeDMDB";
15767 +       proc dmdb batch data=&indata
15768 +       %if &nnpmml %then %do;
15769 +           PMML
15770 +       %end;
15771 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15774 +   %if &nnpmml %then %do;
15775 +        %if "%EM_ID" ne "" %then %do;
15776 +          id %EM_ID;
15777 +        %end;
15778 +        %if &EM_NUM_CLASS gt 0 %then %do;
15779 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15780 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15781 +               &targetOrderString;
15782 +        %end;
15783 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15784 +          var %EM_INTERVAL;
15785 +        %end;
15786 +        target &targetString %EM_INTERVAL_TARGET;
15787 +        %if "%EM_FREQ" ne "" %then %do;
15788 +          freq %EM_FREQ;
15789 +        %end;
15790 +  %end;
15791 +  %else %do;
15792 +      class  &targetOrderString;
15793 +      target &targetString %EM_INTERVAL_TARGET;
15794 +  %end;
15795 +       run;
15796 +       quit;
15798 +       proc datasets lib=work nolist;
15799 +          delete classout varout;
15800 +       run;
15801 +       quit;
15803 +    %end;
15804 + %end;
15806 + /* run Arbor procedure */
15807 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15808 +  proc arbor data=&INDATA
15810 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15811 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15812 +  %end;
15814 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15815 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15816 +  %end;
15818 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15819 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15820 +  %end;
15822 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15823 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15824 +  %end;
15826 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15827 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15828 +  %end;
15830 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15831 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15832 +  %end;
15833 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15834 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15835 +  %end;
15836 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15837 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15838 +  %end;
15840 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15841 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15842 +      alpha = &EM_PROPERTY_SIGLEVEL
15843 +    %end;
15844 +  %end;
15846 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15847 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15848 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15849 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15850 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15852 +        padjust =
15853 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15854 +          &chaid
15855 +        %end;
15856 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15857 +          DEPTH
15858 +        %end;
15859 +      %end;
15860 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15861 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15862 +         pvars = &num_inputs
15863 +      %end;
15864 +    %end;
15865 +  %end;
15866 +  %else %do;
15867 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15868 +         padjust = NONE
15869 +      %end;
15870 +  %end;
15872 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15873 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15874 +    Maxrules = &num_nrules
15875 +  %end;
15877 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15878 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15879 +    Maxsurrs = &num_nsurrs
15880 +  %end;
15882 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15883 +     Missing=&EM_PROPERTY_MISSINGVALUE
15884 +  %end;
15886 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15887 +     USEVARONCE
15888 +  %end;
15890 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15891 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15892 +  %end;
15895 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15896 +    event = "&targetEvent"
15897 +  %end;
15899 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15900 +     DECSEARCH
15901 +  %end;
15903 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15904 +     PRIORSSEARCH
15905 +  %end;
15907 +  %if &arbor_1 ne %then %do;
15908 +    &arbor_1
15909 +  %end;
15911 +  %if &em_arbor ne %then %do;
15912 +     &em_arbor
15913 +  %end;
15914 +  ;
15915 + %end;
15916 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15917 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15918 +       interact;
15919 + %end;
15920 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15921 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15922 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15923 +    %put &em_codebar;
15924 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15925 +    %put &errormsg;
15926 +    %put &em_codebar;
15927 +    %goto doendm;
15928 +   %end;
15929 +   %else %do;
15930 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15931 +       interact;
15932 +   %end;
15933 + %end;
15935 + %else %do;
15936 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15937 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15938 +    %put &em_codebar;
15939 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15940 +    %put &errormsg;
15941 +    %put &em_codebar;
15942 +    %goto doendm;
15943 +   %end;
15944 +   %else %do;
15945 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15946 +        interact;
15947 +   %end;
15948 + %end;
15950 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15951 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15952 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15953 +    %end;
15955 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15956 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15957 +    %end;
15959 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15960 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15961 +    %end;
15963 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15964 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15965 +    %end;
15967 +    %if "%EM_FREQ" ne "" %then %do;
15968 +       freq %EM_FREQ;
15969 +    %end;
15971 +    %if "&multipleTar" eq "Y" %then %do;
15972 +       /* cycle through all target vars in variableset */
15973 +       %let tdsid = %sysfunc(open(temptarget));
15974 +       %if &tdsid %then %do;
15975 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15976 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15977 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15978 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15979 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15980 +             target &var / level = &lvl
15981 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15982 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15983 +             %end;
15984 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15985 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15986 +             %end;
15987 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15988 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15989 +             %end;
15990 +          %end;
15991 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15992 +       %end;
15993 +       useTarget variable = %EM_TARGET;
15994 +    %end;
15995 +    %else %do;
15996 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15997 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15998 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15999 +      %end;
16000 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16001 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16002 +      %end;
16003 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16004 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16005 +      %end;
16006 +    %end;
16008 +    %if "&multipleTar" eq "N" %then %do;
16009 +      &EM_DEC_STATEMENT;
16010 +    %end;
16012 +    Performance &EM_PROPERTY_PERFORMANCE
16013 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16014 +      nodesize=&EM_PROPERTY_NODESAMPLE
16015 +    %end;
16016 +    ;
16018 +    %if "&intFlag" eq "Y" %then %do;
16019 +       INTERACT Largest;
16020 +       Train maxnewdepth=0;
16021 +    %end;
16023 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16024 +         Assess
16025 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16026 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16027 +              %put &em_codebar;
16028 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16029 +              %put &errormsg;
16030 +              %put &em_codebar;
16031 +            %end;
16032 +            %else %do;
16033 +               Validata=&EM_IMPORT_VALIDATE
16034 +            %end;
16035 +         %end;
16036 +         %else %do;
16037 +           NoValidata
16038 +         %end;
16039 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16040 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16041 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16042 +               %if &dsid %then %do;
16043 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16044 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16045 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16046 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16047 +                   %else %do;
16048 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16049 +                      %else %let measure= MISC;
16050 +                   %end;
16051 +                 %end;
16052 +               %end;
16053 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16054 +            %end;
16055 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16056 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16057 +                 %let measure=ASE;
16058 +              %end;
16059 +              %else %do;
16060 +                 %let measure=MISC;
16061 +              %end;
16062 +            %end;
16063 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16064 +              %let measure=ASE;
16065 +            %end;
16066 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16067 +               %let measure = LIFT;
16068 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16069 +               %if &dsid %then %do;
16070 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16071 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16072 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16073 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16074 +                 %end;
16075 +               %end;
16076 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16077 +            %end;
16078 +            measure=&measure
16079 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16080 +               event = "&targetEvent"
16081 +            %end;
16082 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16083 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16084 +            %end;
16085 +         %end;
16086 +         %if "&multipleTar" eq "N" %then %do;
16087 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16088 +               CV
16089 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16090 +                 CVNITer = &EM_PROPERTY_CVNITER
16091 +               %end;
16092 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16093 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16094 +               %end;
16095 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16096 +                 CVSeed = &EM_PROPERTY_CVSEED
16097 +               %end;
16098 +            %end;
16099 +         %end;
16100 +       %end;
16101 +      ;
16103 +      %if "&intFlag" ne "Y" %then %do;
16104 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16105 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16106 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16107 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16109 +          SUBTREE &subtree
16110 +          %if "&subtree" eq "NLEAVES" %then %do;
16111 +            =&EM_PROPERTY_NSUBTREE
16112 +          %end;
16113 +          ;
16114 +        %end;
16116 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16117 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16118 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16119 +          %end;
16120 +       %end;
16121 +      %end;
16122 + %end;
16125 + MakeMacro nleaves = nleaves;
16126 + save
16127 + %if "&EM_USER_EMTREE" ne "" %then %do;
16128 +   MODEL=&EM_USER_EMTREE
16129 + %end;
16130 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16131 +   SEQUENCE=&EM_USER_OUTSEQ
16132 + %end;
16133 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16134 +   IMPORTANCE=&EM_USER_OUTIMPORT
16135 + %end;
16136 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16137 +   NODESTAT=&EM_USER_OUTNODES
16138 + %end;
16139 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16140 +   SUMMARY=&EM_USER_OUTSUMMARY
16141 + %end;
16142 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16143 +   STATSBYNODE=&EM_USER_OUTSTATS
16144 + %end;
16145 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16146 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16147 + %end;
16148 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16149 +   Pathlistnonmissing=&EM_USER_OUTPATH
16150 + %end;
16151 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16152 +   RULES = &EM_USER_OUTRULES
16153 + %end;
16154 + ;
16156 + %if "&intFlag" ne "Y" %then %do;
16158 +   %let lookupString = ;
16159 +   %if ^%symexist(EM_OPTION) %then
16160 +      %let EM_OPTION=;
16162 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16163 +      %let lookupString = LOOKUP=SELECT;
16164 +   %end;
16166 +   %let codetext=;
16167 +   %let norescodetxt=;
16169 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16170 +     %let codetext=&codetext DUMMY;
16171 +     %let norescodetxt=&norescodetxt DUMMY;
16172 +   %end;
16173 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16174 +     %let codetext=&codetext NOLEAFID;
16175 +     %let norescodetxt=&norescodetxt NOLEAFID;
16176 +   %end;
16177 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16178 +     %let norescodetxt=&norescodetxt NOPRED;
16179 +   %end;
16181 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16182 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16184 +   %if &nnpmml %then %do;
16185 +     code pmml;
16186 +   %end;
16188 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16189 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16190 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16191 +   %end;
16192 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16193 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16194 +   %end;
16195 + %end;
16197 + run;
16198 + quit;
16200 + /*%em_checkerror(); */
16201 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16202 +   /* Delete DMDB catalog */
16203 +   proc datasets lib=work nolist;
16204 +       delete _treeDMDB / mt=cat;
16205 +  run;
16206 +  %end;
16208 + %if &nnpmml %then %do;
16209 +    ods pmml close;
16210 + %end;
16212 +  %doendm:
16214 +%mend em_tree_runTreeProcedure;
16216 +%macro em_tree_createFitStats( multipleTar= );
16219 +  /* create targetTable is multipleTar eq Y */
16220 +  data temptarget;
16221 +    set &EM_DATA_VARIABLESET;
16222 +    where ROLE="TARGET";
16223 +  run;
16225 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16226 +   data &EM_USER_EMOUTFIT;
16227 +     length target $32;
16228 +     merge work.fit_train
16229 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16230 +       work.fit_valid
16231 +     %end;
16232 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16233 +       work.fit_test
16234 +     %end;
16235 +     ;
16236 +     %if "&multipleTar" eq "N" %then %do;
16237 +       target="%EM_TARGET";
16238 +     %end;
16239 +     %else %do;
16240 +       target = _TARGET_;
16241 +     %end;
16242 +     drop _NW_ _SUMW_
16243 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16244 +        _VSUMW_
16245 +     %end;
16246 +     ;
16247 +   run;
16249 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16250 +     proc datasets library=work nolist;
16251 +       delete fit_valid;
16252 +     run;
16253 +   %end;
16254 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16255 +     proc datasets library=work nolist;
16256 +       delete fit_test;
16257 +     run;
16258 +   %end;
16260 +%mend em_tree_createFitStats;
16263 +%macro em_tree_makeEnglishRules;
16265 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16266 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16268 +  /* verify that necessary tables exist and if not, skip processing */
16269 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16270 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16271 +    %goto doendm;
16272 +  %end;
16273 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16274 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16275 +    %goto doendm;
16276 +  %end;
16278 +  /* determine length of variable in outpath dataset */
16279 +  %let vlength= ;
16280 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16281 +  %if &dsid ne %then %do;
16282 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16283 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16284 +  %end;
16285 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16287 +  data tempoutpath;
16288 +    length varname $&vlength;
16289 +    retain varname;
16290 +    set &EM_USER_OUTPATH;
16292 +    if ^missing(variable) then varname=variable;
16293 +    else if ^missing(var_name) then varname=var_name;
16294 +    output;
16295 +  run;
16297 +  /* create an array of generated predicted variable names */
16298 +  %let tree_pred_vars = ;
16299 +  %let tree_pred_label = ;
16300 +  %let numpred= 0;
16301 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16303 +    data _null_;
16304 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16305 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16306 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16307 +     if eof then
16308 +       call symput('numpred', strip(put(_N_, BEST.)));
16309 +    run;
16310 +  %end;
16312 +  /* determine if NPRIORS exists in outnodes  */
16313 +  %local nprior_flag;
16314 +  data _null_;
16315 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16316 +    if eof then do;
16317 +      call symput('nprior_flag', strip(put(npriors, best.)));
16318 +    end;
16319 +  run;
16321 +  proc sort data=tempoutpath; by node; run;
16322 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16324 +  data tempoutpath;
16325 +    merge tempoutpath(in=_a) outnodes(keep= node
16326 +    %if "&nprior_flag" ne "." %then %do;
16327 +      NPRIORS
16328 +    %end;
16329 +    %else %do;
16330 +      N
16331 +    %end;
16332 +    %if &numpred gt 0 %then %do;
16333 +      %do i=1 %to &numpred;
16334 +        &&tree_pred_vars&i
16335 +      %end;
16336 +    %end;
16337 +    );
16338 +    by node;
16339 +    if _a;
16340 +  run;
16342 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16344 +  data _null_;
16345 +    file x;
16346 +    set tempoutpath;
16347 +    by node descending varname;
16348 +    retain origvar oldnode string;
16349 +    length origvar $32 oldnode 8 string $200;
16351 +    if _N_ = 1 then do;
16352 +      origvar = varname;
16353 +      oldnode = node;
16354 +    end;
16356 +    if first.node then do;
16357 +       put "&EM_CODEBAR";
16358 +       put " Node = " node;
16359 +       put "&EM_CODEBAR";
16360 +    end;
16362 +      if first.varname then do;
16363 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16364 +            if MISSING(CHARACTER_VALUE) then do;
16365 +             if NUMERIC_VALUE ne .  then do;
16366 +              if ^first.node then do;
16367 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16368 +              end;
16369 +              else do;
16370 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16371 +              end;
16372 +             end;
16373 +            end;
16374 +            else do;
16375 +              if ^first.node then do;
16376 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16377 +              end;
16378 +              else do;
16379 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16380 +              end;
16381 +             end;
16382 +         end;
16383 +         else if RELATION in ("=") then do;
16384 +            if ^first.node then do;
16385 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16386 +            end;
16387 +            else do;
16388 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16389 +            end;
16390 +         end;
16391 +         else if RELATION in ("ISMISSING") then do;
16392 +            if ^first.node then do;
16393 +              string = " AND "|| strip(varname) || " equals Missing";
16394 +            end;
16395 +            else do;
16396 +              string = "if "|| strip(varname) ||" equals Missing";
16397 +            end;
16398 +         end;
16399 +         else if RELATION in ("ISNOTMISSING") then do;
16400 +            if ^first.node then do;
16401 +              string = " AND "|| strip(varname) || " equals All Values";
16402 +            end;
16403 +            else do;
16404 +              string = "if "|| strip(varname) ||" equals All Values";
16405 +            end;
16406 +         end;
16407 +         if ^missing(varname) then origvar = varname;
16408 +         oldnode=node;
16410 +      end;
16411 +      else do;
16412 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16413 +          if MISSING(CHARACTER_VALUE) then do;
16414 +           if  NUMERIC_VALUE ne .  then do;
16415 +            if ^MISSING(string) then
16416 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16417 +            else
16418 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16419 +           end;
16420 +          end;
16421 +          else do;
16422 +            if ^MISSING(string) then
16423 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16424 +            else
16425 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16426 +          end;
16428 +         end;
16429 +         else if RELATION in ("=") then do;
16430 +           string = strip(string)||", "||strip(character_value);
16431 +         end;
16432 +         else if RELATION in ("ISMISSING") then do;
16434 +         end;
16435 +         if ^missing(varname) then origvar = varname;
16436 +         oldnode=node;
16437 +      end;
16438 +      if last.varname then do;
16439 +         if RELATION in ("ISMISSING") then do;
16440 +           if ^first.varname then do;
16441 +             string = strip(string) || " or MISSING";
16442 +           end;
16443 +         end;
16444 +         put string;
16445 +         if ^missing(varname) then origvar = varname;
16446 +         oldnode=node;
16447 +      end;
16449 +      if last.node then do;
16450 +         put "then ";
16451 +         put " Tree Node Identifier   = " node;
16453 +         %if "&nprior_flag" ne "." %then %do;
16454 +           put " Number of Observations = " NPRIORS;
16455 +         %end;
16456 +         %else %do;
16457 +           put " Number of Observations = " N;
16458 +         %end;
16460 +         %if &numpred gt 0 %then %do;
16461 +           %do i=1 %to &numpred;
16462 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16463 +           %end;
16464 +         %end;
16466 +         put " ";
16467 +         if ^missing(varname) then origvar = varname;
16468 +         oldnode=node;
16469 +      end;
16471 +  run;
16473 +  proc datasets lib=work nolist;
16474 +    delete tempoutpath outnodes;
16475 +  run;
16477 +  %doendm:
16478 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS6.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS6.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596687 kilobytes of physical memory.
NOTE: Will use 14445 out of 14445 training cases.
NOTE: Using memory pool with 188175360 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 3707216 bytes of work memory.
NOTE: The subtree sequence contains 32 subtrees. The largest has 63 nodes and 32 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Created macro variable NLEAVES equal to 14.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS6.TREE_EMTREE has 1654 observations and 4 variables.
NOTE: The data set EMWS6.TREE_OUTNODES has 27 observations and 24 variables.
NOTE: The data set EMWS6.TREE_OUTPATH has 90 observations and 7 variables.
NOTE: The data set EMWS6.TREE_OUTRULES has 370 observations and 6 variables.
NOTE: The data set EMWS6.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: The data set EMWS6.TREE_OUTSTATS has 189 observations and 5 variables.
NOTE: The data set EMWS6.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS6.TREE_OUTTOPOLOGY has 27 observations and 5 variables.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\TREEFLOW.sas opened.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           1.27 seconds
      cpu time            0.71 seconds
 
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS6.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.27 seconds
      cpu time            0.71 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS6.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS6.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 27 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=08Dec2017:15:39:38,
      Create Time=08Dec2017:15:39:38
 
NOTE: 165 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16480
16481  *------------------------------------------------------------*;
16482  * End TRAIN: Tree;
16483  *------------------------------------------------------------*;
 
16484  *------------------------------------------------------------*;
16485  * Close any missing semi colons;
16486  *------------------------------------------------------------*;
16487  ;
16488  ;
16489  ;
16490  ;
16491  quit;
16492  *------------------------------------------------------------*;
16493  * Close any unbalanced quotes;
16494  *------------------------------------------------------------*;
16495  /*; *"; *'; */
16496  ;
16497  run;
16498  quit;
16499  /* Reset EM Options */
16500  options formchar="|----|+|---+=|-/\<>*";
16501  options nocenter ls=256 ps=10000;
16502  goptions reset=all device=GIF NODISPLAY;
 
16503  proc sort data=WORK.EM_USER_REPORT;
16504  by ID VIEW;
16505  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 08, 2017
Time:                15:39:39
*------------------------------------------------------------*
16607  %let EMEXCEPTIONSTRING=;
16608  *------------------------------------------------------------*;
16609  * SCORE: Tree;
16610  *------------------------------------------------------------*;
16611  %let EM_ACTION = SCORE;
16612  %let syscc = 0;
16613  %macro main;
16614
16615    %if %upcase(&EM_ACTION) = CREATE %then %do;
16616      filename temp catalog 'sashelp.emmodl.tree_create.source';
16617      %include temp;
16618      filename temp;
16619
16620      %em_tree_create;
16621    %end;
16622
16623     %else
16624     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16625
16626         filename temp catalog 'sashelp.emmodl.tree_train.source';
16627         %include temp;
16628         filename temp;
16629         %em_tree_train;
16630     %end;
16631
16632    %else
16633    %if %upcase(&EM_ACTION) = SCORE %then %do;
16634      filename temp catalog 'sashelp.emmodl.tree_score.source';
16635      %include temp;
16636      filename temp;
16637
16638      %em_tree_score;
16639
16640    %end;
16641
16642    %else
16643    %if %upcase(&EM_ACTION) = REPORT %then %do;
16644
16645         filename temp catalog 'sashelp.emmodl.tree_report.source';
16646         %include temp;
16647         filename temp;
16648
16649         %em_tree_report;
16650     %end;
16651
16652    %else
16653    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16654
16655         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16656         %include temp;
16657         filename temp;
16658         %EM_TREE_OPENTREEVIEWER;
16659
16660     %end;
16661
16662    %else
16663    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16664
16665         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16666         %include temp;
16667         filename temp;
16668         %EM_TREE_CLOSETREEVIEWER;
16669
16670     %end;
16671
16672
16673     %doendm:
16674  %mend main;
16675
16676  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16678 +%macro em_tree_score;
16680 +   /* determine if multiple targets will be processed */
16681 +   %let em_tree_multipleTargets=N;
16682 +   %let em_tree_numTarget=1;
16683 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16684 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16685 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16686 +         %let em_tree_multipleTargets=N;
16687 +      %end;
16688 +      %else %do;
16689 +         /* create macro array of targets  */
16690 +         data _null_;
16691 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16692 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16693 +           if eof then
16694 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16695 +        run;
16697 +        %if &em_tree_numTarget gt 1 %then %do;
16698 +           %let em_tree_multipleTargets=Y;
16699 +        %end;
16700 +      %end;
16701 +   %end;
16703 +   /* build flow and publish scoring code */
16704 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16705 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16707 +   filename treeflow "&EM_USER_TREEFLOW";
16708 +   filename treepub "&EM_USER_TREEPUBLISH";
16710 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16711 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16713 +   %em_copyfile(infref=treeflow, outfref=flowref);
16714 +   %em_copyfile(infref=treepub, outfref=pubref);
16716 +   filename treeflow;
16717 +   filename treepub;
16719 +   /* if priors are used, add code to generate unadjusted residuals in export */
16720 +   %let useAdjPriors = N;
16721 +   data _null_;
16722 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16723 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16724 +   run;
16725 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16726 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16727 +      %include temp;
16728 +      filename temp;
16730 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16731 +      filename adjref "&EM_USER_adjResidualCode";
16732 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16734 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16736 +      filename adjref;
16737 +   %end;
16739 +   /* LEAF */
16740 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16741 +      data _null_;
16742 +        file flowref mod;
16743 +        put 'drop _LEAF_;';
16744 +      run;
16746 +      data _null_;
16747 +        file pubref mod;
16748 +        put 'drop _LEAF_;';
16749 +      run;
16751 +   %end;
16753 +   filename flowref;
16754 +   filename pubref;
16756 +   /* em_metachange code */
16757 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16758 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16759 +   %end;
16761 +   /* variable selection based on importance stat    */
16762 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16763 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16764 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16765 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16766 +     %let obs = %sysfunc(fetch(&dsid));
16767 +     %do %while(&obs=0);
16768 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16769 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16770 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16771 +       %let obs = %sysfunc(fetch(&dsid));
16772 +     %end;
16773 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16774 +   %end;
16776 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16777 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16778 +    %let tree_pred_vars = ;
16779 +    %let tree_pred_lvl =;
16780 +    %let numpred= 0;
16782 +    data _null_;
16783 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16784 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16785 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16786 +     if eof then
16787 +       call symput('numpred', strip(put(_N_, BEST.)));
16788 +    run;
16789 +   %end;
16791 +   %if &numpred ne 0 %then %do;
16792 +    %do i=1 %to &numpred;
16793 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16794 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16795 +    %end;
16796 +   %end;
16798 +   /* determine if multiple targets will be processed */
16799 +   %let em_tree_multipleTargets=N;
16800 +   %let em_tree_numTarget=1;
16801 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16802 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16803 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16804 +         %let em_tree_multipleTargets=N;
16805 +      %end;
16806 +      %else %do;
16807 +        data _null_;
16808 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16809 +          if eof then
16810 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16811 +        run;
16813 +        %if &em_tree_numTarget gt 1 %then %do;
16814 +           %let em_tree_multipleTargets=Y;
16815 +        %end;
16816 +     %end;
16817 +   %end;
16819 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16820 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16822 +      /* variable importance */
16823 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16824 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16826 +         %let validexist=0;
16827 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16828 +           %let validexist=1;
16829 +         %end;
16831 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16832 +         /* and the columns may not be generated                                                                                 */
16833 +         %let em_tree_cvexists=;
16834 +         %let em_tree_surrexists=.;
16835 +         data _null_;
16836 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16837 +            if eof then do ;
16838 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16839 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16840 +            end;
16841 +         run;
16843 +         data &EM_USER_OUTIMPORT;
16844 +            set &EM_USER_OUTIMPORT;
16846 +            /* format columns based on Precison value specified */
16847 +            format importance 15.&EM_PROPERTY_PRECISION
16848 +                 %if &validexist %then %do;
16849 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16850 +                 %end;
16851 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16852 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16853 +                 %end;
16854 +            ;
16855 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16856 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16857 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16858 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16859 +                 %if "&em_tree_surrexists" ne "" %then %do;
16860 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16861 +                 %end;
16862 +                 %if &validexist %then %do;
16863 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16864 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16865 +                 %end;
16866 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16867 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16868 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16869 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16870 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16871 +                 %end;
16872 +            ;
16873 +         run;
16875 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16876 +      %end;
16877 +   %end;
16879 +   %doendm:
16880 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:15:39:38,
      Create Time=08Dec2017:15:39:38
 
NOTE: 266 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:15:39:38,
      Create Time=08Dec2017:15:39:38
 
NOTE: 244 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10088,
      Last Modified=08Dec2017:15:39:38,
      Create Time=08Dec2017:15:39:38
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9415,
      Last Modified=08Dec2017:15:39:38,
      Create Time=08Dec2017:15:39:38
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16881
16882  *------------------------------------------------------------*;
16883  * End SCORE: Tree;
16884  *------------------------------------------------------------*;
 
16885  proc sort data=WORK.EM_METACHANGE;
16886  by key uname;
16887  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16888  filename x "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\CDELTA_TRAIN.sas";
16889  data _null_;
16890  file x;
16891  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
16892  put 'ROLE = "REJECTED";';
16893  put 'end;';
16894  put 'else ';
16895  put 'if upcase(NAME) = "DEMREG" then do;';
16896  put 'ROLE = "REJECTED";';
16897  put 'end;';
16898  put 'else ';
16899  put 'if upcase(NAME) = "DEMTVREG" then do;';
16900  put 'ROLE = "REJECTED";';
16901  put 'end;';
16902  put 'else ';
16903  put 'if upcase(NAME) = "PROMCLASS" then do;';
16904  put 'ROLE = "REJECTED";';
16905  put 'end;';
16906  put 'else ';
16907  put 'if upcase(NAME) = "PROMSPEND" then do;';
16908  put 'ROLE = "REJECTED";';
16909  put 'end;';
16910  put 'else ';
16911  put 'if upcase(NAME) = "PROMTIME" then do;';
16912  put 'ROLE = "REJECTED";';
16913  put 'end;';
16914  put 'else ';
16915  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
16916  put 'ROLE = "ASSESS";';
16917  put 'end;';
16918  put 'else ';
16919  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
16920  put 'ROLE = "ASSESS";';
16921  put 'end;';
16922  put 'else ';
16923  put 'if upcase(NAME) = "_NODE_" then do;';
16924  put 'ROLE = "SEGMENT";';
16925  put 'LEVEL = "NOMINAL";';
16926  put 'end;';
16927  run;
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=08Dec2017:15:39:39,
      Create Time=08Dec2017:15:38:40
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16928  filename x;
NOTE: Fileref X has been deassigned.
 
16929  filename emflow "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas";
16930  *------------------------------------------------------------*;
16931  * Tree: Scoring DATA data;
16932  *------------------------------------------------------------*;
16933  data EMWS6.Tree_TRAIN
16934  / view=EMWS6.Tree_TRAIN
16935  ;
16936  set EMWS6.Part_TRAIN
16937  ;
16938  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas.
16939 +****************************************************************;
16940 +******             DECISION TREE SCORING CODE             ******;
16941 +****************************************************************;
16942 +
16943 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16944 +LENGTH F_TargetBuy  $   12;
16945 +LENGTH I_TargetBuy  $   12;
16946 +LENGTH _WARN_  $    4;
16947 +
16948 +******              LABELS FOR NEW VARIABLES              ******;
16949 +label _NODE_ = 'Node' ;
16950 +label _LEAF_ = 'Leaf' ;
16951 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
16952 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
16953 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
16954 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
16955 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
16956 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
16957 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
16958 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
16959 +label F_TargetBuy = 'From: TargetBuy' ;
16960 +label I_TargetBuy = 'Into: TargetBuy' ;
16961 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
16962 +label _WARN_ = 'Warnings' ;
16963 +
16964 +
16965 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16966 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16967 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16968 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
16969 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
16970 +
16971 +
16972 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
16973 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
16974 +
16975 +******             ASSIGN OBSERVATION TO NODE             ******;
16976 +IF  NOT MISSING(DemAge ) AND
16977 +  DemAge  <                 44.5 THEN DO;
16978 +  IF  NOT MISSING(DemAffl ) AND
16979 +    DemAffl  <                  9.5 THEN DO;
16980 +    _ARBFMT_1 = PUT( DemGender , $1.);
16981 +     %DMNORMIP( _ARBFMT_1);
16982 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
16983 +      IF  NOT MISSING(DemAffl ) AND
16984 +        DemAffl  <                  6.5 THEN DO;
16985 +        _NODE_  =                   18;
16986 +        _LEAF_  =                    2;
16987 +        P_TargetBuy0  =      0.6383495145631;
16988 +        P_TargetBuy1  =     0.36165048543689;
16989 +        Q_TargetBuy0  =      0.6383495145631;
16990 +        Q_TargetBuy1  =     0.36165048543689;
16991 +        V_TargetBuy0  =     0.60089686098654;
16992 +        V_TargetBuy1  =     0.39910313901345;
16993 +        I_TargetBuy  = '0' ;
16994 +        U_TargetBuy  =                    0;
16995 +        END;
16996 +      ELSE DO;
16997 +        IF  NOT MISSING(DemAge ) AND
16998 +                          39.5 <= DemAge  THEN DO;
16999 +          _NODE_  =                   35;
17000 +          _LEAF_  =                    4;
17001 +          P_TargetBuy0  =     0.56326530612244;
17002 +          P_TargetBuy1  =     0.43673469387755;
17003 +          Q_TargetBuy0  =     0.56326530612244;
17004 +          Q_TargetBuy1  =     0.43673469387755;
17005 +          V_TargetBuy0  =     0.58273381294964;
17006 +          V_TargetBuy1  =     0.41726618705035;
17007 +          I_TargetBuy  = '0' ;
17008 +          U_TargetBuy  =                    0;
17009 +          END;
17010 +        ELSE DO;
17011 +          _NODE_  =                   34;
17012 +          _LEAF_  =                    3;
17013 +          P_TargetBuy0  =     0.39285714285714;
17014 +          P_TargetBuy1  =     0.60714285714285;
17015 +          Q_TargetBuy0  =     0.39285714285714;
17016 +          Q_TargetBuy1  =     0.60714285714285;
17017 +          V_TargetBuy0  =     0.36507936507936;
17018 +          V_TargetBuy1  =     0.63492063492063;
17019 +          I_TargetBuy  = '1' ;
17020 +          U_TargetBuy  =                    1;
17021 +          END;
17022 +        END;
17023 +      END;
17024 +    ELSE DO;
17025 +      _NODE_  =                    8;
17026 +      _LEAF_  =                    1;
17027 +      P_TargetBuy0  =     0.77363515312916;
17028 +      P_TargetBuy1  =     0.22636484687083;
17029 +      Q_TargetBuy0  =     0.77363515312916;
17030 +      Q_TargetBuy1  =     0.22636484687083;
17031 +      V_TargetBuy0  =     0.79864253393665;
17032 +      V_TargetBuy1  =     0.20135746606334;
17033 +      I_TargetBuy  = '0' ;
17034 +      U_TargetBuy  =                    0;
17035 +      END;
17036 +    END;
17037 +  ELSE DO;
17038 +    _ARBFMT_1 = PUT( DemGender , $1.);
17039 +     %DMNORMIP( _ARBFMT_1);
17040 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17041 +      _NODE_  =                   11;
17042 +      _LEAF_  =                    9;
17043 +      P_TargetBuy0  =     0.21991341991341;
17044 +      P_TargetBuy1  =     0.78008658008658;
17045 +      Q_TargetBuy0  =     0.21991341991341;
17046 +      Q_TargetBuy1  =     0.78008658008658;
17047 +      V_TargetBuy0  =     0.20677966101694;
17048 +      V_TargetBuy1  =     0.79322033898305;
17049 +      I_TargetBuy  = '1' ;
17050 +      U_TargetBuy  =                    1;
17051 +      END;
17052 +    ELSE DO;
17053 +      IF  NOT MISSING(DemAffl ) AND
17054 +                        14.5 <= DemAffl  THEN DO;
17055 +        _NODE_  =                   21;
17056 +        _LEAF_  =                    8;
17057 +        P_TargetBuy0  =     0.14666666666666;
17058 +        P_TargetBuy1  =     0.85333333333333;
17059 +        Q_TargetBuy0  =     0.14666666666666;
17060 +        Q_TargetBuy1  =     0.85333333333333;
17061 +        V_TargetBuy0  =     0.15094339622641;
17062 +        V_TargetBuy1  =     0.84905660377358;
17063 +        I_TargetBuy  = '1' ;
17064 +        U_TargetBuy  =                    1;
17065 +        END;
17066 +      ELSE DO;
17067 +        IF  NOT MISSING(DemAffl ) AND
17068 +                          11.5 <= DemAffl  THEN DO;
17069 +          _ARBFMT_1 = PUT( DemGender , $1.);
17070 +           %DMNORMIP( _ARBFMT_1);
17071 +          IF _ARBFMT_1 IN ('M' ) THEN DO;
17072 +            _NODE_  =                   51;
17073 +            _LEAF_  =                    7;
17074 +            P_TargetBuy0  =     0.36521739130434;
17075 +            P_TargetBuy1  =     0.63478260869565;
17076 +            Q_TargetBuy0  =     0.36521739130434;
17077 +            Q_TargetBuy1  =     0.63478260869565;
17078 +            V_TargetBuy0  =                 0.45;
17079 +            V_TargetBuy1  =                 0.55;
17080 +            I_TargetBuy  = '1' ;
17081 +            U_TargetBuy  =                    1;
17082 +            END;
17083 +          ELSE DO;
17084 +            _NODE_  =                   50;
17085 +            _LEAF_  =                    6;
17086 +            P_TargetBuy0  =      0.6590909090909;
17087 +            P_TargetBuy1  =     0.34090909090909;
17088 +            Q_TargetBuy0  =      0.6590909090909;
17089 +            Q_TargetBuy1  =     0.34090909090909;
17090 +            V_TargetBuy0  =     0.72222222222222;
17091 +            V_TargetBuy1  =     0.27777777777777;
17092 +            I_TargetBuy  = '0' ;
17093 +            U_TargetBuy  =                    0;
17094 +            END;
17095 +          END;
17096 +        ELSE DO;
17097 +          _NODE_  =                   36;
17098 +          _LEAF_  =                    5;
17099 +          P_TargetBuy0  =      0.6156462585034;
17100 +          P_TargetBuy1  =     0.38435374149659;
17101 +          Q_TargetBuy0  =      0.6156462585034;
17102 +          Q_TargetBuy1  =     0.38435374149659;
17103 +          V_TargetBuy0  =      0.6936416184971;
17104 +          V_TargetBuy1  =     0.30635838150289;
17105 +          I_TargetBuy  = '0' ;
17106 +          U_TargetBuy  =                    0;
17107 +          END;
17108 +        END;
17109 +      END;
17110 +    END;
17111 +  END;
17112 +ELSE DO;
17113 +  IF  NOT MISSING(DemAffl ) AND
17114 +                    12.5 <= DemAffl  THEN DO;
17115 +    IF  NOT MISSING(DemAffl ) AND
17116 +                      15.5 <= DemAffl  THEN DO;
17117 +      IF  NOT MISSING(DemAffl ) AND
17118 +                        18.5 <= DemAffl  THEN DO;
17119 +        _NODE_  =                   31;
17120 +        _LEAF_  =                   14;
17121 +        P_TargetBuy0  =     0.06779661016949;
17122 +        P_TargetBuy1  =      0.9322033898305;
17123 +        Q_TargetBuy0  =     0.06779661016949;
17124 +        Q_TargetBuy1  =      0.9322033898305;
17125 +        V_TargetBuy0  =     0.15151515151515;
17126 +        V_TargetBuy1  =     0.84848484848484;
17127 +        I_TargetBuy  = '1' ;
17128 +        U_TargetBuy  =                    1;
17129 +        END;
17130 +      ELSE DO;
17131 +        _ARBFMT_1 = PUT( DemGender , $1.);
17132 +         %DMNORMIP( _ARBFMT_1);
17133 +        IF _ARBFMT_1 IN ('F' ) THEN DO;
17134 +          _NODE_  =                   48;
17135 +          _LEAF_  =                   12;
17136 +          P_TargetBuy0  =     0.28971962616822;
17137 +          P_TargetBuy1  =     0.71028037383177;
17138 +          Q_TargetBuy0  =     0.28971962616822;
17139 +          Q_TargetBuy1  =     0.71028037383177;
17140 +          V_TargetBuy0  =     0.29411764705882;
17141 +          V_TargetBuy1  =     0.70588235294117;
17142 +          I_TargetBuy  = '1' ;
17143 +          U_TargetBuy  =                    1;
17144 +          END;
17145 +        ELSE DO;
17146 +          _NODE_  =                   49;
17147 +          _LEAF_  =                   13;
17148 +          P_TargetBuy0  =     0.54054054054054;
17149 +          P_TargetBuy1  =     0.45945945945945;
17150 +          Q_TargetBuy0  =     0.54054054054054;
17151 +          Q_TargetBuy1  =     0.45945945945945;
17152 +          V_TargetBuy0  =     0.77142857142857;
17153 +          V_TargetBuy1  =     0.22857142857142;
17154 +          I_TargetBuy  = '0' ;
17155 +          U_TargetBuy  =                    0;
17156 +          END;
17157 +        END;
17158 +      END;
17159 +    ELSE DO;
17160 +      _NODE_  =                   14;
17161 +      _LEAF_  =                   11;
17162 +      P_TargetBuy0  =     0.63975155279503;
17163 +      P_TargetBuy1  =     0.36024844720496;
17164 +      Q_TargetBuy0  =     0.63975155279503;
17165 +      Q_TargetBuy1  =     0.36024844720496;
17166 +      V_TargetBuy0  =     0.58256880733944;
17167 +      V_TargetBuy1  =     0.41743119266055;
17168 +      I_TargetBuy  = '0' ;
17169 +      U_TargetBuy  =                    0;
17170 +      END;
17171 +    END;
17172 +  ELSE DO;
17173 +    _NODE_  =                    6;
17174 +    _LEAF_  =                   10;
17175 +    P_TargetBuy0  =     0.87232532197545;
17176 +    P_TargetBuy1  =     0.12767467802454;
17177 +    Q_TargetBuy0  =     0.87232532197545;
17178 +    Q_TargetBuy1  =     0.12767467802454;
17179 +    V_TargetBuy0  =       0.872368670586;
17180 +    V_TargetBuy1  =     0.12763132941399;
17181 +    I_TargetBuy  = '0' ;
17182 +    U_TargetBuy  =                    0;
17183 +    END;
17184 +  END;
17185 +
17186 +*****  RESIDUALS R_ *************;
17187 +IF  F_TargetBuy  NE '0'
17188 +AND F_TargetBuy  NE '1'  THEN DO;
17189 +        R_TargetBuy0  = .;
17190 +        R_TargetBuy1  = .;
17191 + END;
17192 + ELSE DO;
17193 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17194 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17195 +       SELECT( F_TargetBuy  );
17196 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17197 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17198 +       END;
17199 + END;
17200 +
17201 +****************************************************************;
17202 +******          END OF DECISION TREE SCORING CODE         ******;
17203 +****************************************************************;
17204 +
17205 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17206  run;
 
NOTE: DATA STEP view saved on file EMWS6.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
17207  quit;
17208  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17209  filename emflow "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas";
17210  *------------------------------------------------------------*;
17211  * Tree: Scoring VALIDATE data;
17212  *------------------------------------------------------------*;
17213  data EMWS6.Tree_VALIDATE
17214  / view=EMWS6.Tree_VALIDATE
17215  ;
17216  set EMWS6.Part_VALIDATE
17217  ;
17218  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas.
17219 +****************************************************************;
17220 +******             DECISION TREE SCORING CODE             ******;
17221 +****************************************************************;
17222 +
17223 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17224 +LENGTH F_TargetBuy  $   12;
17225 +LENGTH I_TargetBuy  $   12;
17226 +LENGTH _WARN_  $    4;
17227 +
17228 +******              LABELS FOR NEW VARIABLES              ******;
17229 +label _NODE_ = 'Node' ;
17230 +label _LEAF_ = 'Leaf' ;
17231 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17232 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17233 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17234 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17235 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17236 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17237 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17238 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17239 +label F_TargetBuy = 'From: TargetBuy' ;
17240 +label I_TargetBuy = 'Into: TargetBuy' ;
17241 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17242 +label _WARN_ = 'Warnings' ;
17243 +
17244 +
17245 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17246 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17247 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17248 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17249 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17250 +
17251 +
17252 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17253 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17254 +
17255 +******             ASSIGN OBSERVATION TO NODE             ******;
17256 +IF  NOT MISSING(DemAge ) AND
17257 +  DemAge  <                 44.5 THEN DO;
17258 +  IF  NOT MISSING(DemAffl ) AND
17259 +    DemAffl  <                  9.5 THEN DO;
17260 +    _ARBFMT_1 = PUT( DemGender , $1.);
17261 +     %DMNORMIP( _ARBFMT_1);
17262 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17263 +      IF  NOT MISSING(DemAffl ) AND
17264 +        DemAffl  <                  6.5 THEN DO;
17265 +        _NODE_  =                   18;
17266 +        _LEAF_  =                    2;
17267 +        P_TargetBuy0  =      0.6383495145631;
17268 +        P_TargetBuy1  =     0.36165048543689;
17269 +        Q_TargetBuy0  =      0.6383495145631;
17270 +        Q_TargetBuy1  =     0.36165048543689;
17271 +        V_TargetBuy0  =     0.60089686098654;
17272 +        V_TargetBuy1  =     0.39910313901345;
17273 +        I_TargetBuy  = '0' ;
17274 +        U_TargetBuy  =                    0;
17275 +        END;
17276 +      ELSE DO;
17277 +        IF  NOT MISSING(DemAge ) AND
17278 +                          39.5 <= DemAge  THEN DO;
17279 +          _NODE_  =                   35;
17280 +          _LEAF_  =                    4;
17281 +          P_TargetBuy0  =     0.56326530612244;
17282 +          P_TargetBuy1  =     0.43673469387755;
17283 +          Q_TargetBuy0  =     0.56326530612244;
17284 +          Q_TargetBuy1  =     0.43673469387755;
17285 +          V_TargetBuy0  =     0.58273381294964;
17286 +          V_TargetBuy1  =     0.41726618705035;
17287 +          I_TargetBuy  = '0' ;
17288 +          U_TargetBuy  =                    0;
17289 +          END;
17290 +        ELSE DO;
17291 +          _NODE_  =                   34;
17292 +          _LEAF_  =                    3;
17293 +          P_TargetBuy0  =     0.39285714285714;
17294 +          P_TargetBuy1  =     0.60714285714285;
17295 +          Q_TargetBuy0  =     0.39285714285714;
17296 +          Q_TargetBuy1  =     0.60714285714285;
17297 +          V_TargetBuy0  =     0.36507936507936;
17298 +          V_TargetBuy1  =     0.63492063492063;
17299 +          I_TargetBuy  = '1' ;
17300 +          U_TargetBuy  =                    1;
17301 +          END;
17302 +        END;
17303 +      END;
17304 +    ELSE DO;
17305 +      _NODE_  =                    8;
17306 +      _LEAF_  =                    1;
17307 +      P_TargetBuy0  =     0.77363515312916;
17308 +      P_TargetBuy1  =     0.22636484687083;
17309 +      Q_TargetBuy0  =     0.77363515312916;
17310 +      Q_TargetBuy1  =     0.22636484687083;
17311 +      V_TargetBuy0  =     0.79864253393665;
17312 +      V_TargetBuy1  =     0.20135746606334;
17313 +      I_TargetBuy  = '0' ;
17314 +      U_TargetBuy  =                    0;
17315 +      END;
17316 +    END;
17317 +  ELSE DO;
17318 +    _ARBFMT_1 = PUT( DemGender , $1.);
17319 +     %DMNORMIP( _ARBFMT_1);
17320 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17321 +      _NODE_  =                   11;
17322 +      _LEAF_  =                    9;
17323 +      P_TargetBuy0  =     0.21991341991341;
17324 +      P_TargetBuy1  =     0.78008658008658;
17325 +      Q_TargetBuy0  =     0.21991341991341;
17326 +      Q_TargetBuy1  =     0.78008658008658;
17327 +      V_TargetBuy0  =     0.20677966101694;
17328 +      V_TargetBuy1  =     0.79322033898305;
17329 +      I_TargetBuy  = '1' ;
17330 +      U_TargetBuy  =                    1;
17331 +      END;
17332 +    ELSE DO;
17333 +      IF  NOT MISSING(DemAffl ) AND
17334 +                        14.5 <= DemAffl  THEN DO;
17335 +        _NODE_  =                   21;
17336 +        _LEAF_  =                    8;
17337 +        P_TargetBuy0  =     0.14666666666666;
17338 +        P_TargetBuy1  =     0.85333333333333;
17339 +        Q_TargetBuy0  =     0.14666666666666;
17340 +        Q_TargetBuy1  =     0.85333333333333;
17341 +        V_TargetBuy0  =     0.15094339622641;
17342 +        V_TargetBuy1  =     0.84905660377358;
17343 +        I_TargetBuy  = '1' ;
17344 +        U_TargetBuy  =                    1;
17345 +        END;
17346 +      ELSE DO;
17347 +        IF  NOT MISSING(DemAffl ) AND
17348 +                          11.5 <= DemAffl  THEN DO;
17349 +          _ARBFMT_1 = PUT( DemGender , $1.);
17350 +           %DMNORMIP( _ARBFMT_1);
17351 +          IF _ARBFMT_1 IN ('M' ) THEN DO;
17352 +            _NODE_  =                   51;
17353 +            _LEAF_  =                    7;
17354 +            P_TargetBuy0  =     0.36521739130434;
17355 +            P_TargetBuy1  =     0.63478260869565;
17356 +            Q_TargetBuy0  =     0.36521739130434;
17357 +            Q_TargetBuy1  =     0.63478260869565;
17358 +            V_TargetBuy0  =                 0.45;
17359 +            V_TargetBuy1  =                 0.55;
17360 +            I_TargetBuy  = '1' ;
17361 +            U_TargetBuy  =                    1;
17362 +            END;
17363 +          ELSE DO;
17364 +            _NODE_  =                   50;
17365 +            _LEAF_  =                    6;
17366 +            P_TargetBuy0  =      0.6590909090909;
17367 +            P_TargetBuy1  =     0.34090909090909;
17368 +            Q_TargetBuy0  =      0.6590909090909;
17369 +            Q_TargetBuy1  =     0.34090909090909;
17370 +            V_TargetBuy0  =     0.72222222222222;
17371 +            V_TargetBuy1  =     0.27777777777777;
17372 +            I_TargetBuy  = '0' ;
17373 +            U_TargetBuy  =                    0;
17374 +            END;
17375 +          END;
17376 +        ELSE DO;
17377 +          _NODE_  =                   36;
17378 +          _LEAF_  =                    5;
17379 +          P_TargetBuy0  =      0.6156462585034;
17380 +          P_TargetBuy1  =     0.38435374149659;
17381 +          Q_TargetBuy0  =      0.6156462585034;
17382 +          Q_TargetBuy1  =     0.38435374149659;
17383 +          V_TargetBuy0  =      0.6936416184971;
17384 +          V_TargetBuy1  =     0.30635838150289;
17385 +          I_TargetBuy  = '0' ;
17386 +          U_TargetBuy  =                    0;
17387 +          END;
17388 +        END;
17389 +      END;
17390 +    END;
17391 +  END;
17392 +ELSE DO;
17393 +  IF  NOT MISSING(DemAffl ) AND
17394 +                    12.5 <= DemAffl  THEN DO;
17395 +    IF  NOT MISSING(DemAffl ) AND
17396 +                      15.5 <= DemAffl  THEN DO;
17397 +      IF  NOT MISSING(DemAffl ) AND
17398 +                        18.5 <= DemAffl  THEN DO;
17399 +        _NODE_  =                   31;
17400 +        _LEAF_  =                   14;
17401 +        P_TargetBuy0  =     0.06779661016949;
17402 +        P_TargetBuy1  =      0.9322033898305;
17403 +        Q_TargetBuy0  =     0.06779661016949;
17404 +        Q_TargetBuy1  =      0.9322033898305;
17405 +        V_TargetBuy0  =     0.15151515151515;
17406 +        V_TargetBuy1  =     0.84848484848484;
17407 +        I_TargetBuy  = '1' ;
17408 +        U_TargetBuy  =                    1;
17409 +        END;
17410 +      ELSE DO;
17411 +        _ARBFMT_1 = PUT( DemGender , $1.);
17412 +         %DMNORMIP( _ARBFMT_1);
17413 +        IF _ARBFMT_1 IN ('F' ) THEN DO;
17414 +          _NODE_  =                   48;
17415 +          _LEAF_  =                   12;
17416 +          P_TargetBuy0  =     0.28971962616822;
17417 +          P_TargetBuy1  =     0.71028037383177;
17418 +          Q_TargetBuy0  =     0.28971962616822;
17419 +          Q_TargetBuy1  =     0.71028037383177;
17420 +          V_TargetBuy0  =     0.29411764705882;
17421 +          V_TargetBuy1  =     0.70588235294117;
17422 +          I_TargetBuy  = '1' ;
17423 +          U_TargetBuy  =                    1;
17424 +          END;
17425 +        ELSE DO;
17426 +          _NODE_  =                   49;
17427 +          _LEAF_  =                   13;
17428 +          P_TargetBuy0  =     0.54054054054054;
17429 +          P_TargetBuy1  =     0.45945945945945;
17430 +          Q_TargetBuy0  =     0.54054054054054;
17431 +          Q_TargetBuy1  =     0.45945945945945;
17432 +          V_TargetBuy0  =     0.77142857142857;
17433 +          V_TargetBuy1  =     0.22857142857142;
17434 +          I_TargetBuy  = '0' ;
17435 +          U_TargetBuy  =                    0;
17436 +          END;
17437 +        END;
17438 +      END;
17439 +    ELSE DO;
17440 +      _NODE_  =                   14;
17441 +      _LEAF_  =                   11;
17442 +      P_TargetBuy0  =     0.63975155279503;
17443 +      P_TargetBuy1  =     0.36024844720496;
17444 +      Q_TargetBuy0  =     0.63975155279503;
17445 +      Q_TargetBuy1  =     0.36024844720496;
17446 +      V_TargetBuy0  =     0.58256880733944;
17447 +      V_TargetBuy1  =     0.41743119266055;
17448 +      I_TargetBuy  = '0' ;
17449 +      U_TargetBuy  =                    0;
17450 +      END;
17451 +    END;
17452 +  ELSE DO;
17453 +    _NODE_  =                    6;
17454 +    _LEAF_  =                   10;
17455 +    P_TargetBuy0  =     0.87232532197545;
17456 +    P_TargetBuy1  =     0.12767467802454;
17457 +    Q_TargetBuy0  =     0.87232532197545;
17458 +    Q_TargetBuy1  =     0.12767467802454;
17459 +    V_TargetBuy0  =       0.872368670586;
17460 +    V_TargetBuy1  =     0.12763132941399;
17461 +    I_TargetBuy  = '0' ;
17462 +    U_TargetBuy  =                    0;
17463 +    END;
17464 +  END;
17465 +
17466 +*****  RESIDUALS R_ *************;
17467 +IF  F_TargetBuy  NE '0'
17468 +AND F_TargetBuy  NE '1'  THEN DO;
17469 +        R_TargetBuy0  = .;
17470 +        R_TargetBuy1  = .;
17471 + END;
17472 + ELSE DO;
17473 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17474 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17475 +       SELECT( F_TargetBuy  );
17476 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17477 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17478 +       END;
17479 + END;
17480 +
17481 +****************************************************************;
17482 +******          END OF DECISION TREE SCORING CODE         ******;
17483 +****************************************************************;
17484 +
17485 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17486  run;
 
NOTE: DATA STEP view saved on file EMWS6.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17487  quit;
17488  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
17490  proc sort data=WORK.EM_USER_REPORT;
17491  by ID VIEW;
17492  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17493  *------------------------------------------------------------*;
17494  * Tree: Computing metadata for TRAIN data;
17495  *------------------------------------------------------------*;
 
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17876  data EMWS6.Tree_EMINFO;
17877  length TARGET KEY $32 DATA $43;
17878  input TARGET KEY DATA $;
17879  cards;
 
NOTE: The data set EMWS6.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
17883  run;
17884  proc sort data = EMWS6.Tree_EMINFO NOTHREADS;
17885  by TARGET KEY;
17886  run;
 
NOTE: There were 3 observations read from the data set EMWS6.TREE_EMINFO.
NOTE: The data set EMWS6.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
17887  proc sort data = EMWS6.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
17888  by TARGET KEY;
17889  run;
 
NOTE: There were 3 observations read from the data set EMWS6.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17890  proc sort data = EMWS6.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
17891  by TARGET KEY;
17892  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS6.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17893  data EMWS6.Tree_EMINFO;
17894  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
17895  by TARGET KEY;
17896  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS6.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
17897  proc datasets lib=work nolist;
17898  delete TEMP_INFO SORTEDEMINFO;
17899  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
17900  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS6.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 08, 2017
Time:                15:39:41
*------------------------------------------------------------*
17924  data EMWS6.Tree_EMOUTFIT;
17925  set EMWS6.Tree_EMOUTFIT;
17926  length TargetLabel $200;
17927  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17928  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
17929  run;
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_EMOUTFIT.
NOTE: The data set EMWS6.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
17930  proc sort data=EMWS6.Tree_EMREPORTFIT nothreads;
17931  by TARGET;
17932  run;
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_EMREPORTFIT.
NOTE: The data set EMWS6.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
17933  %let _EMwarndup = 0;
17934  %let _EMtargetdup =;
17935  %let _EMASEtargetdup =;
17936  data _null_;
17937  set EMWS6.Tree_EMOUTFIT;
17938  if .<_ASE_<0.000001 then do;
17939  call symput('_EMwarndup', '1');
17940  call symput('_EMtargetdup', target);
17941  call symput('_EMASEtargetdup', put(_ASE_, best.));
17942  end;
17943  run;
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17944  %let EMEXCEPTIONSTRING=;
17945  *------------------------------------------------------------*;
17946  * REPORT: Tree;
17947  *------------------------------------------------------------*;
17948  %let EM_ACTION = REPORT;
17949  %let syscc = 0;
17950  %macro main;
17951
17952    %if %upcase(&EM_ACTION) = CREATE %then %do;
17953      filename temp catalog 'sashelp.emmodl.tree_create.source';
17954      %include temp;
17955      filename temp;
17956
17957      %em_tree_create;
17958    %end;
17959
17960     %else
17961     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17962
17963         filename temp catalog 'sashelp.emmodl.tree_train.source';
17964         %include temp;
17965         filename temp;
17966         %em_tree_train;
17967     %end;
17968
17969    %else
17970    %if %upcase(&EM_ACTION) = SCORE %then %do;
17971      filename temp catalog 'sashelp.emmodl.tree_score.source';
17972      %include temp;
17973      filename temp;
17974
17975      %em_tree_score;
17976
17977    %end;
17978
17979    %else
17980    %if %upcase(&EM_ACTION) = REPORT %then %do;
17981
17982         filename temp catalog 'sashelp.emmodl.tree_report.source';
17983         %include temp;
17984         filename temp;
17985
17986         %em_tree_report;
17987     %end;
17988
17989    %else
17990    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17991
17992         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17993         %include temp;
17994         filename temp;
17995         %EM_TREE_OPENTREEVIEWER;
17996
17997     %end;
17998
17999    %else
18000    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18001
18002         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18003         %include temp;
18004         filename temp;
18005         %EM_TREE_CLOSETREEVIEWER;
18006
18007     %end;
18008
18009
18010     %doendm:
18011  %mend main;
18012
18013  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18015 +%macro em_tree_makePlotDs( multipleTar= );
18017 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18018 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18019 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18020 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18022 +  /* determine if validation statistics will be displayed */
18023 +  %let validflag=N;
18024 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18025 +    /* determine if validation data exists */
18026 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18027 +      %let validflag=Y;
18028 +    %end;
18029 +  %end;
18031 +   /* retrieve name of decmeta even in presence of multiple targets */
18032 +   %let decmeta = ;
18033 +   %if &EM_DEC_DECMETA eq %then %do;
18034 +     data _Target;
18035 +       set &em_data_variableset;
18036 +       where ROLE='TARGET' and USE in('D', 'Y');
18037 +       keep NAME;
18038 +     run;
18039 +     proc sort data=_Target;
18040 +       by NAME;
18041 +     run;
18042 +     proc sort data=EM_TARGETDECINFO;
18043 +       by TARGET;
18044 +     run;
18045 +     data _Target;
18046 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18047 +       by NAME;
18048 +       if _a then do;
18049 +         call symput('decmeta', trim(DECMETA));
18050 +       end;
18051 +     run;
18052 +     proc delete data=_Target;run;
18053 +   %end;
18054 +   %else %let decmeta = &EM_DEC_DECMETA;
18057 +  /* retrieve targetEvent from decmeta */
18058 +  %let targetEvent=;
18059 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18060 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18061 +      data _null_;
18062 +       set &DECMETA(where=(_TYPE_="TARGET"));
18063 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18064 +      run;
18065 +    %end;
18066 +  %end;
18068 +  /* retrieve predicted var for targetEvent from decmeta */
18069 +  %let predTarget=;
18070 +  %let predLvl=;
18071 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18072 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18073 +      data _null_;
18074 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18075 +       call symput('predTarget', strip(VARIABLE));
18076 +       call symput('predLvl', strip(LEVEL));
18077 +      run;
18078 +    %end;
18079 +  %end;
18080 +  %else %do;
18081 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18082 +      data _null_;
18083 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18084 +       call symput('predTarget', strip(VARIABLE));
18085 +      run;
18086 +    %end;
18087 +  %end;
18089 +  /* create BelowText value */
18090 +  data belowtext;
18091 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18092 +    keep node belowtext;
18093 +  run;
18095 +  /* relace belowtext with variable label if it exists */
18096 +  data belowtext2;
18097 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18098 +    keep node belowtextlbl;
18099 +  run;
18101 +  proc sort data=belowtext; by node; run;
18102 +  proc sort data=belowtext2; by node; run;
18104 +  data belowtext;
18105 +    merge belowtext belowtext2(in=_a);
18106 +    by node;
18107 +    if _a then belowtext=belowtextlbl;
18108 +    keep node belowtext;
18109 +  run;
18111 +  /* create AboveText value */
18112 +  data abovetext;
18113 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18114 +  run;
18115 +  proc sort data=abovetext; by node numeric_value; run;
18117 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18118 +  data abovetext;
18119 +    set abovetext(rename=(node=parent));
18120 +    by parent numeric_value;
18121 +    retain abovetext tempstring flag branch origval origchar ;
18122 +    length abovetext $256;
18123 +    length tempstring origchar $64;
18125 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18126 +      if first.parent then do;
18127 +        if missing(character_value) then do;
18128 +          numeric_value = round(numeric_value, &sp_precision);
18129 +          abovetext = "< "||strip(NUMERIC_VALUE);
18130 +          branch = 1;
18131 +          origval = numeric_value;
18132 +          output;
18133 +        end;
18134 +        else do;
18135 +          abovetext = "< "||strip(CHARACTER_VALUE);
18136 +          branch = 1;
18137 +          origchar = character_value;
18138 +          output;
18139 +        end;
18141 +        if first.parent AND last.parent then do;
18142 +          if missing(character_value) then do;
18143 +            numeric_value = round(numeric_value, &sp_precision);
18144 +            branch = branch + 1;
18145 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18146 +            output;
18147 +          end;
18148 +          else do;
18149 +            branch = branch + 1;
18150 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18151 +            output;
18152 +          end;
18153 +        end;
18154 +      end;
18155 +      else if last.parent then do;
18156 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18157 +          if missing(character_value) then do;
18158 +            numeric_value = round(numeric_value, &sp_precision);
18159 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18160 +          end;
18161 +          else do;
18162 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18163 +          end;
18164 +          branch = branch + 1;
18165 +          output;
18167 +          if missing(character_value) then do;
18168 +            numeric_value = round(numeric_value, &sp_precision);
18169 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18170 +          end;
18171 +          else do;
18172 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18173 +          end;
18174 +          branch = branch + 1;
18175 +          output;
18176 +        end;
18177 +        else do;
18178 +          if missing(character_value) then do;
18179 +            numeric_value = round(numeric_value, &sp_precision);
18180 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18181 +          end;
18182 +          else do;
18183 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18184 +          end;
18185 +          branch = branch + 1;
18186 +          output;
18187 +        end;
18188 +      end;
18189 +      else do;
18190 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18191 +          if missing(character_value) then do;
18192 +            numeric_value = round(numeric_value,&sp_precision);
18193 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18194 +            origval = numeric_value;
18195 +          end;
18196 +          else do;
18197 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18198 +            origchar = character_value;
18199 +          end;
18200 +          branch = branch + 1;
18201 +          output;
18203 +        end;
18204 +        else do;
18205 +          if missing(character_value) then do;
18206 +            numeric_value = round(numeric_value, &sp_precision);
18207 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18208 +            origval = numeric_value;
18209 +          end;
18210 +          else do;
18211 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18212 +            origval = character_value;
18213 +          end;
18214 +          branch = branch + 1;
18215 +          output;
18216 +        end;
18217 +      end;
18218 +    end;
18219 +    else do;
18220 +       if first.numeric_value then do;
18221 +         flag = 0;
18222 +         abovetext = strip(CHARACTER_VALUE);
18223 +         branch = numeric_value;
18224 +         if first.numeric_value AND last.numeric_value then do;
18225 +           output;
18226 +         end;
18227 +       end;
18228 +       else if last.numeric_value then do;
18229 +         if flag=0 then do;
18230 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18231 +           length = length(strip(tempstring));
18232 +           if length < 32 then do;
18233 +             abovetext = strip(tempstring);
18234 +           end;
18235 +           else do;
18236 +             abovetext = strip(abovetext)||", ...";
18237 +             flag = 1;
18238 +           end;
18239 +         end;
18240 +         branch = numeric_value;
18241 +         output;
18242 +       end;
18243 +       else do;
18244 +         if flag=0 then do;
18245 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18246 +           length = length(strip(tempstring));
18247 +           if length < 32 then do;
18248 +             abovetext = strip(tempstring);
18249 +           end;
18250 +           else do;
18251 +             abovetext = strip(abovetext)||", ...";
18252 +             flag=1;
18253 +           end;
18254 +         end;
18255 +         branch = numeric_value;
18256 +       end;
18257 +    end;
18258 +    keep parent branch abovetext;
18259 +  run;
18261 +  /* MIssing value to abovetext */
18262 +  data tempmissing;
18263 +    set &EM_USER_OUTRULES;
18264 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18265 +    rename node=parent numeric_value=branch character_value=misschar;
18266 +  run;
18269 +  proc sort data=abovetext; by parent branch; run;
18270 +  proc sort data=tempmissing; by parent branch; run;
18271 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18273 +  data tempoutnodes;
18274 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18275 +    by parent branch;
18276 +    length traintotal validtotal 8;
18277 +    retain traintotal validtotal;
18279 +    if _a then do;
18280 +      if ^MISSING(abovetext) then do;
18281 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18282 +      end;
18283 +      else do;
18284 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18285 +      end;
18286 +    end;
18287 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18289 +    if node=1 then do;
18290 +      traintotal = N;
18291 +      validtotal=VN;
18292 +    end;
18294 +    drop role rank stat misschar belowtext;
18295 +  run;
18296 +  proc sort data=tempoutnodes; by node; run;
18297 +  proc sort data=belowtext; by node; run;
18299 +  data tempoutnodes;
18300 +    merge tempoutnodes belowtext;
18301 +    by node;
18303 +  run;
18305 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18306 +  %let adjusted = N;
18307 +  %let npriors = 0;
18308 +  data _null_ ;
18309 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18310 +    if eof then do ;
18311 +      call symput("npriors" , strip(put(_N_,best.))) ;
18312 +    end;
18313 +  run;
18314 +  %if &npriors gt 0 %then %let adjusted=Y;
18317 +  /* create a table with targetUsed and targetLevel columns for each node */
18318 +  data temptarmeta;
18319 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18320 +    %if &multipleTar eq N %then %do;
18321 +      AND USE in ('D', 'Y')
18322 +    %end;
18323 +    ));
18324 +    length TARGET $32;
18325 +    Target=name;
18326 +    keep target level;
18327 +  run;
18329 +  %if &multipleTar eq Y %then %do;
18330 +    data temptargetused;
18331 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18332 +      keep node target;
18333 +    run;
18334 +    proc sort data=temptargetused; by target; run;
18335 +    proc sort data=temptarmeta; by target; run;
18336 +    data temptargetused;
18337 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18338 +      by target;
18339 +      if _a and _b;
18340 +    run;
18341 +  %end;
18342 +  %else %do;
18343 +    data temptargetused;
18344 +      set &EM_USER_OUTSTATS;
18345 +      length target $32 tarlevel $10;
18346 +      target="%EM_TARGET";
18347 +      tarlevel="%EM_TARGET_LEVEL";
18348 +      keep node target tarlevel;
18349 +    run;
18350 +    proc sort data=temptargetused nodupkey; by node; run;
18351 +  %end;
18353 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18354 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18355 +  proc sort data=temptargetused; by node; run;
18358 +  /* create tables for all interval targets as well as all class targets */
18359 +  data tempinterval tempclass;
18360 +    merge tempoutstats temptargetused( rename=(target=targetused));
18361 +    by node;
18362 +    %if "&multipleTar" eq "Y" %then %do;
18363 +      if ((missing(Target)) OR (target=targetused ));
18364 +    %end;
18366 +    if tarlevel="INTERVAL" then output tempinterval;
18367 +    else output tempclass;
18368 +  run;
18370 +  /* iniitalize intTarget and classTarget flags */
18371 +  %let em_intNobs =0;
18372 +  %let em_classNobs = 0;
18373 +  %let em_intTarget= N;
18374 +  %let em_classTarget= N;
18376 +  proc sql;
18377 +    reset noprint;
18378 +    select count(*) into :em_intNobs from tempinterval;
18379 +  quit;
18380 +  proc sql;
18381 +    reset noprint;
18382 +    select count(*) into :em_classNobs from tempclass;
18383 +  quit;
18385 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18386 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18388 +  /* retrieve all information for interval targets */
18389 +  %if &em_intTarget eq Y %then %do;
18391 +    /* determine if leaf variable exists */
18392 +    %let dsid=%sysfunc(open(tempinterval,i));
18393 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18394 +    %let rc=%sysfunc(close(&dsid));
18396 +    proc transpose data=tempinterval
18397 +      %if &leafexists %then %do;
18398 +        (drop=leaf)
18399 +      %end;
18400 +      %if &validexist %then %do;
18401 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18402 +      %end;
18403 +      %else %do;
18404 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18405 +      %end;
18406 +      by node;
18407 +      id statname;
18408 +    run;
18409 +    data tempinterval;
18410 +      set tempinterval;
18411 +      if missing(N) then delete;
18412 +    run;
18413 +  %end;
18415 +  /* retrieve all information for class targets */
18416 +  %if &em_classTarget eq Y %then %do;
18417 +    proc sort data=tempclass; by node category; run;
18418 +    %if &validflag eq N %then %do;
18419 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18420 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18421 +    %end;
18422 +    %else %do;
18423 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18424 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18425 +    %end;
18426 +      set tempclass;
18428 +      %if &validflag eq N %then %do;
18429 +        %if "&adjusted" eq "N" %then %do;
18430 +          if statname="N" then output tempn;
18431 +        %end;
18432 +        %else %do;
18433 +          if statname="NPRIORS" then output tempn;
18434 +        %end;
18435 +        else if statname="PREDICTION" then output temppredict;
18436 +        else if statname="PROBABILITY" then output tempprob;
18437 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18438 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18439 +      %end;
18440 +      %else %do;
18441 +        %if "&adjusted" eq "N" %then %do;
18442 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18443 +        %end;
18444 +        %else %do;
18445 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18446 +        %end;
18447 +        else if statname="PREDICTION" then output temppredict;
18448 +        else if statname="PROBABILITY" then output tempprob;
18449 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18450 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18451 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18452 +      %end;
18453 +    run;
18456 +    /* determine if profit/loss exists in tempprofit */
18457 +    %let em_profitflag=0;
18458 +    %let em_lossflag=0;
18459 +    proc sql;
18460 +      reset noprint;
18461 +      select count(*) into :em_profitflag from tempprofit;
18462 +    quit;
18463 +    proc sql;
18464 +      reset noprint;
18465 +      select count(*) into :em_lossflag from temploss;
18466 +    quit;
18468 +    %if &validFlag eq Y %then %do;
18469 +      proc transpose data=tempn
18470 +        %if "&adjusted" eq "N" %then %do;
18471 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18472 +        %end;
18473 +        %else %do;
18474 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18475 +        %end;
18476 +        by node;
18477 +        id statname;
18478 +      run;
18479 +      %if &em_profitflag ne 0 %then %do;
18480 +        proc transpose data=tempprofit out=tempprofit;
18481 +          by node category;
18482 +          id statname ;
18483 +        run;
18484 +      %end;
18485 +      %if &em_lossflag ne 0 %then %do;
18486 +        proc transpose data=temploss out=temploss;
18487 +          by node category;
18488 +          id statname ;
18489 +        run;
18490 +      %end;
18491 +      data tempprob;
18492 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18493 +        by node
18494 +        %if &multipleTar eq Y %then %do;
18495 +          target
18496 +        %end;
18497 +        category;
18498 +      run;
18499 +    %end;
18501 +    /* store percentcorrect value */
18502 +    data temppredict;
18503 +      merge tempprob temppredict(in=_a);
18504 +      by node category;
18505 +      if _a then do;
18506 +        percentCorrect = statvalue;
18507 +        %if &validFlag eq Y %then %do;
18508 +          vpercentCorrect= vstatvalue;
18509 +        %end;
18510 +      end;
18511 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18512 +      %if &validFlag eq Y %then %do;
18513 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18514 +      %end;
18515 +      ;
18516 +      if missing(percentCorrect) then delete;
18517 +      drop target;
18518 +    run;
18520 +    /* build profittext */
18521 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18522 +      data tempprofittext(keep= node profittext profitloss);
18523 +        length profittext $800 profitloss 8.;
18524 +        retain profittext profitloss;
18526 +        merge tempprob
18527 +        %if &em_profitflag ne 0 %then %do;
18528 +          tempprofit
18529 +        %end;
18530 +        %else %if &em_lossflag ne 0 %then %do;
18531 +          temploss
18532 +        %end;
18533 +        ;
18534 +        by node category;
18536 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18537 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18538 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18539 +          %let profittype = ALL;
18540 +        %end;
18542 +        /* create the profitloss variable for nodecolor if selected */
18543 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18545 +        %if "&profittype" eq "ALL" %then %do;
18546 +          if strip(CATEGORY)="&targetEvent" then do;
18547 +            profitloss=statvalue;
18548 +          end;
18549 +          if first.node then do;
18550 +            %if &validFlag eq N %then %do;
18551 +             %if &em_profitflag ne 0 %then %do;
18552 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18553 +             %end;
18554 +             %if &em_lossflag ne 0 %then %do;
18555 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18556 +             %end;
18557 +            %end;
18558 +            %else %do;
18559 +             %if &em_profitflag ne 0 %then %do;
18560 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18560!+;
18561 +             %end;
18562 +             %if &em_lossflag ne 0 %then %do;
18563 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18564 +             %end;
18565 +            %end;
18566 +          end;
18567 +          else if last.node then do;
18568 +            %if &validFlag eq N %then %do;
18569 +             %if &em_profitflag ne 0 %then %do;
18570 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18571 +             %end;
18572 +             %if &em_lossflag ne 0 %then %do;
18573 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18574 +             %end;
18575 +             /*if CATEGORY="&targetEvent" then do;
18576 +               profitloss=statvalue;
18577 +             end;*/
18578 +            %end;
18579 +            %else %do;
18580 +             %if &em_profitflag ne 0 %then %do;
18581 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18581!+14.&EM_PROPERTY_SPLITPRECISION);
18582 +                if CATEGORY="&targetEvent" then do;
18583 +                 profitloss=ALTERNATIVE_PROFIT;
18584 +                end;
18585 +             %end;
18586 +             %if &em_lossflag ne 0 %then %do;
18587 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18587!+14.&EM_PROPERTY_SPLITPRECISION);
18588 +                if CATEGORY="&targetEvent" then do;
18589 +                  profitloss=ALTERNATIVE_LOSS;
18590 +                end;
18591 +             %end;
18592 +            %end;
18593 +            output;
18594 +          end;
18595 +          else do;
18596 +            %if &validFlag eq N %then %do;
18597 +             %if &em_profitflag ne 0 %then %do;
18598 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18599 +             %end;
18600 +             %if &em_lossflag ne 0 %then %do;
18601 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18602 +             %end;
18603 +            %end;
18604 +            %else %do;
18605 +             %if &em_profitflag ne 0 %then %do;
18606 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18606!+14.&EM_PROPERTY_SPLITPRECISION);
18607 +             %end;
18608 +             %if &em_lossflag ne 0 %then %do;
18609 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18609!+14.&EM_PROPERTY_SPLITPRECISION);
18610 +             %end;
18611 +            %end;
18612 +          end;
18613 +        %end;
18614 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18615 +          if strip(CATEGORY) = "&targetevent" then do;
18616 +            %if &validFlag eq N %then %do;
18617 +             %if &em_profitflag ne 0 %then %do;
18618 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18619 +             %end;
18620 +             %if &em_lossflag ne 0 %then %do;
18621 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18622 +             %end;
18623 +             profitloss=statvalue;
18624 +            %end;
18625 +            %else %do;
18626 +             %if &em_profitflag ne 0 %then %do;
18627 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18627!+;
18628 +                profitloss=ALTERNATIVE_PROFIT;
18629 +             %end;
18630 +             %if &em_lossflag ne 0 %then %do;
18631 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18632 +                profitloss=ALTERNATIVE_LOSS;
18633 +             %end;
18634 +            %end;
18635 +            output;
18636 +          end;
18637 +        %end;
18638 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18639 +          if strip(CATEGORY) = "&targetevent" then do;
18640 +            %if &validFlag eq N %then %do;
18641 +             profitloss=statvalue;
18642 +            %end;
18643 +            %else %do;
18644 +             %if &em_profitflag ne 0 %then %do;
18645 +                profitloss=ALTERNATIVE_PROFIT;
18646 +             %end;
18647 +             %if &em_lossflag ne 0 %then %do;
18648 +                profitloss=ALTERNATIVE_LOSS;
18649 +             %end;
18650 +            %end;
18651 +            output;
18652 +          end;
18653 +        %end;
18654 +      run;
18655 +    %end;
18657 +    data tempprob(keep= node probtext);
18658 +      length probtext $800;
18659 +      retain probtext;
18660 +      set tempprob ;
18661 +      by node;
18663 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18664 +      %let probtype = &EM_PROPERTY_TARGET;
18665 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18666 +        %let probtype = ALL;
18667 +      %end;
18669 +      %if "&probtype" eq "ALL" %then %do;
18670 +        if first.node then do;
18671 +          %if &validFlag eq N %then %do;
18672 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18673 +          %end;
18674 +          %else %do;
18675 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18676 +          %end;
18677 +        end;
18678 +        else if last.node then do;
18679 +          %if &validFlag eq N %then %do;
18680 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18681 +          %end;
18682 +          %else %do;
18683 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18684 +          %end;
18685 +          output;
18686 +        end;
18687 +        else do;
18688 +          %if &validFlag eq N %then %do;
18689 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18690 +          %end;
18691 +          %else %do;
18692 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18693 +          %end;
18694 +        end;
18695 +      %end;
18696 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18697 +        if strip(CATEGORY) = "&targetevent" then do;
18698 +          %if &validFlag eq N %then %do;
18699 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18700 +          %end;
18701 +          %else %do;
18702 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18703 +          %end;
18704 +          output;
18705 +        end;
18706 +      %end;
18707 +      %else %if "&probtype" eq "NONE" %then %do;
18708 +        if last.node then do;
18709 +          output;
18710 +        end;
18711 +      %end;
18712 +    run;
18713 +  %end;
18715 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18717 +  %let oldexists=0;
18718 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18719 +     data old_tree_plot;
18720 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18721 +        rename nodecolor=oldnodecolor;
18722 +     run;
18724 +     proc sort data=old_tree_plot;
18725 +        by node;
18726 +     run;
18728 +     %let oldexists=1;
18729 +  %end;
18731 +  data &EM_USER_TREE_PLOT;
18732 +    length textall $800;
18733 +    merge tempoutnodes temptargetused
18735 +    %if &em_intTarget eq Y %then %do;
18736 +      tempinterval
18737 +    %end;
18739 +    %if &em_classTarget eq Y %then %do;
18741 +      %if &validFlag eq N %then %do;
18742 +        tempn(rename=(statvalue=N))
18743 +      %end;
18744 +      %else %do;
18745 +        tempn
18746 +      %end;
18748 +      temppredict tempprob
18750 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18751 +        tempprofittext
18752 +      %end;
18753 +    %end;
18754 +    ;
18755 +    by node;
18757 +    /* build nodetext based on user selection */
18758 +    textall="";
18760 +    %if &em_intTarget eq Y %then %do;
18761 +    if tarlevel="INTERVAL" then do;
18762 +      /* Nodeid */
18763 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18764 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18765 +      %end;
18767 +      /* Target identifier if multiple targets are used */
18768 +      %if "&multipleTar" eq "Y" %then %do;
18769 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18770 +      %end;
18772 +      %if &validFlag eq Y %then %do;
18773 +         /* Column labels displayed in validflag eq Y only */
18774 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18775 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18775!+noquote ))";
18776 +         %end;
18778 +         /* Average values */
18779 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18780 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18781 +         %end;
18783 +         /* RASE */
18784 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18785 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18786 +         %end;
18788 +         /* Count */
18789 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18790 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18791 +         %end;
18792 +      %end;
18793 +      %else %do;
18794 +         /* Average values */
18795 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18796 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18797 +         %end;
18799 +         /* RASE */
18800 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18801 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18802 +         %end;
18804 +         /* Count */
18805 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18806 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18807 +         %end;
18808 +      %end;
18810 +      /* nodecolor */
18811 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18812 +        nodecolor=PREDICTION;
18813 +      %end;
18814 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18815 +        nodecolor=RASE;
18816 +      %end;
18817 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18818 +        nodecolor=1;
18819 +      %end;
18821 +    end;
18822 +    %end;
18823 +    %if &em_classTarget eq Y %then %do;
18824 +    if tarlevel^="INTERVAL" then  do;
18826 +      /* Nodeid */
18827 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18828 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18829 +      %end;
18830 +      /* Target identifier if multiple targets are used */
18831 +      %if "&multipleTar" eq "Y" %then %do;
18832 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18833 +      %end;
18835 +      /* Predicted values */
18836 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18837 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18838 +      %end;
18840 +      /* Column labels displayed in validflag eq Y only */
18841 +      %if "&ValidFlag" eq "Y" %then %do;
18842 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18843 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18843!+noquote ))";
18844 +        %end;
18845 +      %end;
18847 +      /* Target Values */
18848 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18849 +        textall=strip(textall)||"0A"x||strip(probtext);
18850 +      %end;
18852 +      /* include profit or loss for all target levels */
18853 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18854 +        textall=strip(textall)||"0A"x||strip(profittext);
18855 +      %end;
18857 +      %if &validFlag eq N %then %do;
18858 +        /* Percent Correct */
18859 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18860 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18861 +        %end;
18863 +         /* Count */
18864 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18865 +          %if "&adjusted" eq "N" %then %do;
18866 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18867 +          %end;
18868 +          %else %do;
18869 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18870 +          %end;
18871 +         %end;
18872 +      %end;
18873 +      %else %do;
18874 +        /* Percent Correct */
18875 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18876 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18877 +        %end;
18879 +         /* Count */
18880 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18881 +          %if "&adjusted" eq "N" %then %do;
18882 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18883 +          %end;
18884 +          %else %do;
18885 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18886 +          %end;
18887 +         %end;
18888 +      %end;
18890 +      /* nodecolor */
18891 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18892 +       %if &multipleTar ne Y %then %do;
18893 +        nodecolor=&predTarget;
18894 +       %end;
18895 +       %else %do;
18896 +         nodecolor=percentcorrect;
18897 +       %end;
18898 +      %end;
18899 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18900 +        nodecolor=percentcorrect;
18901 +      %end;
18902 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18903 +        nodecolor=1;
18904 +      %end;
18905 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18906 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18907 +          nodecolor=percentcorrect;
18908 +        %end;
18909 +        %else %do;
18910 +          nodecolor=profitloss;
18911 +        %end;
18912 +      %end;
18914 +    end;
18915 +    %end;
18916 +    %if &em_intTarget eq Y %then %do;
18917 +     drop  PREDICTION  TARGET TARLEVEL
18918 +     %if &ValidFlag eq Y %then %do;
18919 +         VPREDICTION
18920 +     %end;
18921 +     ;
18922 +    %end;
18923 +    %if &em_classTarget eq Y %then %do;
18924 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18925 +     %if &ValidFlag eq Y %then %do;
18926 +         VSTATVALUE
18927 +     %end;
18928 +     ;
18929 +    %end;
18931 +  run;
18933 +  /* add leaf index information to plotds - based on primary target only*/
18934 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18935 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18936 +      set &EM_USER_OUTSTATS;
18937 +      if ((statname="PROBABILITY"
18938 +      %if &validexist %then %do;
18939 +       or statname="VALID: PROBABILITY"
18940 +      %end;
18941 +      ) AND (CATEGORY="&TARGETEVENT")
18942 +      %if "&multipleTar" eq "Y" %then %do;
18943 +        AND (Target="%EM_TARGET")
18944 +      %end;
18945 +      );
18946 +    run;
18948 +    %if &validexist %then %do;
18949 +      proc sort data=tempprob; by node; run;
18950 +      %let vpredTarget = V%substr(&predTarget, 2);
18951 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18952 +         by node;
18953 +         id statname;
18954 +      run;
18955 +    %end;
18956 +  %end;
18957 +  %else %do;
18958 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18959 +      set &EM_USER_OUTSTATS;
18960 +      if ((statname="PREDICTION"
18961 +      %if &validexist %then %do;
18962 +       or statname="VALID: PREDICTION"
18963 +      %end;
18964 +      )
18965 +      %if "&multipleTar" eq "Y" %then %do;
18966 +        AND (Target="%EM_TARGET")
18967 +      %end;
18968 +      );
18969 +    run;
18970 +    %if &validexist %then %do;
18971 +      proc sort data=tempprob; by node; run;
18972 +      %let vpredTarget = V%substr(&predTarget, 2);
18973 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18974 +         by node;
18975 +         id statname;
18976 +      run;
18977 +    %end;
18978 +  %end;
18980 +  proc sort data=tempprob; by node; run;
18981 +  data tempoutnodes;
18982 +    merge tempoutnodes tempprob;
18983 +    by node;
18984 +  run;
18986 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18987 +  data tempnodes;
18988 +    retain traintotal validtotal;
18989 +    set tempnodes(where=(leaf ne . ));
18990 +    tprob=round(&predTarget, .01);
18991 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18992 +      percevent_train=round(tprob*100, .01);
18993 +    %end;
18994 +    %else %do;
18995 +      percevent_train=tprob;
18996 +    %end;
18998 +    perc_train=round((n/traintotal)*100, 0.01);
18999 +    /* leafwidth already has a *10 multiplier */
19000 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19002 +    %if &validexist %then %do;
19003 +      %let vpredTarget = V%substr(&predTarget,2);
19004 +      vprob=round(&vpredTarget, .01);
19005 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19006 +        percevent_valid=round(vprob*100, .01);
19007 +      %end;
19008 +      %else %do;
19009 +        percevent_valid=vprob;
19010 +      %end;
19011 +      perc_valid=round((vn/validtotal)*100, .01);
19012 +    %end;
19014 +    index=_N_;
19015 +    keep node index tprob perc_train percevent_train
19016 +    %if &validexist %then %do;
19017 +        vprob percevent_valid perc_valid
19018 +    %end;
19019 +    ;
19020 +  run;
19021 +  proc sort data=tempnodes; by node; run;
19022 +  data &EM_USER_TREE_PLOT;
19023 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19024 +    by node;
19025 +    if missing(node) then delete;
19026 +    %if &oldexists %then %do;
19027 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19028 +      drop oldnodecolor;
19029 +    %end;
19030 +    abovetext = compbl(abovetext);
19032 +    /* add variable labels */
19033 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19034 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19035 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19036 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19037 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19038 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19040 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19041 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19042 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19043 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19044 +          %end;
19045 +          %else %do;
19046 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19047 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19048 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19049 +          %end;
19050 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19052 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19053 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19054 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19055 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19056 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19057 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19058 +          %end;
19059 +          %else %do;
19060 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19061 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19062 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19063 +          %end;
19064 +    ;
19065 +  run;
19067 +  /* delete temporary tables */
19068 +  proc datasets lib=work nolist;
19069 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19070 +  run;
19072 +%mend em_tree_makePlotDs;
19076 +%macro em_tree_report;
19078 +   /* report properties */
19079 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19080 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19081 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19082 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19083 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19084 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19085 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19086 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19087 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19088 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19089 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19090 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19091 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19093 +   %let validexist=0;
19094 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19095 +     %let validexist=1;
19096 +   %end;
19098 +   /* determine if multiple targets will be processed */
19099 +   %let em_tree_multipleTargets=N;
19100 +   %let em_tree_numTarget=1;
19101 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19102 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19103 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19104 +         %let em_tree_multipleTargets=N;
19105 +      %end;
19106 +      %else %do;
19107 +        data _null_;
19108 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19109 +          if eof then
19110 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19111 +        run;
19113 +        %if &em_tree_numTarget gt 1 %then %do;
19114 +           %let em_tree_multipleTargets=Y;
19115 +        %end;
19116 +     %end;
19117 +   %end;
19119 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19121 +   /* variable importance */
19122 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19123 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19125 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19126 +     /* and the columns may not be generated                                                                                 */
19127 +     %let em_tree_cvexists=;
19128 +     %let em_tree_surrexists=.;
19129 +     data _null_;
19130 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19131 +       if eof then do ;
19132 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19133 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19134 +       end;
19135 +     run;
19137 +     data &EM_USER_OUTIMPORT;
19138 +         set &EM_USER_OUTIMPORT;
19139 +         /* format columns based on Precison value specified */
19140 +         format importance 15.&EM_PROPERTY_PRECISION
19141 +              %if &validexist %then %do;
19142 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19143 +              %end;
19144 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19145 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19146 +              %end;
19147 +         ;
19148 +     run;
19150 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19151 +     proc print data=&EM_USER_OUTIMPORT
19152 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19153 +          (where=((nrules>0) OR (nsurrogates>0)))
19154 +        %end;
19155 +        %else %do;
19156 +           (where=(nrules>0))
19157 +        %end;
19158 +        label noobs
19159 +        ;
19160 +     run;
19161 +     title10;
19163 +   %end;
19165 +   /* Sequence */
19166 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19167 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19168 +   data _null_ ;
19169 +      set &EM_USER_outseq (obs=2) end=eof ;
19170 +      if eof then do ;
19171 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19172 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19173 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19174 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19175 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19176 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19177 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19178 +      end;
19179 +    run;
19181 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19182 +      data &EM_USER_OUTSEQ;
19183 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19184 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19185 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19186 +           _XMISC_=_VMISC_
19187 +        %end;
19188 +        %if "&em_tree_aprof" ne "."  %then %do;
19189 +           _XAPROF_=_VAPROF_
19190 +           _XPROF_ = _VPROF_
19191 +        %end;
19192 +        %if "&em_tree_aloss" ne "."  %then %do;
19193 +           _XALOSS_=_VALOSS_
19194 +        %end;
19195 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19196 +           _XPASE_ = _VPASE_
19197 +           _XPMISC_ = _VPMISC_
19198 +        %end;
19200 +        ));
19201 +     %end;
19202 +     %else %do;
19203 +        set &EM_USER_OUTSEQ;
19204 +     %end;
19206 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19207 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19208 +            _MISC_   15.&EM_PROPERTY_PRECISION
19209 +         %end;
19210 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19211 +            _PASE_  15.&EM_PROPERTY_PRECISION
19212 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19213 +         %end;
19214 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19215 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19216 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19217 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19218 +            %end;
19219 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19220 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19221 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19222 +            %end;
19223 +         %end;
19224 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19225 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19226 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19227 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19228 +            %end;
19229 +         %end;
19230 +         %if "&em_tree_seq" ne "." %then %do;
19231 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19232 +         %end;
19233 +         %if "&em_tree_vseq" ne "." %then %do;
19234 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19235 +         %end;
19236 +         %if "&em_tree_aprof" ne "." %then %do;
19237 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19238 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19239 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19240 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19241 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19242 +           %end;
19243 +         %end;
19244 +         %else %if "&em_tree_aloss" ne "." %then %do;
19245 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19246 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19247 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19248 +           %end;
19249 +         %end;
19250 +      ;
19251 +    run;
19252 +   %end;
19254 +   /* Observation Based Importance */
19255 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19257 +      /* need to check for 0 obs */
19258 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19259 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19260 +      %let rc=%sysfunc(close(&dsid));
19262 +      %if &onobs %then %do;
19263 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19264 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19266 +         data &EM_USER_OUTOBSIMP;
19267 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19268 +           if _a;
19269 +           by _INPUT1_;
19270 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19271 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19272 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19273 +                   %end;
19274 +                   ;
19275 +         run;
19276 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19277 +      %end;
19278 +   %end;
19280 +  %end;
19282 +  /* create dataset to support tree diagram and icicle plot */
19283 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19284 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19286 +  /* display tree diagram */
19287 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19288 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19290 +  /* display icicle diagram */
19291 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19292 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19294 +  /* Leaf Statistics Plot */
19295 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19297 +  /* print leaf information to output window */
19298 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19300 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19301 +       by descending N;
19302 +     run;
19304 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19305 +     %local vn;
19306 +     data _null_;
19307 +       set t (obs=2) end=eof;
19308 +       if eof then do;
19309 +         call symput("vn", strip(put(vn, best.)));
19310 +       end;
19311 +     run;
19313 +     data t;
19314 +       set t;
19315 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19316 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19317 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19318 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19319 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19320 +       %end;
19321 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19322 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19323 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19324 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19325 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19326 +          %end;
19327 +       %end;
19328 +       ;
19329 +     run;
19331 +     /* determine if rase is found in t */
19332 +    %let dsid=%sysfunc(open(t,i));
19333 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19334 +    %let rc=%sysfunc(close(&dsid));
19336 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19337 +     proc print data=t noobs label;
19338 +       where tprob ne .;
19339 +       var node depth N tprob
19340 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19341 +         %if "&vn" ne "." %then %do;
19342 +           VN
19343 +         %end;
19344 +         vprob
19345 +       %end;
19346 +       %if &raseexists %then %do;
19347 +            RASE
19348 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19349 +              VRASE
19350 +            %end;
19351 +       %end;
19352 +       ;
19353 +     run;
19354 +     title10;
19355 +  %end;
19357 +  /* create plots that are done during training of node */
19358 +  /* display iterative plot, including reference line */
19359 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19360 +   /* %if &nleaves eq  %then %do; */
19361 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19362 +      data _null_;
19363 +        set &EM_USER_OUTTOPOLOGY end=eof;
19364 +        if eof then do;
19365 +          call symput('nleaves', LEAF);
19366 +        end;
19367 +      run;
19368 +   /* %end; */
19370 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19371 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19372 +  %end;
19374 +  /* display leaf statistics */
19375 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19377 +  /* stats by node if multiple targets = Y */
19378 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19379 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19380 +    data &EM_USER_OUTSTATS;
19381 +      set &EM_USER_OUTSTATS;
19383 +     * if STATNAME="TARGET" then delete;
19384 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19385 +      drop leaf;
19386 +    run;
19387 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19389 +  %end;
19390 +  %else %do;
19391 +    /* add outstats and outdescribe to spk but not results */
19392 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19393 +  %end;
19395 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS6.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set EMWS6.TREE_OUTSEQ.
NOTE: The data set EMWS6.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 370 observations read from the data set EMWS6.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS6.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 189 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 162 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 189 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 54 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 27 observations read from the data set WORK.TEMPN.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS6.TREE_TREE_PLOT has 27 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS6.TREE_TREE_PLOT.
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS6.TREE_TREE_PLOT has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS6.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 27 observations read from the data set EMWS6.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19396
19397  *------------------------------------------------------------*;
19398  * End REPORT: Tree;
19399  *------------------------------------------------------------*;
 
19400  /* Reset EM Options */
19401  options formchar="|----|+|---+=|-/\<>*";
19402  options nocenter ls=256 ps=10000;
19403  goptions reset=all device=GIF NODISPLAY;
 
19404  proc sort data=WORK.EM_USER_REPORT;
19405  by ID VIEW;
19406  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19407  proc sort data=EMWS6.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19408  by NAME;
19409  run;
 
NOTE: There were 14 observations read from the data set EMWS6.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19410  proc sort data=EMWS6.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19411  by NAME;
19412  run;
 
NOTE: There were 14 observations read from the data set EMWS6.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19413  data WORK.ASSESS_META;
19414  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19415  by NAME;
19416  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19417  data EM_temp_assessMeta;
19418  set EMWS6.Tree_CMeta_TRAIN;
19419  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19420  run;
 
NOTE: There were 12 observations read from the data set EMWS6.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19421  data EM_temp_assessdata;
19422  set EMWS6.Tree_TRAIN(keep=
19423  F_TargetBuy
19424  I_TargetBuy
19425  P_TargetBuy0
19426  P_TargetBuy1
19427  Q_TargetBuy0
19428  Q_TargetBuy1
19429  R_TargetBuy0
19430  R_TargetBuy1
19431  U_TargetBuy
19432  V_TargetBuy0
19433  V_TargetBuy1
19434  _WARN_
19435  TargetBuy
19436  );
19437  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS6.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23722   data EM_temp_assessMeta;
23723   set EMWS6.Tree_CMeta_TRAIN;
23724   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23725   run;
 
NOTE: There were 12 observations read from the data set EMWS6.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23726   data EM_temp_assessdata;
23727   set EMWS6.Tree_VALIDATE(keep=
23728   F_TargetBuy
23729   I_TargetBuy
23730   P_TargetBuy0
23731   P_TargetBuy1
23732   Q_TargetBuy0
23733   Q_TargetBuy1
23734   R_TargetBuy0
23735   R_TargetBuy1
23736   U_TargetBuy
23737   V_TargetBuy0
23738   V_TargetBuy1
23739   _WARN_
23740   TargetBuy
23741   );
23742   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS6.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 7778 observations read from the data set EMWS6.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS6.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28036   %let _cn = %sysfunc(getoption(CENTER));
28037   options nocenter;
28038   proc print data=EMWS6.Tree_EMREPORTFIT noobs label;
28039   var STAT LABEL TRAIN
28040   VALIDATE
28041   ;
28042   by TARGET TARGETLABEL;
28043   title9 ' ';
28044   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28045   run;
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28046   title10;
28047   options &_cn;
 
28048   proc sort data=EMWS6.Tree_EMCLASSIFICATION nothreads;
28049   by DATAROLE TARGET TARGETLABEL;
28050   run;
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS6.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
28051   %let _cn = %sysfunc(getoption(CENTER));
28052   options nocenter;
28053   proc print data=EMWS6.Tree_EMCLASSIFICATION noobs label;
28054   var from into pct_row pct_col count percent
28055   ;
28056   by DATAROLE TARGET TARGETLABEL;
28057   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28058   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28059   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28060   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28061   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28062   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28063   where _TYPE_='PREDICTION';
28064   title9 ' ';
28065   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28066   run;
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
28067   title9;
28068   title10;
28069   options &_cn;
 
28070   %let _cn = %sysfunc(getoption(CENTER));
28071   options nocenter;
28072   data EMWS6.Tree_EMEVENTREPORT;
28073   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28073 !  8;
28074   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28074 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28074 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28074 ! FALSEEVENT
28075   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28075 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28075 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28076      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28077   FALSEEVENT=0;
28078   FALSENEVENT=0;
28079   TRUEEVENT=0;
28080   TRUENEVENT=0;
28081   set EMWS6.Tree_EMEVENTREPORT;
28082   run;
 
NOTE: There were 2 observations read from the data set EMWS6.TREE_EMEVENTREPORT.
NOTE: The data set EMWS6.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
28083   proc print data=EMWS6.Tree_EMEVENTREPORT noobs label;
28084   title9 ' ';
28085   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28086   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28087   run;
 
NOTE: There were 2 observations read from the data set EMWS6.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
28088   title10;
28089   options &_cn;
 
28090   proc datasets library=EMWS6 nolist;
28091   modify Tree_EMRANK;
28092   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28093   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28094   run;
 
NOTE: MODIFY was successful for EMWS6.TREE_EMRANK.DATA.
28095   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
28096   %let _cn = %sysfunc(getoption(CENTER));
28097   options nocenter;
28098   proc print data=EMWS6.Tree_EMRANK label noobs;
28099   var
28100   decile gain lift liftc resp respc N _meanP_;
28101   by
28102   notsorted DATAROLE
28103   notsorted TARGET
28104   notsorted TARGETLABEL
28105   ;
28106   title9 ' ';
28107   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28108   run;
 
NOTE: There were 40 observations read from the data set EMWS6.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
28109   title10;
28110   options &_cn;
 
28111   proc datasets library=EMWS6 nolist;
28112   modify Tree_EMSCOREDIST;
28113   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28114   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28115   run;
 
NOTE: MODIFY was successful for EMWS6.TREE_EMSCOREDIST.DATA.
28116   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
