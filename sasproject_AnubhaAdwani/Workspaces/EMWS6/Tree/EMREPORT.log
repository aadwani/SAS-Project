*------------------------------------------------------------*
* Report Log
Date:                December 08, 2017
Time:                15:39:41
*------------------------------------------------------------*
17924  data EMWS6.Tree_EMOUTFIT;
17925  set EMWS6.Tree_EMOUTFIT;
17926  length TargetLabel $200;
17927  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17928  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
17929  run;

NOTE: There were 1 observations read from the data set EMWS6.TREE_EMOUTFIT.
NOTE: The data set EMWS6.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      

17930  proc sort data=EMWS6.Tree_EMREPORTFIT nothreads;
17931  by TARGET;
17932  run;

NOTE: There were 8 observations read from the data set EMWS6.TREE_EMREPORTFIT.
NOTE: The data set EMWS6.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

17933  %let _EMwarndup = 0;
17934  %let _EMtargetdup =;
17935  %let _EMASEtargetdup =;
17936  data _null_;
17937  set EMWS6.Tree_EMOUTFIT;
17938  if .<_ASE_<0.000001 then do;
17939  call symput('_EMwarndup', '1');
17940  call symput('_EMtargetdup', target);
17941  call symput('_EMASEtargetdup', put(_ASE_, best.));
17942  end;
17943  run;

NOTE: There were 1 observations read from the data set EMWS6.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

17944  %let EMEXCEPTIONSTRING=;
17945  *------------------------------------------------------------*;
17946  * REPORT: Tree;
17947  *------------------------------------------------------------*;
17948  %let EM_ACTION = REPORT;
17949  %let syscc = 0;
17950  %macro main;
17951  
17952    %if %upcase(&EM_ACTION) = CREATE %then %do;
17953      filename temp catalog 'sashelp.emmodl.tree_create.source';
17954      %include temp;
17955      filename temp;
17956  
17957      %em_tree_create;
17958    %end;
17959  
17960     %else
17961     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17962  
17963         filename temp catalog 'sashelp.emmodl.tree_train.source';
17964         %include temp;
17965         filename temp;
17966         %em_tree_train;
17967     %end;
17968  
17969    %else
17970    %if %upcase(&EM_ACTION) = SCORE %then %do;
17971      filename temp catalog 'sashelp.emmodl.tree_score.source';
17972      %include temp;
17973      filename temp;
17974  
17975      %em_tree_score;
17976  
17977    %end;
17978  
17979    %else
17980    %if %upcase(&EM_ACTION) = REPORT %then %do;
17981  
17982         filename temp catalog 'sashelp.emmodl.tree_report.source';
17983         %include temp;
17984         filename temp;
17985  
17986         %em_tree_report;
17987     %end;
17988  
17989    %else
17990    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17991  
17992         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17993         %include temp;
17994         filename temp;
17995         %EM_TREE_OPENTREEVIEWER;
17996  
17997     %end;
17998  
17999    %else
18000    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18001  
18002         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18003         %include temp;
18004         filename temp;
18005         %EM_TREE_CLOSETREEVIEWER;
18006  
18007     %end;
18008  
18009  
18010     %doendm:
18011  %mend main;
18012  
18013  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18015 +%macro em_tree_makePlotDs( multipleTar= );
18017 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18018 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18019 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18020 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18022 +  /* determine if validation statistics will be displayed */
18023 +  %let validflag=N;
18024 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18025 +    /* determine if validation data exists */
18026 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18027 +      %let validflag=Y;
18028 +    %end;
18029 +  %end;
18031 +   /* retrieve name of decmeta even in presence of multiple targets */
18032 +   %let decmeta = ;
18033 +   %if &EM_DEC_DECMETA eq %then %do;
18034 +     data _Target;
18035 +       set &em_data_variableset;
18036 +       where ROLE='TARGET' and USE in('D', 'Y');
18037 +       keep NAME;
18038 +     run;
18039 +     proc sort data=_Target;
18040 +       by NAME;
18041 +     run;
18042 +     proc sort data=EM_TARGETDECINFO;
18043 +       by TARGET;
18044 +     run;
18045 +     data _Target;
18046 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18047 +       by NAME;
18048 +       if _a then do;
18049 +         call symput('decmeta', trim(DECMETA));
18050 +       end;
18051 +     run;
18052 +     proc delete data=_Target;run;
18053 +   %end;
18054 +   %else %let decmeta = &EM_DEC_DECMETA;
18057 +  /* retrieve targetEvent from decmeta */
18058 +  %let targetEvent=;
18059 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18060 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18061 +      data _null_;
18062 +       set &DECMETA(where=(_TYPE_="TARGET"));
18063 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18064 +      run;
18065 +    %end;
18066 +  %end;
18068 +  /* retrieve predicted var for targetEvent from decmeta */
18069 +  %let predTarget=;
18070 +  %let predLvl=;
18071 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18072 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18073 +      data _null_;
18074 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18075 +       call symput('predTarget', strip(VARIABLE));
18076 +       call symput('predLvl', strip(LEVEL));
18077 +      run;
18078 +    %end;
18079 +  %end;
18080 +  %else %do;
18081 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18082 +      data _null_;
18083 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18084 +       call symput('predTarget', strip(VARIABLE));
18085 +      run;
18086 +    %end;
18087 +  %end;
18089 +  /* create BelowText value */
18090 +  data belowtext;
18091 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18092 +    keep node belowtext;
18093 +  run;
18095 +  /* relace belowtext with variable label if it exists */
18096 +  data belowtext2;
18097 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18098 +    keep node belowtextlbl;
18099 +  run;
18101 +  proc sort data=belowtext; by node; run;
18102 +  proc sort data=belowtext2; by node; run;
18104 +  data belowtext;
18105 +    merge belowtext belowtext2(in=_a);
18106 +    by node;
18107 +    if _a then belowtext=belowtextlbl;
18108 +    keep node belowtext;
18109 +  run;
18111 +  /* create AboveText value */
18112 +  data abovetext;
18113 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18114 +  run;
18115 +  proc sort data=abovetext; by node numeric_value; run;
18117 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18118 +  data abovetext;
18119 +    set abovetext(rename=(node=parent));
18120 +    by parent numeric_value;
18121 +    retain abovetext tempstring flag branch origval origchar ;
18122 +    length abovetext $256;
18123 +    length tempstring origchar $64;
18125 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18126 +      if first.parent then do;
18127 +        if missing(character_value) then do;
18128 +          numeric_value = round(numeric_value, &sp_precision);
18129 +          abovetext = "< "||strip(NUMERIC_VALUE);
18130 +          branch = 1;
18131 +          origval = numeric_value;
18132 +          output;
18133 +        end;
18134 +        else do;
18135 +          abovetext = "< "||strip(CHARACTER_VALUE);
18136 +          branch = 1;
18137 +          origchar = character_value;
18138 +          output;
18139 +        end;
18141 +        if first.parent AND last.parent then do;
18142 +          if missing(character_value) then do;
18143 +            numeric_value = round(numeric_value, &sp_precision);
18144 +            branch = branch + 1;
18145 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18146 +            output;
18147 +          end;
18148 +          else do;
18149 +            branch = branch + 1;
18150 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18151 +            output;
18152 +          end;
18153 +        end;
18154 +      end;
18155 +      else if last.parent then do;
18156 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18157 +          if missing(character_value) then do;
18158 +            numeric_value = round(numeric_value, &sp_precision);
18159 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18160 +          end;
18161 +          else do;
18162 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18163 +          end;
18164 +          branch = branch + 1;
18165 +          output;
18167 +          if missing(character_value) then do;
18168 +            numeric_value = round(numeric_value, &sp_precision);
18169 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18170 +          end;
18171 +          else do;
18172 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18173 +          end;
18174 +          branch = branch + 1;
18175 +          output;
18176 +        end;
18177 +        else do;
18178 +          if missing(character_value) then do;
18179 +            numeric_value = round(numeric_value, &sp_precision);
18180 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18181 +          end;
18182 +          else do;
18183 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18184 +          end;
18185 +          branch = branch + 1;
18186 +          output;
18187 +        end;
18188 +      end;
18189 +      else do;
18190 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18191 +          if missing(character_value) then do;
18192 +            numeric_value = round(numeric_value,&sp_precision);
18193 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18194 +            origval = numeric_value;
18195 +          end;
18196 +          else do;
18197 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18198 +            origchar = character_value;
18199 +          end;
18200 +          branch = branch + 1;
18201 +          output;
18203 +        end;
18204 +        else do;
18205 +          if missing(character_value) then do;
18206 +            numeric_value = round(numeric_value, &sp_precision);
18207 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18208 +            origval = numeric_value;
18209 +          end;
18210 +          else do;
18211 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18212 +            origval = character_value;
18213 +          end;
18214 +          branch = branch + 1;
18215 +          output;
18216 +        end;
18217 +      end;
18218 +    end;
18219 +    else do;
18220 +       if first.numeric_value then do;
18221 +         flag = 0;
18222 +         abovetext = strip(CHARACTER_VALUE);
18223 +         branch = numeric_value;
18224 +         if first.numeric_value AND last.numeric_value then do;
18225 +           output;
18226 +         end;
18227 +       end;
18228 +       else if last.numeric_value then do;
18229 +         if flag=0 then do;
18230 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18231 +           length = length(strip(tempstring));
18232 +           if length < 32 then do;
18233 +             abovetext = strip(tempstring);
18234 +           end;
18235 +           else do;
18236 +             abovetext = strip(abovetext)||", ...";
18237 +             flag = 1;
18238 +           end;
18239 +         end;
18240 +         branch = numeric_value;
18241 +         output;
18242 +       end;
18243 +       else do;
18244 +         if flag=0 then do;
18245 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18246 +           length = length(strip(tempstring));
18247 +           if length < 32 then do;
18248 +             abovetext = strip(tempstring);
18249 +           end;
18250 +           else do;
18251 +             abovetext = strip(abovetext)||", ...";
18252 +             flag=1;
18253 +           end;
18254 +         end;
18255 +         branch = numeric_value;
18256 +       end;
18257 +    end;
18258 +    keep parent branch abovetext;
18259 +  run;
18261 +  /* MIssing value to abovetext */
18262 +  data tempmissing;
18263 +    set &EM_USER_OUTRULES;
18264 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18265 +    rename node=parent numeric_value=branch character_value=misschar;
18266 +  run;
18269 +  proc sort data=abovetext; by parent branch; run;
18270 +  proc sort data=tempmissing; by parent branch; run;
18271 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18273 +  data tempoutnodes;
18274 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18275 +    by parent branch;
18276 +    length traintotal validtotal 8;
18277 +    retain traintotal validtotal;
18279 +    if _a then do;
18280 +      if ^MISSING(abovetext) then do;
18281 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18282 +      end;
18283 +      else do;
18284 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18285 +      end;
18286 +    end;
18287 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18289 +    if node=1 then do;
18290 +      traintotal = N;
18291 +      validtotal=VN;
18292 +    end;
18294 +    drop role rank stat misschar belowtext;
18295 +  run;
18296 +  proc sort data=tempoutnodes; by node; run;
18297 +  proc sort data=belowtext; by node; run;
18299 +  data tempoutnodes;
18300 +    merge tempoutnodes belowtext;
18301 +    by node;
18303 +  run;
18305 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18306 +  %let adjusted = N;
18307 +  %let npriors = 0;
18308 +  data _null_ ;
18309 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18310 +    if eof then do ;
18311 +      call symput("npriors" , strip(put(_N_,best.))) ;
18312 +    end;
18313 +  run;
18314 +  %if &npriors gt 0 %then %let adjusted=Y;
18317 +  /* create a table with targetUsed and targetLevel columns for each node */
18318 +  data temptarmeta;
18319 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18320 +    %if &multipleTar eq N %then %do;
18321 +      AND USE in ('D', 'Y')
18322 +    %end;
18323 +    ));
18324 +    length TARGET $32;
18325 +    Target=name;
18326 +    keep target level;
18327 +  run;
18329 +  %if &multipleTar eq Y %then %do;
18330 +    data temptargetused;
18331 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18332 +      keep node target;
18333 +    run;
18334 +    proc sort data=temptargetused; by target; run;
18335 +    proc sort data=temptarmeta; by target; run;
18336 +    data temptargetused;
18337 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18338 +      by target;
18339 +      if _a and _b;
18340 +    run;
18341 +  %end;
18342 +  %else %do;
18343 +    data temptargetused;
18344 +      set &EM_USER_OUTSTATS;
18345 +      length target $32 tarlevel $10;
18346 +      target="%EM_TARGET";
18347 +      tarlevel="%EM_TARGET_LEVEL";
18348 +      keep node target tarlevel;
18349 +    run;
18350 +    proc sort data=temptargetused nodupkey; by node; run;
18351 +  %end;
18353 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18354 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18355 +  proc sort data=temptargetused; by node; run;
18358 +  /* create tables for all interval targets as well as all class targets */
18359 +  data tempinterval tempclass;
18360 +    merge tempoutstats temptargetused( rename=(target=targetused));
18361 +    by node;
18362 +    %if "&multipleTar" eq "Y" %then %do;
18363 +      if ((missing(Target)) OR (target=targetused ));
18364 +    %end;
18366 +    if tarlevel="INTERVAL" then output tempinterval;
18367 +    else output tempclass;
18368 +  run;
18370 +  /* iniitalize intTarget and classTarget flags */
18371 +  %let em_intNobs =0;
18372 +  %let em_classNobs = 0;
18373 +  %let em_intTarget= N;
18374 +  %let em_classTarget= N;
18376 +  proc sql;
18377 +    reset noprint;
18378 +    select count(*) into :em_intNobs from tempinterval;
18379 +  quit;
18380 +  proc sql;
18381 +    reset noprint;
18382 +    select count(*) into :em_classNobs from tempclass;
18383 +  quit;
18385 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18386 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18388 +  /* retrieve all information for interval targets */
18389 +  %if &em_intTarget eq Y %then %do;
18391 +    /* determine if leaf variable exists */
18392 +    %let dsid=%sysfunc(open(tempinterval,i));
18393 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18394 +    %let rc=%sysfunc(close(&dsid));
18396 +    proc transpose data=tempinterval
18397 +      %if &leafexists %then %do;
18398 +        (drop=leaf)
18399 +      %end;
18400 +      %if &validexist %then %do;
18401 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18402 +      %end;
18403 +      %else %do;
18404 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18405 +      %end;
18406 +      by node;
18407 +      id statname;
18408 +    run;
18409 +    data tempinterval;
18410 +      set tempinterval;
18411 +      if missing(N) then delete;
18412 +    run;
18413 +  %end;
18415 +  /* retrieve all information for class targets */
18416 +  %if &em_classTarget eq Y %then %do;
18417 +    proc sort data=tempclass; by node category; run;
18418 +    %if &validflag eq N %then %do;
18419 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18420 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18421 +    %end;
18422 +    %else %do;
18423 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18424 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18425 +    %end;
18426 +      set tempclass;
18428 +      %if &validflag eq N %then %do;
18429 +        %if "&adjusted" eq "N" %then %do;
18430 +          if statname="N" then output tempn;
18431 +        %end;
18432 +        %else %do;
18433 +          if statname="NPRIORS" then output tempn;
18434 +        %end;
18435 +        else if statname="PREDICTION" then output temppredict;
18436 +        else if statname="PROBABILITY" then output tempprob;
18437 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18438 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18439 +      %end;
18440 +      %else %do;
18441 +        %if "&adjusted" eq "N" %then %do;
18442 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18443 +        %end;
18444 +        %else %do;
18445 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18446 +        %end;
18447 +        else if statname="PREDICTION" then output temppredict;
18448 +        else if statname="PROBABILITY" then output tempprob;
18449 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18450 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18451 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18452 +      %end;
18453 +    run;
18456 +    /* determine if profit/loss exists in tempprofit */
18457 +    %let em_profitflag=0;
18458 +    %let em_lossflag=0;
18459 +    proc sql;
18460 +      reset noprint;
18461 +      select count(*) into :em_profitflag from tempprofit;
18462 +    quit;
18463 +    proc sql;
18464 +      reset noprint;
18465 +      select count(*) into :em_lossflag from temploss;
18466 +    quit;
18468 +    %if &validFlag eq Y %then %do;
18469 +      proc transpose data=tempn
18470 +        %if "&adjusted" eq "N" %then %do;
18471 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18472 +        %end;
18473 +        %else %do;
18474 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18475 +        %end;
18476 +        by node;
18477 +        id statname;
18478 +      run;
18479 +      %if &em_profitflag ne 0 %then %do;
18480 +        proc transpose data=tempprofit out=tempprofit;
18481 +          by node category;
18482 +          id statname ;
18483 +        run;
18484 +      %end;
18485 +      %if &em_lossflag ne 0 %then %do;
18486 +        proc transpose data=temploss out=temploss;
18487 +          by node category;
18488 +          id statname ;
18489 +        run;
18490 +      %end;
18491 +      data tempprob;
18492 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18493 +        by node
18494 +        %if &multipleTar eq Y %then %do;
18495 +          target
18496 +        %end;
18497 +        category;
18498 +      run;
18499 +    %end;
18501 +    /* store percentcorrect value */
18502 +    data temppredict;
18503 +      merge tempprob temppredict(in=_a);
18504 +      by node category;
18505 +      if _a then do;
18506 +        percentCorrect = statvalue;
18507 +        %if &validFlag eq Y %then %do;
18508 +          vpercentCorrect= vstatvalue;
18509 +        %end;
18510 +      end;
18511 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18512 +      %if &validFlag eq Y %then %do;
18513 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18514 +      %end;
18515 +      ;
18516 +      if missing(percentCorrect) then delete;
18517 +      drop target;
18518 +    run;
18520 +    /* build profittext */
18521 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18522 +      data tempprofittext(keep= node profittext profitloss);
18523 +        length profittext $800 profitloss 8.;
18524 +        retain profittext profitloss;
18526 +        merge tempprob
18527 +        %if &em_profitflag ne 0 %then %do;
18528 +          tempprofit
18529 +        %end;
18530 +        %else %if &em_lossflag ne 0 %then %do;
18531 +          temploss
18532 +        %end;
18533 +        ;
18534 +        by node category;
18536 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18537 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18538 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18539 +          %let profittype = ALL;
18540 +        %end;
18542 +        /* create the profitloss variable for nodecolor if selected */
18543 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18545 +        %if "&profittype" eq "ALL" %then %do;
18546 +          if strip(CATEGORY)="&targetEvent" then do;
18547 +            profitloss=statvalue;
18548 +          end;
18549 +          if first.node then do;
18550 +            %if &validFlag eq N %then %do;
18551 +             %if &em_profitflag ne 0 %then %do;
18552 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18553 +             %end;
18554 +             %if &em_lossflag ne 0 %then %do;
18555 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18556 +             %end;
18557 +            %end;
18558 +            %else %do;
18559 +             %if &em_profitflag ne 0 %then %do;
18560 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18560!+;
18561 +             %end;
18562 +             %if &em_lossflag ne 0 %then %do;
18563 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18564 +             %end;
18565 +            %end;
18566 +          end;
18567 +          else if last.node then do;
18568 +            %if &validFlag eq N %then %do;
18569 +             %if &em_profitflag ne 0 %then %do;
18570 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18571 +             %end;
18572 +             %if &em_lossflag ne 0 %then %do;
18573 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18574 +             %end;
18575 +             /*if CATEGORY="&targetEvent" then do;
18576 +               profitloss=statvalue;
18577 +             end;*/
18578 +            %end;
18579 +            %else %do;
18580 +             %if &em_profitflag ne 0 %then %do;
18581 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18581!+14.&EM_PROPERTY_SPLITPRECISION);
18582 +                if CATEGORY="&targetEvent" then do;
18583 +                 profitloss=ALTERNATIVE_PROFIT;
18584 +                end;
18585 +             %end;
18586 +             %if &em_lossflag ne 0 %then %do;
18587 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18587!+14.&EM_PROPERTY_SPLITPRECISION);
18588 +                if CATEGORY="&targetEvent" then do;
18589 +                  profitloss=ALTERNATIVE_LOSS;
18590 +                end;
18591 +             %end;
18592 +            %end;
18593 +            output;
18594 +          end;
18595 +          else do;
18596 +            %if &validFlag eq N %then %do;
18597 +             %if &em_profitflag ne 0 %then %do;
18598 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18599 +             %end;
18600 +             %if &em_lossflag ne 0 %then %do;
18601 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18602 +             %end;
18603 +            %end;
18604 +            %else %do;
18605 +             %if &em_profitflag ne 0 %then %do;
18606 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18606!+14.&EM_PROPERTY_SPLITPRECISION);
18607 +             %end;
18608 +             %if &em_lossflag ne 0 %then %do;
18609 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18609!+14.&EM_PROPERTY_SPLITPRECISION);
18610 +             %end;
18611 +            %end;
18612 +          end;
18613 +        %end;
18614 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18615 +          if strip(CATEGORY) = "&targetevent" then do;
18616 +            %if &validFlag eq N %then %do;
18617 +             %if &em_profitflag ne 0 %then %do;
18618 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18619 +             %end;
18620 +             %if &em_lossflag ne 0 %then %do;
18621 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18622 +             %end;
18623 +             profitloss=statvalue;
18624 +            %end;
18625 +            %else %do;
18626 +             %if &em_profitflag ne 0 %then %do;
18627 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18627!+;
18628 +                profitloss=ALTERNATIVE_PROFIT;
18629 +             %end;
18630 +             %if &em_lossflag ne 0 %then %do;
18631 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18632 +                profitloss=ALTERNATIVE_LOSS;
18633 +             %end;
18634 +            %end;
18635 +            output;
18636 +          end;
18637 +        %end;
18638 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18639 +          if strip(CATEGORY) = "&targetevent" then do;
18640 +            %if &validFlag eq N %then %do;
18641 +             profitloss=statvalue;
18642 +            %end;
18643 +            %else %do;
18644 +             %if &em_profitflag ne 0 %then %do;
18645 +                profitloss=ALTERNATIVE_PROFIT;
18646 +             %end;
18647 +             %if &em_lossflag ne 0 %then %do;
18648 +                profitloss=ALTERNATIVE_LOSS;
18649 +             %end;
18650 +            %end;
18651 +            output;
18652 +          end;
18653 +        %end;
18654 +      run;
18655 +    %end;
18657 +    data tempprob(keep= node probtext);
18658 +      length probtext $800;
18659 +      retain probtext;
18660 +      set tempprob ;
18661 +      by node;
18663 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18664 +      %let probtype = &EM_PROPERTY_TARGET;
18665 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18666 +        %let probtype = ALL;
18667 +      %end;
18669 +      %if "&probtype" eq "ALL" %then %do;
18670 +        if first.node then do;
18671 +          %if &validFlag eq N %then %do;
18672 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18673 +          %end;
18674 +          %else %do;
18675 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18676 +          %end;
18677 +        end;
18678 +        else if last.node then do;
18679 +          %if &validFlag eq N %then %do;
18680 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18681 +          %end;
18682 +          %else %do;
18683 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18684 +          %end;
18685 +          output;
18686 +        end;
18687 +        else do;
18688 +          %if &validFlag eq N %then %do;
18689 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18690 +          %end;
18691 +          %else %do;
18692 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18693 +          %end;
18694 +        end;
18695 +      %end;
18696 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18697 +        if strip(CATEGORY) = "&targetevent" then do;
18698 +          %if &validFlag eq N %then %do;
18699 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18700 +          %end;
18701 +          %else %do;
18702 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18703 +          %end;
18704 +          output;
18705 +        end;
18706 +      %end;
18707 +      %else %if "&probtype" eq "NONE" %then %do;
18708 +        if last.node then do;
18709 +          output;
18710 +        end;
18711 +      %end;
18712 +    run;
18713 +  %end;
18715 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18717 +  %let oldexists=0;
18718 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18719 +     data old_tree_plot;
18720 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18721 +        rename nodecolor=oldnodecolor;
18722 +     run;
18724 +     proc sort data=old_tree_plot;
18725 +        by node;
18726 +     run;
18728 +     %let oldexists=1;
18729 +  %end;
18731 +  data &EM_USER_TREE_PLOT;
18732 +    length textall $800;
18733 +    merge tempoutnodes temptargetused
18735 +    %if &em_intTarget eq Y %then %do;
18736 +      tempinterval
18737 +    %end;
18739 +    %if &em_classTarget eq Y %then %do;
18741 +      %if &validFlag eq N %then %do;
18742 +        tempn(rename=(statvalue=N))
18743 +      %end;
18744 +      %else %do;
18745 +        tempn
18746 +      %end;
18748 +      temppredict tempprob
18750 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18751 +        tempprofittext
18752 +      %end;
18753 +    %end;
18754 +    ;
18755 +    by node;
18757 +    /* build nodetext based on user selection */
18758 +    textall="";
18760 +    %if &em_intTarget eq Y %then %do;
18761 +    if tarlevel="INTERVAL" then do;
18762 +      /* Nodeid */
18763 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18764 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18765 +      %end;
18767 +      /* Target identifier if multiple targets are used */
18768 +      %if "&multipleTar" eq "Y" %then %do;
18769 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18770 +      %end;
18772 +      %if &validFlag eq Y %then %do;
18773 +         /* Column labels displayed in validflag eq Y only */
18774 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18775 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18775!+noquote ))";
18776 +         %end;
18778 +         /* Average values */
18779 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18780 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18781 +         %end;
18783 +         /* RASE */
18784 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18785 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18786 +         %end;
18788 +         /* Count */
18789 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18790 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18791 +         %end;
18792 +      %end;
18793 +      %else %do;
18794 +         /* Average values */
18795 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18796 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18797 +         %end;
18799 +         /* RASE */
18800 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18801 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18802 +         %end;
18804 +         /* Count */
18805 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18806 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18807 +         %end;
18808 +      %end;
18810 +      /* nodecolor */
18811 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18812 +        nodecolor=PREDICTION;
18813 +      %end;
18814 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18815 +        nodecolor=RASE;
18816 +      %end;
18817 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18818 +        nodecolor=1;
18819 +      %end;
18821 +    end;
18822 +    %end;
18823 +    %if &em_classTarget eq Y %then %do;
18824 +    if tarlevel^="INTERVAL" then  do;
18826 +      /* Nodeid */
18827 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18828 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18829 +      %end;
18830 +      /* Target identifier if multiple targets are used */
18831 +      %if "&multipleTar" eq "Y" %then %do;
18832 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18833 +      %end;
18835 +      /* Predicted values */
18836 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18837 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18838 +      %end;
18840 +      /* Column labels displayed in validflag eq Y only */
18841 +      %if "&ValidFlag" eq "Y" %then %do;
18842 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18843 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18843!+noquote ))";
18844 +        %end;
18845 +      %end;
18847 +      /* Target Values */
18848 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18849 +        textall=strip(textall)||"0A"x||strip(probtext);
18850 +      %end;
18852 +      /* include profit or loss for all target levels */
18853 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18854 +        textall=strip(textall)||"0A"x||strip(profittext);
18855 +      %end;
18857 +      %if &validFlag eq N %then %do;
18858 +        /* Percent Correct */
18859 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18860 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18861 +        %end;
18863 +         /* Count */
18864 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18865 +          %if "&adjusted" eq "N" %then %do;
18866 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18867 +          %end;
18868 +          %else %do;
18869 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18870 +          %end;
18871 +         %end;
18872 +      %end;
18873 +      %else %do;
18874 +        /* Percent Correct */
18875 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18876 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18877 +        %end;
18879 +         /* Count */
18880 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18881 +          %if "&adjusted" eq "N" %then %do;
18882 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18883 +          %end;
18884 +          %else %do;
18885 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18886 +          %end;
18887 +         %end;
18888 +      %end;
18890 +      /* nodecolor */
18891 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18892 +       %if &multipleTar ne Y %then %do;
18893 +        nodecolor=&predTarget;
18894 +       %end;
18895 +       %else %do;
18896 +         nodecolor=percentcorrect;
18897 +       %end;
18898 +      %end;
18899 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18900 +        nodecolor=percentcorrect;
18901 +      %end;
18902 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18903 +        nodecolor=1;
18904 +      %end;
18905 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18906 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18907 +          nodecolor=percentcorrect;
18908 +        %end;
18909 +        %else %do;
18910 +          nodecolor=profitloss;
18911 +        %end;
18912 +      %end;
18914 +    end;
18915 +    %end;
18916 +    %if &em_intTarget eq Y %then %do;
18917 +     drop  PREDICTION  TARGET TARLEVEL
18918 +     %if &ValidFlag eq Y %then %do;
18919 +         VPREDICTION
18920 +     %end;
18921 +     ;
18922 +    %end;
18923 +    %if &em_classTarget eq Y %then %do;
18924 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18925 +     %if &ValidFlag eq Y %then %do;
18926 +         VSTATVALUE
18927 +     %end;
18928 +     ;
18929 +    %end;
18931 +  run;
18933 +  /* add leaf index information to plotds - based on primary target only*/
18934 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18935 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18936 +      set &EM_USER_OUTSTATS;
18937 +      if ((statname="PROBABILITY"
18938 +      %if &validexist %then %do;
18939 +       or statname="VALID: PROBABILITY"
18940 +      %end;
18941 +      ) AND (CATEGORY="&TARGETEVENT")
18942 +      %if "&multipleTar" eq "Y" %then %do;
18943 +        AND (Target="%EM_TARGET")
18944 +      %end;
18945 +      );
18946 +    run;
18948 +    %if &validexist %then %do;
18949 +      proc sort data=tempprob; by node; run;
18950 +      %let vpredTarget = V%substr(&predTarget, 2);
18951 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18952 +         by node;
18953 +         id statname;
18954 +      run;
18955 +    %end;
18956 +  %end;
18957 +  %else %do;
18958 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18959 +      set &EM_USER_OUTSTATS;
18960 +      if ((statname="PREDICTION"
18961 +      %if &validexist %then %do;
18962 +       or statname="VALID: PREDICTION"
18963 +      %end;
18964 +      )
18965 +      %if "&multipleTar" eq "Y" %then %do;
18966 +        AND (Target="%EM_TARGET")
18967 +      %end;
18968 +      );
18969 +    run;
18970 +    %if &validexist %then %do;
18971 +      proc sort data=tempprob; by node; run;
18972 +      %let vpredTarget = V%substr(&predTarget, 2);
18973 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18974 +         by node;
18975 +         id statname;
18976 +      run;
18977 +    %end;
18978 +  %end;
18980 +  proc sort data=tempprob; by node; run;
18981 +  data tempoutnodes;
18982 +    merge tempoutnodes tempprob;
18983 +    by node;
18984 +  run;
18986 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18987 +  data tempnodes;
18988 +    retain traintotal validtotal;
18989 +    set tempnodes(where=(leaf ne . ));
18990 +    tprob=round(&predTarget, .01);
18991 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18992 +      percevent_train=round(tprob*100, .01);
18993 +    %end;
18994 +    %else %do;
18995 +      percevent_train=tprob;
18996 +    %end;
18998 +    perc_train=round((n/traintotal)*100, 0.01);
18999 +    /* leafwidth already has a *10 multiplier */
19000 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19002 +    %if &validexist %then %do;
19003 +      %let vpredTarget = V%substr(&predTarget,2);
19004 +      vprob=round(&vpredTarget, .01);
19005 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19006 +        percevent_valid=round(vprob*100, .01);
19007 +      %end;
19008 +      %else %do;
19009 +        percevent_valid=vprob;
19010 +      %end;
19011 +      perc_valid=round((vn/validtotal)*100, .01);
19012 +    %end;
19014 +    index=_N_;
19015 +    keep node index tprob perc_train percevent_train
19016 +    %if &validexist %then %do;
19017 +        vprob percevent_valid perc_valid
19018 +    %end;
19019 +    ;
19020 +  run;
19021 +  proc sort data=tempnodes; by node; run;
19022 +  data &EM_USER_TREE_PLOT;
19023 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19024 +    by node;
19025 +    if missing(node) then delete;
19026 +    %if &oldexists %then %do;
19027 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19028 +      drop oldnodecolor;
19029 +    %end;
19030 +    abovetext = compbl(abovetext);
19032 +    /* add variable labels */
19033 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19034 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19035 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19036 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19037 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19038 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19040 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19041 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19042 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19043 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19044 +          %end;
19045 +          %else %do;
19046 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19047 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19048 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19049 +          %end;
19050 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19052 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19053 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19054 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19055 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19056 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19057 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19058 +          %end;
19059 +          %else %do;
19060 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19061 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19062 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19063 +          %end;
19064 +    ;
19065 +  run;
19067 +  /* delete temporary tables */
19068 +  proc datasets lib=work nolist;
19069 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19070 +  run;
19072 +%mend em_tree_makePlotDs;
19076 +%macro em_tree_report;
19078 +   /* report properties */
19079 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19080 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19081 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19082 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19083 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19084 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19085 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19086 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19087 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19088 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19089 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19090 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19091 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19093 +   %let validexist=0;
19094 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19095 +     %let validexist=1;
19096 +   %end;
19098 +   /* determine if multiple targets will be processed */
19099 +   %let em_tree_multipleTargets=N;
19100 +   %let em_tree_numTarget=1;
19101 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19102 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19103 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19104 +         %let em_tree_multipleTargets=N;
19105 +      %end;
19106 +      %else %do;
19107 +        data _null_;
19108 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19109 +          if eof then
19110 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19111 +        run;
19113 +        %if &em_tree_numTarget gt 1 %then %do;
19114 +           %let em_tree_multipleTargets=Y;
19115 +        %end;
19116 +     %end;
19117 +   %end;
19119 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19121 +   /* variable importance */
19122 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19123 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19125 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19126 +     /* and the columns may not be generated                                                                                 */
19127 +     %let em_tree_cvexists=;
19128 +     %let em_tree_surrexists=.;
19129 +     data _null_;
19130 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19131 +       if eof then do ;
19132 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19133 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19134 +       end;
19135 +     run;
19137 +     data &EM_USER_OUTIMPORT;
19138 +         set &EM_USER_OUTIMPORT;
19139 +         /* format columns based on Precison value specified */
19140 +         format importance 15.&EM_PROPERTY_PRECISION
19141 +              %if &validexist %then %do;
19142 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19143 +              %end;
19144 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19145 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19146 +              %end;
19147 +         ;
19148 +     run;
19150 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19151 +     proc print data=&EM_USER_OUTIMPORT
19152 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19153 +          (where=((nrules>0) OR (nsurrogates>0)))
19154 +        %end;
19155 +        %else %do;
19156 +           (where=(nrules>0))
19157 +        %end;
19158 +        label noobs
19159 +        ;
19160 +     run;
19161 +     title10;
19163 +   %end;
19165 +   /* Sequence */
19166 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19167 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19168 +   data _null_ ;
19169 +      set &EM_USER_outseq (obs=2) end=eof ;
19170 +      if eof then do ;
19171 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19172 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19173 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19174 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19175 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19176 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19177 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19178 +      end;
19179 +    run;
19181 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19182 +      data &EM_USER_OUTSEQ;
19183 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19184 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19185 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19186 +           _XMISC_=_VMISC_
19187 +        %end;
19188 +        %if "&em_tree_aprof" ne "."  %then %do;
19189 +           _XAPROF_=_VAPROF_
19190 +           _XPROF_ = _VPROF_
19191 +        %end;
19192 +        %if "&em_tree_aloss" ne "."  %then %do;
19193 +           _XALOSS_=_VALOSS_
19194 +        %end;
19195 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19196 +           _XPASE_ = _VPASE_
19197 +           _XPMISC_ = _VPMISC_
19198 +        %end;
19200 +        ));
19201 +     %end;
19202 +     %else %do;
19203 +        set &EM_USER_OUTSEQ;
19204 +     %end;
19206 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19207 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19208 +            _MISC_   15.&EM_PROPERTY_PRECISION
19209 +         %end;
19210 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19211 +            _PASE_  15.&EM_PROPERTY_PRECISION
19212 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19213 +         %end;
19214 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19215 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19216 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19217 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19218 +            %end;
19219 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19220 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19221 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19222 +            %end;
19223 +         %end;
19224 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19225 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19226 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19227 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19228 +            %end;
19229 +         %end;
19230 +         %if "&em_tree_seq" ne "." %then %do;
19231 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19232 +         %end;
19233 +         %if "&em_tree_vseq" ne "." %then %do;
19234 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19235 +         %end;
19236 +         %if "&em_tree_aprof" ne "." %then %do;
19237 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19238 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19239 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19240 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19241 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19242 +           %end;
19243 +         %end;
19244 +         %else %if "&em_tree_aloss" ne "." %then %do;
19245 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19246 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19247 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19248 +           %end;
19249 +         %end;
19250 +      ;
19251 +    run;
19252 +   %end;
19254 +   /* Observation Based Importance */
19255 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19257 +      /* need to check for 0 obs */
19258 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19259 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19260 +      %let rc=%sysfunc(close(&dsid));
19262 +      %if &onobs %then %do;
19263 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19264 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19266 +         data &EM_USER_OUTOBSIMP;
19267 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19268 +           if _a;
19269 +           by _INPUT1_;
19270 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19271 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19272 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19273 +                   %end;
19274 +                   ;
19275 +         run;
19276 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19277 +      %end;
19278 +   %end;
19280 +  %end;
19282 +  /* create dataset to support tree diagram and icicle plot */
19283 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19284 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19286 +  /* display tree diagram */
19287 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19288 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19290 +  /* display icicle diagram */
19291 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19292 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19294 +  /* Leaf Statistics Plot */
19295 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19297 +  /* print leaf information to output window */
19298 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19300 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19301 +       by descending N;
19302 +     run;
19304 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19305 +     %local vn;
19306 +     data _null_;
19307 +       set t (obs=2) end=eof;
19308 +       if eof then do;
19309 +         call symput("vn", strip(put(vn, best.)));
19310 +       end;
19311 +     run;
19313 +     data t;
19314 +       set t;
19315 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19316 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19317 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19318 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19319 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19320 +       %end;
19321 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19322 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19323 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19324 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19325 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19326 +          %end;
19327 +       %end;
19328 +       ;
19329 +     run;
19331 +     /* determine if rase is found in t */
19332 +    %let dsid=%sysfunc(open(t,i));
19333 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19334 +    %let rc=%sysfunc(close(&dsid));
19336 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19337 +     proc print data=t noobs label;
19338 +       where tprob ne .;
19339 +       var node depth N tprob
19340 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19341 +         %if "&vn" ne "." %then %do;
19342 +           VN
19343 +         %end;
19344 +         vprob
19345 +       %end;
19346 +       %if &raseexists %then %do;
19347 +            RASE
19348 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19349 +              VRASE
19350 +            %end;
19351 +       %end;
19352 +       ;
19353 +     run;
19354 +     title10;
19355 +  %end;
19357 +  /* create plots that are done during training of node */
19358 +  /* display iterative plot, including reference line */
19359 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19360 +   /* %if &nleaves eq  %then %do; */
19361 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19362 +      data _null_;
19363 +        set &EM_USER_OUTTOPOLOGY end=eof;
19364 +        if eof then do;
19365 +          call symput('nleaves', LEAF);
19366 +        end;
19367 +      run;
19368 +   /* %end; */
19370 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19371 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19372 +  %end;
19374 +  /* display leaf statistics */
19375 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19377 +  /* stats by node if multiple targets = Y */
19378 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19379 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19380 +    data &EM_USER_OUTSTATS;
19381 +      set &EM_USER_OUTSTATS;
19383 +     * if STATNAME="TARGET" then delete;
19384 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19385 +      drop leaf;
19386 +    run;
19387 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19389 +  %end;
19390 +  %else %do;
19391 +    /* add outstats and outdescribe to spk but not results */
19392 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19393 +  %end;
19395 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set EMWS6.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 32 observations read from the data set EMWS6.TREE_OUTSEQ.
NOTE: The data set EMWS6.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 20 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 370 observations read from the data set EMWS6.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS6.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 189 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 162 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 189 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 54 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 27 observations read from the data set WORK.TEMPN.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS6.TREE_TREE_PLOT has 27 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
      


NOTE: There were 189 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set EMWS6.TREE_TREE_PLOT.
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS6.TREE_TREE_PLOT has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27 observations read from the data set EMWS6.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 27 observations read from the data set EMWS6.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

19396  
19397  *------------------------------------------------------------*;
19398  * End REPORT: Tree;
19399  *------------------------------------------------------------*;

19400  /* Reset EM Options */
19401  options formchar="|----|+|---+=|-/\<>*";
19402  options nocenter ls=256 ps=10000;
19403  goptions reset=all device=GIF NODISPLAY;

19404  proc sort data=WORK.EM_USER_REPORT;
19405  by ID VIEW;
19406  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19407  proc sort data=EMWS6.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19408  by NAME;
19409  run;

NOTE: There were 14 observations read from the data set EMWS6.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19410  proc sort data=EMWS6.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19411  by NAME;
19412  run;

NOTE: There were 14 observations read from the data set EMWS6.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19413  data WORK.ASSESS_META;
19414  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19415  by NAME;
19416  run;

NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19417  data EM_temp_assessMeta;
19418  set EMWS6.Tree_CMeta_TRAIN;
19419  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19420  run;

NOTE: There were 12 observations read from the data set EMWS6.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19421  data EM_temp_assessdata;
19422  set EMWS6.Tree_TRAIN(keep=
19423  F_TargetBuy
19424  I_TargetBuy
19425  P_TargetBuy0
19426  P_TargetBuy1
19427  Q_TargetBuy0
19428  Q_TargetBuy1
19429  R_TargetBuy0
19430  R_TargetBuy1
19431  U_TargetBuy
19432  V_TargetBuy0
19433  V_TargetBuy1
19434  _WARN_
19435  TargetBuy
19436  );
19437  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
NOTE: There were 14445 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS6.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
















23722   data EM_temp_assessMeta;
23723   set EMWS6.Tree_CMeta_TRAIN;
23724   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23725   run;

NOTE: There were 12 observations read from the data set EMWS6.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23726   data EM_temp_assessdata;
23727   set EMWS6.Tree_VALIDATE(keep=
23728   F_TargetBuy
23729   I_TargetBuy
23730   P_TargetBuy0
23731   P_TargetBuy1
23732   Q_TargetBuy0
23733   Q_TargetBuy1
23734   R_TargetBuy0
23735   R_TargetBuy1
23736   U_TargetBuy
23737   V_TargetBuy0
23738   V_TargetBuy1
23739   _WARN_
23740   TargetBuy
23741   );
23742   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS6.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 7778 observations read from the data set EMWS6.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS6.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
















28036   %let _cn = %sysfunc(getoption(CENTER));
28037   options nocenter;
28038   proc print data=EMWS6.Tree_EMREPORTFIT noobs label;
28039   var STAT LABEL TRAIN
28040   VALIDATE
28041   ;
28042   by TARGET TARGETLABEL;
28043   title9 ' ';
28044   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28045   run;

NOTE: There were 8 observations read from the data set EMWS6.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28046   title10;
28047   options &_cn;

28048   proc sort data=EMWS6.Tree_EMCLASSIFICATION nothreads;
28049   by DATAROLE TARGET TARGETLABEL;
28050   run;

NOTE: There were 8 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS6.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

28051   %let _cn = %sysfunc(getoption(CENTER));
28052   options nocenter;
28053   proc print data=EMWS6.Tree_EMCLASSIFICATION noobs label;
28054   var from into pct_row pct_col count percent
28055   ;
28056   by DATAROLE TARGET TARGETLABEL;
28057   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28058   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28059   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28060   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28061   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28062   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28063   where _TYPE_='PREDICTION';
28064   title9 ' ';
28065   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28066   run;

NOTE: There were 8 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

28067   title9;
28068   title10;
28069   options &_cn;

28070   %let _cn = %sysfunc(getoption(CENTER));
28071   options nocenter;
28072   data EMWS6.Tree_EMEVENTREPORT;
28073   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28073 !  8;
28074   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28074 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28074 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28074 ! FALSEEVENT
28075   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28075 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28075 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28076      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28077   FALSEEVENT=0;
28078   FALSENEVENT=0;
28079   TRUEEVENT=0;
28080   TRUENEVENT=0;
28081   set EMWS6.Tree_EMEVENTREPORT;
28082   run;

NOTE: There were 2 observations read from the data set EMWS6.TREE_EMEVENTREPORT.
NOTE: The data set EMWS6.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

28083   proc print data=EMWS6.Tree_EMEVENTREPORT noobs label;
28084   title9 ' ';
28085   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28086   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28087   run;

NOTE: There were 2 observations read from the data set EMWS6.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

28088   title10;
28089   options &_cn;

28090   proc datasets library=EMWS6 nolist;
28091   modify Tree_EMRANK;
28092   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28093   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28094   run;

NOTE: MODIFY was successful for EMWS6.TREE_EMRANK.DATA.
28095   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

28096   %let _cn = %sysfunc(getoption(CENTER));
28097   options nocenter;
28098   proc print data=EMWS6.Tree_EMRANK label noobs;
28099   var
28100   decile gain lift liftc resp respc N _meanP_;
28101   by
28102   notsorted DATAROLE
28103   notsorted TARGET
28104   notsorted TARGETLABEL
28105   ;
28106   title9 ' ';
28107   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28108   run;

NOTE: There were 40 observations read from the data set EMWS6.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

28109   title10;
28110   options &_cn;

28111   proc datasets library=EMWS6 nolist;
28112   modify Tree_EMSCOREDIST;
28113   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28114   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28115   run;

NOTE: MODIFY was successful for EMWS6.TREE_EMSCOREDIST.DATA.
28116   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

