*------------------------------------------------------------*
* Report Log
Date:                December 08, 2017
Time:                02:14:58
*------------------------------------------------------------*
18337  data EMWS2.Tree_EMOUTFIT;
18338  set EMWS2.Tree_EMOUTFIT;
18339  length TargetLabel $200;
18340  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18341  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18342  run;

NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

18343  proc sort data=EMWS2.Tree_EMREPORTFIT nothreads;
18344  by TARGET;
18345  run;

NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The data set EMWS2.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18346  %let _EMwarndup = 0;
18347  %let _EMtargetdup =;
18348  %let _EMASEtargetdup =;
18349  data _null_;
18350  set EMWS2.Tree_EMOUTFIT;
18351  if .<_ASE_<0.000001 then do;
18352  call symput('_EMwarndup', '1');
18353  call symput('_EMtargetdup', target);
18354  call symput('_EMASEtargetdup', put(_ASE_, best.));
18355  end;
18356  run;

NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18357  %let EMEXCEPTIONSTRING=;
18358  *------------------------------------------------------------*;
18359  * REPORT: Tree;
18360  *------------------------------------------------------------*;
18361  %let EM_ACTION = REPORT;
18362  %let syscc = 0;
18363  %macro main;
18364  
18365    %if %upcase(&EM_ACTION) = CREATE %then %do;
18366      filename temp catalog 'sashelp.emmodl.tree_create.source';
18367      %include temp;
18368      filename temp;
18369  
18370      %em_tree_create;
18371    %end;
18372  
18373     %else
18374     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18375  
18376         filename temp catalog 'sashelp.emmodl.tree_train.source';
18377         %include temp;
18378         filename temp;
18379         %em_tree_train;
18380     %end;
18381  
18382    %else
18383    %if %upcase(&EM_ACTION) = SCORE %then %do;
18384      filename temp catalog 'sashelp.emmodl.tree_score.source';
18385      %include temp;
18386      filename temp;
18387  
18388      %em_tree_score;
18389  
18390    %end;
18391  
18392    %else
18393    %if %upcase(&EM_ACTION) = REPORT %then %do;
18394  
18395         filename temp catalog 'sashelp.emmodl.tree_report.source';
18396         %include temp;
18397         filename temp;
18398  
18399         %em_tree_report;
18400     %end;
18401  
18402    %else
18403    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18404  
18405         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18406         %include temp;
18407         filename temp;
18408         %EM_TREE_OPENTREEVIEWER;
18409  
18410     %end;
18411  
18412    %else
18413    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18414  
18415         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18416         %include temp;
18417         filename temp;
18418         %EM_TREE_CLOSETREEVIEWER;
18419  
18420     %end;
18421  
18422  
18423     %doendm:
18424  %mend main;
18425  
18426  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18428 +%macro em_tree_makePlotDs( multipleTar= );
18430 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18431 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18432 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18433 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18435 +  /* determine if validation statistics will be displayed */
18436 +  %let validflag=N;
18437 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18438 +    /* determine if validation data exists */
18439 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18440 +      %let validflag=Y;
18441 +    %end;
18442 +  %end;
18444 +   /* retrieve name of decmeta even in presence of multiple targets */
18445 +   %let decmeta = ;
18446 +   %if &EM_DEC_DECMETA eq %then %do;
18447 +     data _Target;
18448 +       set &em_data_variableset;
18449 +       where ROLE='TARGET' and USE in('D', 'Y');
18450 +       keep NAME;
18451 +     run;
18452 +     proc sort data=_Target;
18453 +       by NAME;
18454 +     run;
18455 +     proc sort data=EM_TARGETDECINFO;
18456 +       by TARGET;
18457 +     run;
18458 +     data _Target;
18459 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18460 +       by NAME;
18461 +       if _a then do;
18462 +         call symput('decmeta', trim(DECMETA));
18463 +       end;
18464 +     run;
18465 +     proc delete data=_Target;run;
18466 +   %end;
18467 +   %else %let decmeta = &EM_DEC_DECMETA;
18470 +  /* retrieve targetEvent from decmeta */
18471 +  %let targetEvent=;
18472 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18473 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18474 +      data _null_;
18475 +       set &DECMETA(where=(_TYPE_="TARGET"));
18476 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18477 +      run;
18478 +    %end;
18479 +  %end;
18481 +  /* retrieve predicted var for targetEvent from decmeta */
18482 +  %let predTarget=;
18483 +  %let predLvl=;
18484 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18485 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18486 +      data _null_;
18487 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18488 +       call symput('predTarget', strip(VARIABLE));
18489 +       call symput('predLvl', strip(LEVEL));
18490 +      run;
18491 +    %end;
18492 +  %end;
18493 +  %else %do;
18494 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18495 +      data _null_;
18496 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18497 +       call symput('predTarget', strip(VARIABLE));
18498 +      run;
18499 +    %end;
18500 +  %end;
18502 +  /* create BelowText value */
18503 +  data belowtext;
18504 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18505 +    keep node belowtext;
18506 +  run;
18508 +  /* relace belowtext with variable label if it exists */
18509 +  data belowtext2;
18510 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18511 +    keep node belowtextlbl;
18512 +  run;
18514 +  proc sort data=belowtext; by node; run;
18515 +  proc sort data=belowtext2; by node; run;
18517 +  data belowtext;
18518 +    merge belowtext belowtext2(in=_a);
18519 +    by node;
18520 +    if _a then belowtext=belowtextlbl;
18521 +    keep node belowtext;
18522 +  run;
18524 +  /* create AboveText value */
18525 +  data abovetext;
18526 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18527 +  run;
18528 +  proc sort data=abovetext; by node numeric_value; run;
18530 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18531 +  data abovetext;
18532 +    set abovetext(rename=(node=parent));
18533 +    by parent numeric_value;
18534 +    retain abovetext tempstring flag branch origval origchar ;
18535 +    length abovetext $256;
18536 +    length tempstring origchar $64;
18538 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18539 +      if first.parent then do;
18540 +        if missing(character_value) then do;
18541 +          numeric_value = round(numeric_value, &sp_precision);
18542 +          abovetext = "< "||strip(NUMERIC_VALUE);
18543 +          branch = 1;
18544 +          origval = numeric_value;
18545 +          output;
18546 +        end;
18547 +        else do;
18548 +          abovetext = "< "||strip(CHARACTER_VALUE);
18549 +          branch = 1;
18550 +          origchar = character_value;
18551 +          output;
18552 +        end;
18554 +        if first.parent AND last.parent then do;
18555 +          if missing(character_value) then do;
18556 +            numeric_value = round(numeric_value, &sp_precision);
18557 +            branch = branch + 1;
18558 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18559 +            output;
18560 +          end;
18561 +          else do;
18562 +            branch = branch + 1;
18563 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18564 +            output;
18565 +          end;
18566 +        end;
18567 +      end;
18568 +      else if last.parent then do;
18569 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18570 +          if missing(character_value) then do;
18571 +            numeric_value = round(numeric_value, &sp_precision);
18572 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18573 +          end;
18574 +          else do;
18575 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18576 +          end;
18577 +          branch = branch + 1;
18578 +          output;
18580 +          if missing(character_value) then do;
18581 +            numeric_value = round(numeric_value, &sp_precision);
18582 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18583 +          end;
18584 +          else do;
18585 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18586 +          end;
18587 +          branch = branch + 1;
18588 +          output;
18589 +        end;
18590 +        else do;
18591 +          if missing(character_value) then do;
18592 +            numeric_value = round(numeric_value, &sp_precision);
18593 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18594 +          end;
18595 +          else do;
18596 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18597 +          end;
18598 +          branch = branch + 1;
18599 +          output;
18600 +        end;
18601 +      end;
18602 +      else do;
18603 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18604 +          if missing(character_value) then do;
18605 +            numeric_value = round(numeric_value,&sp_precision);
18606 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18607 +            origval = numeric_value;
18608 +          end;
18609 +          else do;
18610 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18611 +            origchar = character_value;
18612 +          end;
18613 +          branch = branch + 1;
18614 +          output;
18616 +        end;
18617 +        else do;
18618 +          if missing(character_value) then do;
18619 +            numeric_value = round(numeric_value, &sp_precision);
18620 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18621 +            origval = numeric_value;
18622 +          end;
18623 +          else do;
18624 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18625 +            origval = character_value;
18626 +          end;
18627 +          branch = branch + 1;
18628 +          output;
18629 +        end;
18630 +      end;
18631 +    end;
18632 +    else do;
18633 +       if first.numeric_value then do;
18634 +         flag = 0;
18635 +         abovetext = strip(CHARACTER_VALUE);
18636 +         branch = numeric_value;
18637 +         if first.numeric_value AND last.numeric_value then do;
18638 +           output;
18639 +         end;
18640 +       end;
18641 +       else if last.numeric_value then do;
18642 +         if flag=0 then do;
18643 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18644 +           length = length(strip(tempstring));
18645 +           if length < 32 then do;
18646 +             abovetext = strip(tempstring);
18647 +           end;
18648 +           else do;
18649 +             abovetext = strip(abovetext)||", ...";
18650 +             flag = 1;
18651 +           end;
18652 +         end;
18653 +         branch = numeric_value;
18654 +         output;
18655 +       end;
18656 +       else do;
18657 +         if flag=0 then do;
18658 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18659 +           length = length(strip(tempstring));
18660 +           if length < 32 then do;
18661 +             abovetext = strip(tempstring);
18662 +           end;
18663 +           else do;
18664 +             abovetext = strip(abovetext)||", ...";
18665 +             flag=1;
18666 +           end;
18667 +         end;
18668 +         branch = numeric_value;
18669 +       end;
18670 +    end;
18671 +    keep parent branch abovetext;
18672 +  run;
18674 +  /* MIssing value to abovetext */
18675 +  data tempmissing;
18676 +    set &EM_USER_OUTRULES;
18677 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18678 +    rename node=parent numeric_value=branch character_value=misschar;
18679 +  run;
18682 +  proc sort data=abovetext; by parent branch; run;
18683 +  proc sort data=tempmissing; by parent branch; run;
18684 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18686 +  data tempoutnodes;
18687 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18688 +    by parent branch;
18689 +    length traintotal validtotal 8;
18690 +    retain traintotal validtotal;
18692 +    if _a then do;
18693 +      if ^MISSING(abovetext) then do;
18694 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18695 +      end;
18696 +      else do;
18697 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18698 +      end;
18699 +    end;
18700 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18702 +    if node=1 then do;
18703 +      traintotal = N;
18704 +      validtotal=VN;
18705 +    end;
18707 +    drop role rank stat misschar belowtext;
18708 +  run;
18709 +  proc sort data=tempoutnodes; by node; run;
18710 +  proc sort data=belowtext; by node; run;
18712 +  data tempoutnodes;
18713 +    merge tempoutnodes belowtext;
18714 +    by node;
18716 +  run;
18718 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18719 +  %let adjusted = N;
18720 +  %let npriors = 0;
18721 +  data _null_ ;
18722 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18723 +    if eof then do ;
18724 +      call symput("npriors" , strip(put(_N_,best.))) ;
18725 +    end;
18726 +  run;
18727 +  %if &npriors gt 0 %then %let adjusted=Y;
18730 +  /* create a table with targetUsed and targetLevel columns for each node */
18731 +  data temptarmeta;
18732 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18733 +    %if &multipleTar eq N %then %do;
18734 +      AND USE in ('D', 'Y')
18735 +    %end;
18736 +    ));
18737 +    length TARGET $32;
18738 +    Target=name;
18739 +    keep target level;
18740 +  run;
18742 +  %if &multipleTar eq Y %then %do;
18743 +    data temptargetused;
18744 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18745 +      keep node target;
18746 +    run;
18747 +    proc sort data=temptargetused; by target; run;
18748 +    proc sort data=temptarmeta; by target; run;
18749 +    data temptargetused;
18750 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18751 +      by target;
18752 +      if _a and _b;
18753 +    run;
18754 +  %end;
18755 +  %else %do;
18756 +    data temptargetused;
18757 +      set &EM_USER_OUTSTATS;
18758 +      length target $32 tarlevel $10;
18759 +      target="%EM_TARGET";
18760 +      tarlevel="%EM_TARGET_LEVEL";
18761 +      keep node target tarlevel;
18762 +    run;
18763 +    proc sort data=temptargetused nodupkey; by node; run;
18764 +  %end;
18766 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18767 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18768 +  proc sort data=temptargetused; by node; run;
18771 +  /* create tables for all interval targets as well as all class targets */
18772 +  data tempinterval tempclass;
18773 +    merge tempoutstats temptargetused( rename=(target=targetused));
18774 +    by node;
18775 +    %if "&multipleTar" eq "Y" %then %do;
18776 +      if ((missing(Target)) OR (target=targetused ));
18777 +    %end;
18779 +    if tarlevel="INTERVAL" then output tempinterval;
18780 +    else output tempclass;
18781 +  run;
18783 +  /* iniitalize intTarget and classTarget flags */
18784 +  %let em_intNobs =0;
18785 +  %let em_classNobs = 0;
18786 +  %let em_intTarget= N;
18787 +  %let em_classTarget= N;
18789 +  proc sql;
18790 +    reset noprint;
18791 +    select count(*) into :em_intNobs from tempinterval;
18792 +  quit;
18793 +  proc sql;
18794 +    reset noprint;
18795 +    select count(*) into :em_classNobs from tempclass;
18796 +  quit;
18798 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18799 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18801 +  /* retrieve all information for interval targets */
18802 +  %if &em_intTarget eq Y %then %do;
18804 +    /* determine if leaf variable exists */
18805 +    %let dsid=%sysfunc(open(tempinterval,i));
18806 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18807 +    %let rc=%sysfunc(close(&dsid));
18809 +    proc transpose data=tempinterval
18810 +      %if &leafexists %then %do;
18811 +        (drop=leaf)
18812 +      %end;
18813 +      %if &validexist %then %do;
18814 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18815 +      %end;
18816 +      %else %do;
18817 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18818 +      %end;
18819 +      by node;
18820 +      id statname;
18821 +    run;
18822 +    data tempinterval;
18823 +      set tempinterval;
18824 +      if missing(N) then delete;
18825 +    run;
18826 +  %end;
18828 +  /* retrieve all information for class targets */
18829 +  %if &em_classTarget eq Y %then %do;
18830 +    proc sort data=tempclass; by node category; run;
18831 +    %if &validflag eq N %then %do;
18832 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18833 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18834 +    %end;
18835 +    %else %do;
18836 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18837 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18838 +    %end;
18839 +      set tempclass;
18841 +      %if &validflag eq N %then %do;
18842 +        %if "&adjusted" eq "N" %then %do;
18843 +          if statname="N" then output tempn;
18844 +        %end;
18845 +        %else %do;
18846 +          if statname="NPRIORS" then output tempn;
18847 +        %end;
18848 +        else if statname="PREDICTION" then output temppredict;
18849 +        else if statname="PROBABILITY" then output tempprob;
18850 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18851 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18852 +      %end;
18853 +      %else %do;
18854 +        %if "&adjusted" eq "N" %then %do;
18855 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18856 +        %end;
18857 +        %else %do;
18858 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18859 +        %end;
18860 +        else if statname="PREDICTION" then output temppredict;
18861 +        else if statname="PROBABILITY" then output tempprob;
18862 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18863 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18864 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18865 +      %end;
18866 +    run;
18869 +    /* determine if profit/loss exists in tempprofit */
18870 +    %let em_profitflag=0;
18871 +    %let em_lossflag=0;
18872 +    proc sql;
18873 +      reset noprint;
18874 +      select count(*) into :em_profitflag from tempprofit;
18875 +    quit;
18876 +    proc sql;
18877 +      reset noprint;
18878 +      select count(*) into :em_lossflag from temploss;
18879 +    quit;
18881 +    %if &validFlag eq Y %then %do;
18882 +      proc transpose data=tempn
18883 +        %if "&adjusted" eq "N" %then %do;
18884 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18885 +        %end;
18886 +        %else %do;
18887 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18888 +        %end;
18889 +        by node;
18890 +        id statname;
18891 +      run;
18892 +      %if &em_profitflag ne 0 %then %do;
18893 +        proc transpose data=tempprofit out=tempprofit;
18894 +          by node category;
18895 +          id statname ;
18896 +        run;
18897 +      %end;
18898 +      %if &em_lossflag ne 0 %then %do;
18899 +        proc transpose data=temploss out=temploss;
18900 +          by node category;
18901 +          id statname ;
18902 +        run;
18903 +      %end;
18904 +      data tempprob;
18905 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18906 +        by node
18907 +        %if &multipleTar eq Y %then %do;
18908 +          target
18909 +        %end;
18910 +        category;
18911 +      run;
18912 +    %end;
18914 +    /* store percentcorrect value */
18915 +    data temppredict;
18916 +      merge tempprob temppredict(in=_a);
18917 +      by node category;
18918 +      if _a then do;
18919 +        percentCorrect = statvalue;
18920 +        %if &validFlag eq Y %then %do;
18921 +          vpercentCorrect= vstatvalue;
18922 +        %end;
18923 +      end;
18924 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18925 +      %if &validFlag eq Y %then %do;
18926 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18927 +      %end;
18928 +      ;
18929 +      if missing(percentCorrect) then delete;
18930 +      drop target;
18931 +    run;
18933 +    /* build profittext */
18934 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18935 +      data tempprofittext(keep= node profittext profitloss);
18936 +        length profittext $800 profitloss 8.;
18937 +        retain profittext profitloss;
18939 +        merge tempprob
18940 +        %if &em_profitflag ne 0 %then %do;
18941 +          tempprofit
18942 +        %end;
18943 +        %else %if &em_lossflag ne 0 %then %do;
18944 +          temploss
18945 +        %end;
18946 +        ;
18947 +        by node category;
18949 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18950 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18951 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18952 +          %let profittype = ALL;
18953 +        %end;
18955 +        /* create the profitloss variable for nodecolor if selected */
18956 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18958 +        %if "&profittype" eq "ALL" %then %do;
18959 +          if strip(CATEGORY)="&targetEvent" then do;
18960 +            profitloss=statvalue;
18961 +          end;
18962 +          if first.node then do;
18963 +            %if &validFlag eq N %then %do;
18964 +             %if &em_profitflag ne 0 %then %do;
18965 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18966 +             %end;
18967 +             %if &em_lossflag ne 0 %then %do;
18968 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18969 +             %end;
18970 +            %end;
18971 +            %else %do;
18972 +             %if &em_profitflag ne 0 %then %do;
18973 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18973!+;
18974 +             %end;
18975 +             %if &em_lossflag ne 0 %then %do;
18976 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18977 +             %end;
18978 +            %end;
18979 +          end;
18980 +          else if last.node then do;
18981 +            %if &validFlag eq N %then %do;
18982 +             %if &em_profitflag ne 0 %then %do;
18983 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18984 +             %end;
18985 +             %if &em_lossflag ne 0 %then %do;
18986 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18987 +             %end;
18988 +             /*if CATEGORY="&targetEvent" then do;
18989 +               profitloss=statvalue;
18990 +             end;*/
18991 +            %end;
18992 +            %else %do;
18993 +             %if &em_profitflag ne 0 %then %do;
18994 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18994!+14.&EM_PROPERTY_SPLITPRECISION);
18995 +                if CATEGORY="&targetEvent" then do;
18996 +                 profitloss=ALTERNATIVE_PROFIT;
18997 +                end;
18998 +             %end;
18999 +             %if &em_lossflag ne 0 %then %do;
19000 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19000!+14.&EM_PROPERTY_SPLITPRECISION);
19001 +                if CATEGORY="&targetEvent" then do;
19002 +                  profitloss=ALTERNATIVE_LOSS;
19003 +                end;
19004 +             %end;
19005 +            %end;
19006 +            output;
19007 +          end;
19008 +          else do;
19009 +            %if &validFlag eq N %then %do;
19010 +             %if &em_profitflag ne 0 %then %do;
19011 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19012 +             %end;
19013 +             %if &em_lossflag ne 0 %then %do;
19014 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19015 +             %end;
19016 +            %end;
19017 +            %else %do;
19018 +             %if &em_profitflag ne 0 %then %do;
19019 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19019!+14.&EM_PROPERTY_SPLITPRECISION);
19020 +             %end;
19021 +             %if &em_lossflag ne 0 %then %do;
19022 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19022!+14.&EM_PROPERTY_SPLITPRECISION);
19023 +             %end;
19024 +            %end;
19025 +          end;
19026 +        %end;
19027 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19028 +          if strip(CATEGORY) = "&targetevent" then do;
19029 +            %if &validFlag eq N %then %do;
19030 +             %if &em_profitflag ne 0 %then %do;
19031 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19032 +             %end;
19033 +             %if &em_lossflag ne 0 %then %do;
19034 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19035 +             %end;
19036 +             profitloss=statvalue;
19037 +            %end;
19038 +            %else %do;
19039 +             %if &em_profitflag ne 0 %then %do;
19040 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19040!+;
19041 +                profitloss=ALTERNATIVE_PROFIT;
19042 +             %end;
19043 +             %if &em_lossflag ne 0 %then %do;
19044 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19045 +                profitloss=ALTERNATIVE_LOSS;
19046 +             %end;
19047 +            %end;
19048 +            output;
19049 +          end;
19050 +        %end;
19051 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19052 +          if strip(CATEGORY) = "&targetevent" then do;
19053 +            %if &validFlag eq N %then %do;
19054 +             profitloss=statvalue;
19055 +            %end;
19056 +            %else %do;
19057 +             %if &em_profitflag ne 0 %then %do;
19058 +                profitloss=ALTERNATIVE_PROFIT;
19059 +             %end;
19060 +             %if &em_lossflag ne 0 %then %do;
19061 +                profitloss=ALTERNATIVE_LOSS;
19062 +             %end;
19063 +            %end;
19064 +            output;
19065 +          end;
19066 +        %end;
19067 +      run;
19068 +    %end;
19070 +    data tempprob(keep= node probtext);
19071 +      length probtext $800;
19072 +      retain probtext;
19073 +      set tempprob ;
19074 +      by node;
19076 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19077 +      %let probtype = &EM_PROPERTY_TARGET;
19078 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19079 +        %let probtype = ALL;
19080 +      %end;
19082 +      %if "&probtype" eq "ALL" %then %do;
19083 +        if first.node then do;
19084 +          %if &validFlag eq N %then %do;
19085 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19086 +          %end;
19087 +          %else %do;
19088 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19089 +          %end;
19090 +        end;
19091 +        else if last.node then do;
19092 +          %if &validFlag eq N %then %do;
19093 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19094 +          %end;
19095 +          %else %do;
19096 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19097 +          %end;
19098 +          output;
19099 +        end;
19100 +        else do;
19101 +          %if &validFlag eq N %then %do;
19102 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19103 +          %end;
19104 +          %else %do;
19105 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19106 +          %end;
19107 +        end;
19108 +      %end;
19109 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19110 +        if strip(CATEGORY) = "&targetevent" then do;
19111 +          %if &validFlag eq N %then %do;
19112 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19113 +          %end;
19114 +          %else %do;
19115 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19116 +          %end;
19117 +          output;
19118 +        end;
19119 +      %end;
19120 +      %else %if "&probtype" eq "NONE" %then %do;
19121 +        if last.node then do;
19122 +          output;
19123 +        end;
19124 +      %end;
19125 +    run;
19126 +  %end;
19128 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19130 +  %let oldexists=0;
19131 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19132 +     data old_tree_plot;
19133 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19134 +        rename nodecolor=oldnodecolor;
19135 +     run;
19137 +     proc sort data=old_tree_plot;
19138 +        by node;
19139 +     run;
19141 +     %let oldexists=1;
19142 +  %end;
19144 +  data &EM_USER_TREE_PLOT;
19145 +    length textall $800;
19146 +    merge tempoutnodes temptargetused
19148 +    %if &em_intTarget eq Y %then %do;
19149 +      tempinterval
19150 +    %end;
19152 +    %if &em_classTarget eq Y %then %do;
19154 +      %if &validFlag eq N %then %do;
19155 +        tempn(rename=(statvalue=N))
19156 +      %end;
19157 +      %else %do;
19158 +        tempn
19159 +      %end;
19161 +      temppredict tempprob
19163 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19164 +        tempprofittext
19165 +      %end;
19166 +    %end;
19167 +    ;
19168 +    by node;
19170 +    /* build nodetext based on user selection */
19171 +    textall="";
19173 +    %if &em_intTarget eq Y %then %do;
19174 +    if tarlevel="INTERVAL" then do;
19175 +      /* Nodeid */
19176 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19177 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19178 +      %end;
19180 +      /* Target identifier if multiple targets are used */
19181 +      %if "&multipleTar" eq "Y" %then %do;
19182 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19183 +      %end;
19185 +      %if &validFlag eq Y %then %do;
19186 +         /* Column labels displayed in validflag eq Y only */
19187 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19188 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19188!+noquote ))";
19189 +         %end;
19191 +         /* Average values */
19192 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19193 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19194 +         %end;
19196 +         /* RASE */
19197 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19198 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19199 +         %end;
19201 +         /* Count */
19202 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19203 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19204 +         %end;
19205 +      %end;
19206 +      %else %do;
19207 +         /* Average values */
19208 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19209 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19210 +         %end;
19212 +         /* RASE */
19213 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19214 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19215 +         %end;
19217 +         /* Count */
19218 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19219 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19220 +         %end;
19221 +      %end;
19223 +      /* nodecolor */
19224 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19225 +        nodecolor=PREDICTION;
19226 +      %end;
19227 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19228 +        nodecolor=RASE;
19229 +      %end;
19230 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19231 +        nodecolor=1;
19232 +      %end;
19234 +    end;
19235 +    %end;
19236 +    %if &em_classTarget eq Y %then %do;
19237 +    if tarlevel^="INTERVAL" then  do;
19239 +      /* Nodeid */
19240 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19241 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19242 +      %end;
19243 +      /* Target identifier if multiple targets are used */
19244 +      %if "&multipleTar" eq "Y" %then %do;
19245 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19246 +      %end;
19248 +      /* Predicted values */
19249 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19250 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19251 +      %end;
19253 +      /* Column labels displayed in validflag eq Y only */
19254 +      %if "&ValidFlag" eq "Y" %then %do;
19255 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19256 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19256!+noquote ))";
19257 +        %end;
19258 +      %end;
19260 +      /* Target Values */
19261 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19262 +        textall=strip(textall)||"0A"x||strip(probtext);
19263 +      %end;
19265 +      /* include profit or loss for all target levels */
19266 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19267 +        textall=strip(textall)||"0A"x||strip(profittext);
19268 +      %end;
19270 +      %if &validFlag eq N %then %do;
19271 +        /* Percent Correct */
19272 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19273 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19274 +        %end;
19276 +         /* Count */
19277 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19278 +          %if "&adjusted" eq "N" %then %do;
19279 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19280 +          %end;
19281 +          %else %do;
19282 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19283 +          %end;
19284 +         %end;
19285 +      %end;
19286 +      %else %do;
19287 +        /* Percent Correct */
19288 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19289 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19290 +        %end;
19292 +         /* Count */
19293 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19294 +          %if "&adjusted" eq "N" %then %do;
19295 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19296 +          %end;
19297 +          %else %do;
19298 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19299 +          %end;
19300 +         %end;
19301 +      %end;
19303 +      /* nodecolor */
19304 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19305 +       %if &multipleTar ne Y %then %do;
19306 +        nodecolor=&predTarget;
19307 +       %end;
19308 +       %else %do;
19309 +         nodecolor=percentcorrect;
19310 +       %end;
19311 +      %end;
19312 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19313 +        nodecolor=percentcorrect;
19314 +      %end;
19315 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19316 +        nodecolor=1;
19317 +      %end;
19318 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19319 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19320 +          nodecolor=percentcorrect;
19321 +        %end;
19322 +        %else %do;
19323 +          nodecolor=profitloss;
19324 +        %end;
19325 +      %end;
19327 +    end;
19328 +    %end;
19329 +    %if &em_intTarget eq Y %then %do;
19330 +     drop  PREDICTION  TARGET TARLEVEL
19331 +     %if &ValidFlag eq Y %then %do;
19332 +         VPREDICTION
19333 +     %end;
19334 +     ;
19335 +    %end;
19336 +    %if &em_classTarget eq Y %then %do;
19337 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19338 +     %if &ValidFlag eq Y %then %do;
19339 +         VSTATVALUE
19340 +     %end;
19341 +     ;
19342 +    %end;
19344 +  run;
19346 +  /* add leaf index information to plotds - based on primary target only*/
19347 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19348 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19349 +      set &EM_USER_OUTSTATS;
19350 +      if ((statname="PROBABILITY"
19351 +      %if &validexist %then %do;
19352 +       or statname="VALID: PROBABILITY"
19353 +      %end;
19354 +      ) AND (CATEGORY="&TARGETEVENT")
19355 +      %if "&multipleTar" eq "Y" %then %do;
19356 +        AND (Target="%EM_TARGET")
19357 +      %end;
19358 +      );
19359 +    run;
19361 +    %if &validexist %then %do;
19362 +      proc sort data=tempprob; by node; run;
19363 +      %let vpredTarget = V%substr(&predTarget, 2);
19364 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19365 +         by node;
19366 +         id statname;
19367 +      run;
19368 +    %end;
19369 +  %end;
19370 +  %else %do;
19371 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19372 +      set &EM_USER_OUTSTATS;
19373 +      if ((statname="PREDICTION"
19374 +      %if &validexist %then %do;
19375 +       or statname="VALID: PREDICTION"
19376 +      %end;
19377 +      )
19378 +      %if "&multipleTar" eq "Y" %then %do;
19379 +        AND (Target="%EM_TARGET")
19380 +      %end;
19381 +      );
19382 +    run;
19383 +    %if &validexist %then %do;
19384 +      proc sort data=tempprob; by node; run;
19385 +      %let vpredTarget = V%substr(&predTarget, 2);
19386 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19387 +         by node;
19388 +         id statname;
19389 +      run;
19390 +    %end;
19391 +  %end;
19393 +  proc sort data=tempprob; by node; run;
19394 +  data tempoutnodes;
19395 +    merge tempoutnodes tempprob;
19396 +    by node;
19397 +  run;
19399 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19400 +  data tempnodes;
19401 +    retain traintotal validtotal;
19402 +    set tempnodes(where=(leaf ne . ));
19403 +    tprob=round(&predTarget, .01);
19404 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19405 +      percevent_train=round(tprob*100, .01);
19406 +    %end;
19407 +    %else %do;
19408 +      percevent_train=tprob;
19409 +    %end;
19411 +    perc_train=round((n/traintotal)*100, 0.01);
19412 +    /* leafwidth already has a *10 multiplier */
19413 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19415 +    %if &validexist %then %do;
19416 +      %let vpredTarget = V%substr(&predTarget,2);
19417 +      vprob=round(&vpredTarget, .01);
19418 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19419 +        percevent_valid=round(vprob*100, .01);
19420 +      %end;
19421 +      %else %do;
19422 +        percevent_valid=vprob;
19423 +      %end;
19424 +      perc_valid=round((vn/validtotal)*100, .01);
19425 +    %end;
19427 +    index=_N_;
19428 +    keep node index tprob perc_train percevent_train
19429 +    %if &validexist %then %do;
19430 +        vprob percevent_valid perc_valid
19431 +    %end;
19432 +    ;
19433 +  run;
19434 +  proc sort data=tempnodes; by node; run;
19435 +  data &EM_USER_TREE_PLOT;
19436 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19437 +    by node;
19438 +    if missing(node) then delete;
19439 +    %if &oldexists %then %do;
19440 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19441 +      drop oldnodecolor;
19442 +    %end;
19443 +    abovetext = compbl(abovetext);
19445 +    /* add variable labels */
19446 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19447 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19448 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19449 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19450 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19451 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19453 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19454 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19455 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19456 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19457 +          %end;
19458 +          %else %do;
19459 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19460 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19461 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19462 +          %end;
19463 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19465 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19466 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19467 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19468 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19469 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19470 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19471 +          %end;
19472 +          %else %do;
19473 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19474 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19475 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19476 +          %end;
19477 +    ;
19478 +  run;
19480 +  /* delete temporary tables */
19481 +  proc datasets lib=work nolist;
19482 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19483 +  run;
19485 +%mend em_tree_makePlotDs;
19489 +%macro em_tree_report;
19491 +   /* report properties */
19492 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19493 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19494 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19495 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19496 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19497 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19498 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19499 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19500 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19501 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19502 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19503 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19504 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19506 +   %let validexist=0;
19507 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19508 +     %let validexist=1;
19509 +   %end;
19511 +   /* determine if multiple targets will be processed */
19512 +   %let em_tree_multipleTargets=N;
19513 +   %let em_tree_numTarget=1;
19514 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19515 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19516 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19517 +         %let em_tree_multipleTargets=N;
19518 +      %end;
19519 +      %else %do;
19520 +        data _null_;
19521 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19522 +          if eof then
19523 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19524 +        run;
19526 +        %if &em_tree_numTarget gt 1 %then %do;
19527 +           %let em_tree_multipleTargets=Y;
19528 +        %end;
19529 +     %end;
19530 +   %end;
19532 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19534 +   /* variable importance */
19535 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19536 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19538 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19539 +     /* and the columns may not be generated                                                                                 */
19540 +     %let em_tree_cvexists=;
19541 +     %let em_tree_surrexists=.;
19542 +     data _null_;
19543 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19544 +       if eof then do ;
19545 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19546 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19547 +       end;
19548 +     run;
19550 +     data &EM_USER_OUTIMPORT;
19551 +         set &EM_USER_OUTIMPORT;
19552 +         /* format columns based on Precison value specified */
19553 +         format importance 15.&EM_PROPERTY_PRECISION
19554 +              %if &validexist %then %do;
19555 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19556 +              %end;
19557 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19558 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19559 +              %end;
19560 +         ;
19561 +     run;
19563 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19564 +     proc print data=&EM_USER_OUTIMPORT
19565 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19566 +          (where=((nrules>0) OR (nsurrogates>0)))
19567 +        %end;
19568 +        %else %do;
19569 +           (where=(nrules>0))
19570 +        %end;
19571 +        label noobs
19572 +        ;
19573 +     run;
19574 +     title10;
19576 +   %end;
19578 +   /* Sequence */
19579 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19580 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19581 +   data _null_ ;
19582 +      set &EM_USER_outseq (obs=2) end=eof ;
19583 +      if eof then do ;
19584 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19585 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19586 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19587 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19588 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19589 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19590 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19591 +      end;
19592 +    run;
19594 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19595 +      data &EM_USER_OUTSEQ;
19596 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19597 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19598 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19599 +           _XMISC_=_VMISC_
19600 +        %end;
19601 +        %if "&em_tree_aprof" ne "."  %then %do;
19602 +           _XAPROF_=_VAPROF_
19603 +           _XPROF_ = _VPROF_
19604 +        %end;
19605 +        %if "&em_tree_aloss" ne "."  %then %do;
19606 +           _XALOSS_=_VALOSS_
19607 +        %end;
19608 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19609 +           _XPASE_ = _VPASE_
19610 +           _XPMISC_ = _VPMISC_
19611 +        %end;
19613 +        ));
19614 +     %end;
19615 +     %else %do;
19616 +        set &EM_USER_OUTSEQ;
19617 +     %end;
19619 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19620 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19621 +            _MISC_   15.&EM_PROPERTY_PRECISION
19622 +         %end;
19623 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19624 +            _PASE_  15.&EM_PROPERTY_PRECISION
19625 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19626 +         %end;
19627 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19628 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19629 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19630 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19631 +            %end;
19632 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19633 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19634 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19635 +            %end;
19636 +         %end;
19637 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19638 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19639 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19640 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19641 +            %end;
19642 +         %end;
19643 +         %if "&em_tree_seq" ne "." %then %do;
19644 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19645 +         %end;
19646 +         %if "&em_tree_vseq" ne "." %then %do;
19647 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19648 +         %end;
19649 +         %if "&em_tree_aprof" ne "." %then %do;
19650 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19651 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19652 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19653 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19654 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19655 +           %end;
19656 +         %end;
19657 +         %else %if "&em_tree_aloss" ne "." %then %do;
19658 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19659 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19660 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19661 +           %end;
19662 +         %end;
19663 +      ;
19664 +    run;
19665 +   %end;
19667 +   /* Observation Based Importance */
19668 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19670 +      /* need to check for 0 obs */
19671 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19672 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19673 +      %let rc=%sysfunc(close(&dsid));
19675 +      %if &onobs %then %do;
19676 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19677 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19679 +         data &EM_USER_OUTOBSIMP;
19680 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19681 +           if _a;
19682 +           by _INPUT1_;
19683 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19684 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19685 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19686 +                   %end;
19687 +                   ;
19688 +         run;
19689 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19690 +      %end;
19691 +   %end;
19693 +  %end;
19695 +  /* create dataset to support tree diagram and icicle plot */
19696 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19697 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19699 +  /* display tree diagram */
19700 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19701 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19703 +  /* display icicle diagram */
19704 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19705 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19707 +  /* Leaf Statistics Plot */
19708 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19710 +  /* print leaf information to output window */
19711 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19713 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19714 +       by descending N;
19715 +     run;
19717 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19718 +     %local vn;
19719 +     data _null_;
19720 +       set t (obs=2) end=eof;
19721 +       if eof then do;
19722 +         call symput("vn", strip(put(vn, best.)));
19723 +       end;
19724 +     run;
19726 +     data t;
19727 +       set t;
19728 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19729 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19730 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19731 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19732 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19733 +       %end;
19734 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19735 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19736 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19737 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19738 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19739 +          %end;
19740 +       %end;
19741 +       ;
19742 +     run;
19744 +     /* determine if rase is found in t */
19745 +    %let dsid=%sysfunc(open(t,i));
19746 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19747 +    %let rc=%sysfunc(close(&dsid));
19749 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19750 +     proc print data=t noobs label;
19751 +       where tprob ne .;
19752 +       var node depth N tprob
19753 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19754 +         %if "&vn" ne "." %then %do;
19755 +           VN
19756 +         %end;
19757 +         vprob
19758 +       %end;
19759 +       %if &raseexists %then %do;
19760 +            RASE
19761 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19762 +              VRASE
19763 +            %end;
19764 +       %end;
19765 +       ;
19766 +     run;
19767 +     title10;
19768 +  %end;
19770 +  /* create plots that are done during training of node */
19771 +  /* display iterative plot, including reference line */
19772 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19773 +   /* %if &nleaves eq  %then %do; */
19774 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19775 +      data _null_;
19776 +        set &EM_USER_OUTTOPOLOGY end=eof;
19777 +        if eof then do;
19778 +          call symput('nleaves', LEAF);
19779 +        end;
19780 +      run;
19781 +   /* %end; */
19783 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19784 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19785 +  %end;
19787 +  /* display leaf statistics */
19788 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19790 +  /* stats by node if multiple targets = Y */
19791 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19792 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19793 +    data &EM_USER_OUTSTATS;
19794 +      set &EM_USER_OUTSTATS;
19796 +     * if STATNAME="TARGET" then delete;
19797 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19798 +      drop leaf;
19799 +    run;
19800 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19802 +  %end;
19803 +  %else %do;
19804 +    /* add outstats and outdescribe to spk but not results */
19805 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19806 +  %end;
19808 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 92 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: The data set EMWS2.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 143 observations read from the data set EMWS2.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS2.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 49 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 42 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 49 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 14 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPN.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 7 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      


NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 7 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

19809  
19810  *------------------------------------------------------------*;
19811  * End REPORT: Tree;
19812  *------------------------------------------------------------*;

19813  /* Reset EM Options */
19814  options formchar="|----|+|---+=|-/\<>*";
19815  options nocenter ls=256 ps=10000;
19816  goptions reset=all device=GIF NODISPLAY;

19817  proc sort data=WORK.EM_USER_REPORT;
19818  by ID VIEW;
19819  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19820  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19821  by NAME;
19822  run;

NOTE: There were 99 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19823  proc sort data=EMWS2.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19824  by NAME;
19825  run;

NOTE: There were 99 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19826  data WORK.ASSESS_META;
19827  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19828  by NAME;
19829  run;

NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19830  data EM_temp_assessMeta;
19831  set EMWS2.Tree_CMeta_TRAIN;
19832  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19833  run;

NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19834  data EM_temp_assessdata;
19835  set EMWS2.Tree_TRAIN(keep=
19836  F_RESPOND
19837  I_RESPOND
19838  P_RESPOND0
19839  P_RESPOND1
19840  Q_RESPOND0
19841  Q_RESPOND1
19842  R_RESPOND0
19843  R_RESPOND1
19844  U_RESPOND
19845  V_RESPOND0
19846  V_RESPOND1
19847  _WARN_
19848  RESPOND
19849  );
19850  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
















24135   data EM_temp_assessMeta;
24136   set EMWS2.Tree_CMeta_TRAIN;
24137   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24138   run;

NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24139   data EM_temp_assessdata;
24140   set EMWS2.Tree_VALIDATE(keep=
24141   F_RESPOND
24142   I_RESPOND
24143   P_RESPOND0
24144   P_RESPOND1
24145   Q_RESPOND0
24146   Q_RESPOND1
24147   R_RESPOND0
24148   R_RESPOND1
24149   U_RESPOND
24150   V_RESPOND0
24151   V_RESPOND1
24152   _WARN_
24153   RESPOND
24154   );
24155   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 16121 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS2.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
















28449   %let _cn = %sysfunc(getoption(CENTER));
28450   options nocenter;
28451   proc print data=EMWS2.Tree_EMREPORTFIT noobs label;
28452   var STAT LABEL TRAIN
28453   VALIDATE
28454   ;
28455   by TARGET TARGETLABEL;
28456   title9 ' ';
28457   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28458   run;

NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28459   title10;
28460   options &_cn;

28461   proc sort data=EMWS2.Tree_EMCLASSIFICATION nothreads;
28462   by DATAROLE TARGET TARGETLABEL;
28463   run;

NOTE: There were 7 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS2.TREE_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28464   %let _cn = %sysfunc(getoption(CENTER));
28465   options nocenter;
28466   proc print data=EMWS2.Tree_EMCLASSIFICATION noobs label;
28467   var from into pct_row pct_col count percent
28468   ;
28469   by DATAROLE TARGET TARGETLABEL;
28470   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28471   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28472   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28473   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28474   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28475   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28476   where _TYPE_='PREDICTION';
28477   title9 ' ';
28478   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28479   run;

NOTE: There were 7 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28480   title9;
28481   title10;
28482   options &_cn;

28483   %let _cn = %sysfunc(getoption(CENTER));
28484   options nocenter;
28485   data EMWS2.Tree_EMEVENTREPORT;
28486   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28486 !  8;
28487   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28487 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28487 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28487 ! FALSEEVENT
28488   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28488 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28488 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28489      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28490   FALSEEVENT=0;
28491   FALSENEVENT=0;
28492   TRUEEVENT=0;
28493   TRUENEVENT=0;
28494   set EMWS2.Tree_EMEVENTREPORT;
28495   run;

NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The data set EMWS2.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

28496   proc print data=EMWS2.Tree_EMEVENTREPORT noobs label;
28497   title9 ' ';
28498   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28499   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28500   run;

NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

28501   title10;
28502   options &_cn;

28503   proc datasets library=EMWS2 nolist;
28504   modify Tree_EMRANK;
28505   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28506   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28507   run;

NOTE: MODIFY was successful for EMWS2.TREE_EMRANK.DATA.
28508   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

28509   %let _cn = %sysfunc(getoption(CENTER));
28510   options nocenter;
28511   proc print data=EMWS2.Tree_EMRANK label noobs;
28512   var
28513   decile gain lift liftc resp respc N _meanP_;
28514   by
28515   notsorted DATAROLE
28516   notsorted TARGET
28517   notsorted TARGETLABEL
28518   ;
28519   title9 ' ';
28520   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28521   run;

NOTE: There were 40 observations read from the data set EMWS2.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28522   title10;
28523   options &_cn;

28524   proc datasets library=EMWS2 nolist;
28525   modify Tree_EMSCOREDIST;
28526   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28527   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28528   run;

NOTE: MODIFY was successful for EMWS2.TREE_EMSCOREDIST.DATA.
28529   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

