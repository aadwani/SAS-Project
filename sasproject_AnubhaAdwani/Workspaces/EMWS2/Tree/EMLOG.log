*------------------------------------------------------------*
User:                aadwani
Date:                December 08, 2017
Time:                02:15:01
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 08, 2017
Time:                02:14:51
*------------------------------------------------------------*
14715  proc freq data=EMWS2.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14754  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS2.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14769  title9 ' ';
14770  proc print data=WORK.Tree_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14775  title10;
 
"No decisions defined for target "RESPOND"."
14776  proc print data = EMWS2.Ids_RESPOND_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;
 
NOTE: There were 7 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14783  title10;
 
14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15345  *------------------------------------------------------------*;
15346  * Tree: Generation of macros and macro variables;
15347  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15348  *------------------------------------------------------------*;
 
15349  %let EMEXCEPTIONSTRING=;
15350  *------------------------------------------------------------*;
15351  * TRAIN: Tree;
15352  *------------------------------------------------------------*;
15353  %let EM_ACTION = TRAIN;
15354  %let syscc = 0;
15355  %macro main;
15356
15357    %if %upcase(&EM_ACTION) = CREATE %then %do;
15358      filename temp catalog 'sashelp.emmodl.tree_create.source';
15359      %include temp;
15360      filename temp;
15361
15362      %em_tree_create;
15363    %end;
15364
15365     %else
15366     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15367
15368         filename temp catalog 'sashelp.emmodl.tree_train.source';
15369         %include temp;
15370         filename temp;
15371         %em_tree_train;
15372     %end;
15373
15374    %else
15375    %if %upcase(&EM_ACTION) = SCORE %then %do;
15376      filename temp catalog 'sashelp.emmodl.tree_score.source';
15377      %include temp;
15378      filename temp;
15379
15380      %em_tree_score;
15381
15382    %end;
15383
15384    %else
15385    %if %upcase(&EM_ACTION) = REPORT %then %do;
15386
15387         filename temp catalog 'sashelp.emmodl.tree_report.source';
15388         %include temp;
15389         filename temp;
15390
15391         %em_tree_report;
15392     %end;
15393
15394    %else
15395    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15396
15397         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15398         %include temp;
15399         filename temp;
15400         %EM_TREE_OPENTREEVIEWER;
15401
15402     %end;
15403
15404    %else
15405    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15406
15407         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15408         %include temp;
15409         filename temp;
15410         %EM_TREE_CLOSETREEVIEWER;
15411
15412     %end;
15413
15414
15415     %doendm:
15416  %mend main;
15417
15418  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15420 +%macro em_tree_train;
15422 +   %if &EM_IMPORT_DATA eq %then %do;
15423 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15424 +       %put &em_codebar;
15425 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15426 +       %put &errormsg;
15427 +       %put &em_codebar;
15428 +       %goto doendm;
15429 +   %end;
15430 +   %else
15431 +       %let EMEXCEPTIONSTRING =;
15433 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15434 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15435 +        %put &em_codebar;
15436 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15437 +        %put &errormsg;
15438 +        %put &em_codebar;
15439 +        %goto doendm;
15440 +   %end;
15442 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15443 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15444 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15445 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15446 +        %put &em_codebar;
15447 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15448 +        %put &errormsg;
15449 +        %put &em_codebar;
15450 +        %goto doendm;
15451 +   %end;
15453 +   /* Initialize property macro variables */
15454 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15455 +   %include temp;
15456 +   filename temp;
15458 +   %EM_SetProperties;
15460 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15461 +   %EM_GETNAME(key=EMTREE, type=DATA);
15462 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15463 +     /* if import eq Y and no importtable defined, throw an exception */
15464 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15465 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15466 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15467 +         %put &em_codebar;
15468 +         %put &errmsg;
15469 +         %put &em_codebar;
15470 +         %goto doendm;
15471 +      %end;
15472 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15473 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15474 +         %put &em_codebar;
15475 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15476 +         %put &errormsg;
15477 +         %put &em_codebar;
15478 +         %goto doendm;
15479 +      %end;
15480 +      %else %do;
15481 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15482 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15483 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15484 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15485 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15486 +         %let dsid = %sysfunc(close(&dsid));
15487 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15488 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15489 +            %put &em_codebar;
15490 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15491 +            %put &errormsg;
15492 +            %put &em_codebar;
15493 +            %goto doendm;
15494 +         %end;
15495 +      %end;
15496 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15497 +         proc delete data=&EM_USER_EMTREE;
15498 +         run;
15499 +      %end;
15500 +   %end;
15501 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15502 +      proc delete data=&EM_USER_EMTREE;
15503 +      run;
15504 +   %end;
15506 +   /* load tree macros */
15507 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15508 +   %include temp;
15509 +   filename temp;
15511 +   /* data sets */
15512 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15513 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15514 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15516 +   /* files */
15517 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15519 +   /* check actual num of target levels */
15520 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15521 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15522 +                              nLevel=_nTargetLevel );
15523 +      %if &_nTargetLevel  > 2 %then %do;
15524 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15525 +        %put &em_codebar;
15526 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15527 +        %put &errormsg;
15528 +        %put &em_codebar;
15529 +        %goto doendm;
15530 +      %end;
15531 +   %end;
15533 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15534 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15535 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15536 +        %let costflag=0;
15537 +        data _null_;
15538 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15539 +          if eof then call symput("costflag", _N_);
15540 +        run;
15541 +        %if &costflag gt 0 %then %do;
15542 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15543 +          %put &em_codebar;
15544 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15545 +          %put &errormsg;
15546 +          %put &em_codebar;
15547 +          %goto doendm;
15548 +       %end;
15549 +     %end;
15550 +   %end;
15552 +   /* determine if multiple targets will be processed */
15553 +   %let em_tree_multipleTargets=N;
15554 +   %let em_tree_numTarget = 1;
15555 +   %let em_tree_targetVars=;
15557 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15558 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15559 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15560 +         %let em_tree_multipleTargets=N;
15561 +      %end;
15562 +      %else %do;
15563 +         /* create macro array of targets  */
15564 +         data _null_;
15565 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15566 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15567 +           if eof then
15568 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15569 +        run;
15571 +        %if &em_tree_numTarget gt 1 %then %do;
15572 +           %let em_tree_multipleTargets=Y;
15573 +        %end;
15574 +      %end;
15575 +   %end;
15577 +   /* create view of only necessary variable for performance reasons */
15578 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15579 +   data &tempData / view=&tempData;
15580 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15581 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15582 +       %EM_TARGET
15583 +     %end;
15584 +     %else %do;
15585 +       %if &em_tree_numTarget ne 0 %then %do;
15586 +         %do i=1 %to &em_tree_numTarget;
15587 +            &&em_tree_targetVars&i
15588 +         %end;
15589 +       %end;
15590 +     %end;
15591 +     );
15592 +   run;
15594 +   /* run Tree procedure */
15595 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15597 +   /* Check return code and throw exception if error is detected */
15598 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15599 +   %if &syserr %then %do;
15600 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15601 +     %goto doendm;
15602 +   %end;
15604 +   /* add decision score code if multiple targets are processed */
15605 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15606 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15607 +   %end;
15609 +   /* create outfit dataset if multiple score statements have been executed */
15610 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15612 +   /* create English Rules */
15613 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15614 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15615 +       %em_tree_makeEnglishRules;
15617 +       /* English Rules */
15618 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15620 +     %end;
15621 +   filename x;
15623 +   %doendm:
15624 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15625 +%macro EM_SetProperties;
15627 +   /* train properties */
15628 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15670 +   /* properties for interactive sample */
15671 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15676 +   /* report properties */
15677 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15691 +   /* score properties */
15692 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15693 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15695 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS2.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15697 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15698 +  %global &nLevel;
15699 +  proc dmdb batch data=&indata
15700 +    classout=_tmp_dmdbout;
15701 +    class &target;
15702 +  run;
15703 +  data _tmp_dmdbout;
15704 +    set _tmp_dmdbout;
15705 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15706 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15707 +  run;
15708 +  data _null_;
15709 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15710 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15711 +    %let dsid = %sysfunc(close(&dsid));
15712 +     call symput("&nLevel", put(&_obs, Best12.));
15713 +  run;
15715 +  proc datasets lib=work nolist;
15716 +     delete _tmp_dmdbout;
15717 +  run;
15718 +  quit;
15719 +%Mend EM_CheckBinaryTargetLevel;
15722 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15724 +  /* determine the number of obs in training data */
15725 +  proc sql;
15726 +    reset noprint;
15727 +    select count(*) into :em_nobs from &indata;
15728 +  quit;
15730 +  /* determine the number of input variables */
15731 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15732 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15734 +  /* retrieve targetEvent from decmeta */
15735 +  %let targetEvent=;
15736 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15737 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15738 +      data _null_;
15739 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15740 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15741 +      run;
15742 +    %end;
15743 +  %end;
15745 +  /* create targetTable if multipleTar eq Y */
15746 +  data temptarget;
15747 +    set &EM_DATA_VARIABLESET;
15748 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15749 +  run;
15751 + /* data sets */
15752 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15753 + %EM_GETNAME(key=EMTREE,        type=DATA);
15754 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15755 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15756 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15757 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15758 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15759 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15760 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15761 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15763 + /* files */
15764 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15765 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15767 + /* turn on pmml if requested */
15768 + %let nnpmml=0;
15769 + %if %symexist(EM_PMML) %then %do;
15770 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15771 +       %let nnpmml=1;
15773 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15774 +%end;
15776 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15778 + %if &nnpmml or &numClassTarget %then %do;
15780 +       /* create dmdb needed for pmml generation */
15781 +       %let tree_maxlevel = 512;
15782 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15783 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15784 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15785 +         %end;
15786 +       %end;
15787 +       %if &tree_maxlevel gt 0 %then %do;
15788 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15789 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15790 +       %end;
15792 +       %let targetOrderString =;
15793 +       %let targetString = ;
15794 +       data _null_;
15795 +          length orderString nameString $10000;
15796 +          retain orderString nameString;
15797 +          set &em_data_variableset end=eof;
15798 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15799 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15800 +          %end;
15801 +          %else %do;
15802 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15803 +          %end;          select(order);
15804 +            when('')        order ='DESC';
15805 +            when('FMTASC')  order='ASCFMT';
15806 +            when('FMTDESC') order='DESFMT';
15807 +            otherwise;
15808 +          end;
15809 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15810 +          nameString = trim(nameString)!!' '!!trim(NAME);
15812 +          if eof then do;
15813 +             call symput('targetOrderString', trim(orderString));
15814 +             call symput('targetString', trim(nameString));
15815 +          end;
15816 +       run;
15818 +       %let arborkluge= "work._treeDMDB";
15820 +       proc dmdb batch data=&indata
15821 +       %if &nnpmml %then %do;
15822 +           PMML
15823 +       %end;
15824 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15827 +   %if &nnpmml %then %do;
15828 +        %if "%EM_ID" ne "" %then %do;
15829 +          id %EM_ID;
15830 +        %end;
15831 +        %if &EM_NUM_CLASS gt 0 %then %do;
15832 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15833 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15834 +               &targetOrderString;
15835 +        %end;
15836 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15837 +          var %EM_INTERVAL;
15838 +        %end;
15839 +        target &targetString %EM_INTERVAL_TARGET;
15840 +        %if "%EM_FREQ" ne "" %then %do;
15841 +          freq %EM_FREQ;
15842 +        %end;
15843 +  %end;
15844 +  %else %do;
15845 +      class  &targetOrderString;
15846 +      target &targetString %EM_INTERVAL_TARGET;
15847 +  %end;
15848 +       run;
15849 +       quit;
15851 +       proc datasets lib=work nolist;
15852 +          delete classout varout;
15853 +       run;
15854 +       quit;
15856 +    %end;
15857 + %end;
15859 + /* run Arbor procedure */
15860 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15861 +  proc arbor data=&INDATA
15863 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15864 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15865 +  %end;
15867 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15868 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15869 +  %end;
15871 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15872 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15873 +  %end;
15875 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15876 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15877 +  %end;
15879 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15880 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15881 +  %end;
15883 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15884 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15885 +  %end;
15886 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15887 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15888 +  %end;
15889 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15890 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15891 +  %end;
15893 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15894 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15895 +      alpha = &EM_PROPERTY_SIGLEVEL
15896 +    %end;
15897 +  %end;
15899 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15900 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15901 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15902 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15903 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15905 +        padjust =
15906 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15907 +          &chaid
15908 +        %end;
15909 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15910 +          DEPTH
15911 +        %end;
15912 +      %end;
15913 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15914 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15915 +         pvars = &num_inputs
15916 +      %end;
15917 +    %end;
15918 +  %end;
15919 +  %else %do;
15920 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15921 +         padjust = NONE
15922 +      %end;
15923 +  %end;
15925 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15926 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15927 +    Maxrules = &num_nrules
15928 +  %end;
15930 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15931 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15932 +    Maxsurrs = &num_nsurrs
15933 +  %end;
15935 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15936 +     Missing=&EM_PROPERTY_MISSINGVALUE
15937 +  %end;
15939 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15940 +     USEVARONCE
15941 +  %end;
15943 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15944 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15945 +  %end;
15948 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15949 +    event = "&targetEvent"
15950 +  %end;
15952 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15953 +     DECSEARCH
15954 +  %end;
15956 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15957 +     PRIORSSEARCH
15958 +  %end;
15960 +  %if &arbor_1 ne %then %do;
15961 +    &arbor_1
15962 +  %end;
15964 +  %if &em_arbor ne %then %do;
15965 +     &em_arbor
15966 +  %end;
15967 +  ;
15968 + %end;
15969 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15970 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15971 +       interact;
15972 + %end;
15973 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15974 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15975 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15976 +    %put &em_codebar;
15977 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15978 +    %put &errormsg;
15979 +    %put &em_codebar;
15980 +    %goto doendm;
15981 +   %end;
15982 +   %else %do;
15983 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15984 +       interact;
15985 +   %end;
15986 + %end;
15988 + %else %do;
15989 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15990 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15991 +    %put &em_codebar;
15992 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15993 +    %put &errormsg;
15994 +    %put &em_codebar;
15995 +    %goto doendm;
15996 +   %end;
15997 +   %else %do;
15998 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15999 +        interact;
16000 +   %end;
16001 + %end;
16003 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16004 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16005 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16006 +    %end;
16008 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16009 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16010 +    %end;
16012 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16013 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16014 +    %end;
16016 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16017 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16018 +    %end;
16020 +    %if "%EM_FREQ" ne "" %then %do;
16021 +       freq %EM_FREQ;
16022 +    %end;
16024 +    %if "&multipleTar" eq "Y" %then %do;
16025 +       /* cycle through all target vars in variableset */
16026 +       %let tdsid = %sysfunc(open(temptarget));
16027 +       %if &tdsid %then %do;
16028 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16029 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16030 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16031 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16032 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16033 +             target &var / level = &lvl
16034 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16035 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16036 +             %end;
16037 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16038 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16039 +             %end;
16040 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16041 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16042 +             %end;
16043 +          %end;
16044 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16045 +       %end;
16046 +       useTarget variable = %EM_TARGET;
16047 +    %end;
16048 +    %else %do;
16049 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16050 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16051 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16052 +      %end;
16053 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16054 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16055 +      %end;
16056 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16057 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16058 +      %end;
16059 +    %end;
16061 +    %if "&multipleTar" eq "N" %then %do;
16062 +      &EM_DEC_STATEMENT;
16063 +    %end;
16065 +    Performance &EM_PROPERTY_PERFORMANCE
16066 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16067 +      nodesize=&EM_PROPERTY_NODESAMPLE
16068 +    %end;
16069 +    ;
16071 +    %if "&intFlag" eq "Y" %then %do;
16072 +       INTERACT Largest;
16073 +       Train maxnewdepth=0;
16074 +    %end;
16076 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16077 +         Assess
16078 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16079 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16080 +              %put &em_codebar;
16081 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16082 +              %put &errormsg;
16083 +              %put &em_codebar;
16084 +            %end;
16085 +            %else %do;
16086 +               Validata=&EM_IMPORT_VALIDATE
16087 +            %end;
16088 +         %end;
16089 +         %else %do;
16090 +           NoValidata
16091 +         %end;
16092 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16093 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16094 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16095 +               %if &dsid %then %do;
16096 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16097 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16098 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16099 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16100 +                   %else %do;
16101 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16102 +                      %else %let measure= MISC;
16103 +                   %end;
16104 +                 %end;
16105 +               %end;
16106 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16107 +            %end;
16108 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16109 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16110 +                 %let measure=ASE;
16111 +              %end;
16112 +              %else %do;
16113 +                 %let measure=MISC;
16114 +              %end;
16115 +            %end;
16116 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16117 +              %let measure=ASE;
16118 +            %end;
16119 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16120 +               %let measure = LIFT;
16121 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16122 +               %if &dsid %then %do;
16123 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16124 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16125 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16126 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16127 +                 %end;
16128 +               %end;
16129 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16130 +            %end;
16131 +            measure=&measure
16132 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16133 +               event = "&targetEvent"
16134 +            %end;
16135 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16136 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16137 +            %end;
16138 +         %end;
16139 +         %if "&multipleTar" eq "N" %then %do;
16140 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16141 +               CV
16142 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16143 +                 CVNITer = &EM_PROPERTY_CVNITER
16144 +               %end;
16145 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16146 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16147 +               %end;
16148 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16149 +                 CVSeed = &EM_PROPERTY_CVSEED
16150 +               %end;
16151 +            %end;
16152 +         %end;
16153 +       %end;
16154 +      ;
16156 +      %if "&intFlag" ne "Y" %then %do;
16157 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16158 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16159 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16160 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16162 +          SUBTREE &subtree
16163 +          %if "&subtree" eq "NLEAVES" %then %do;
16164 +            =&EM_PROPERTY_NSUBTREE
16165 +          %end;
16166 +          ;
16167 +        %end;
16169 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16170 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16171 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16172 +          %end;
16173 +       %end;
16174 +      %end;
16175 + %end;
16178 + MakeMacro nleaves = nleaves;
16179 + save
16180 + %if "&EM_USER_EMTREE" ne "" %then %do;
16181 +   MODEL=&EM_USER_EMTREE
16182 + %end;
16183 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16184 +   SEQUENCE=&EM_USER_OUTSEQ
16185 + %end;
16186 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16187 +   IMPORTANCE=&EM_USER_OUTIMPORT
16188 + %end;
16189 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16190 +   NODESTAT=&EM_USER_OUTNODES
16191 + %end;
16192 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16193 +   SUMMARY=&EM_USER_OUTSUMMARY
16194 + %end;
16195 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16196 +   STATSBYNODE=&EM_USER_OUTSTATS
16197 + %end;
16198 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16199 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16200 + %end;
16201 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16202 +   Pathlistnonmissing=&EM_USER_OUTPATH
16203 + %end;
16204 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16205 +   RULES = &EM_USER_OUTRULES
16206 + %end;
16207 + ;
16209 + %if "&intFlag" ne "Y" %then %do;
16211 +   %let lookupString = ;
16212 +   %if ^%symexist(EM_OPTION) %then
16213 +      %let EM_OPTION=;
16215 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16216 +      %let lookupString = LOOKUP=SELECT;
16217 +   %end;
16219 +   %let codetext=;
16220 +   %let norescodetxt=;
16222 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16223 +     %let codetext=&codetext DUMMY;
16224 +     %let norescodetxt=&norescodetxt DUMMY;
16225 +   %end;
16226 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16227 +     %let codetext=&codetext NOLEAFID;
16228 +     %let norescodetxt=&norescodetxt NOLEAFID;
16229 +   %end;
16230 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16231 +     %let norescodetxt=&norescodetxt NOPRED;
16232 +   %end;
16234 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16235 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16237 +   %if &nnpmml %then %do;
16238 +     code pmml;
16239 +   %end;
16241 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16242 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16243 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16244 +   %end;
16245 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16246 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16247 +   %end;
16248 + %end;
16250 + run;
16251 + quit;
16253 + /*%em_checkerror(); */
16254 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16255 +   /* Delete DMDB catalog */
16256 +   proc datasets lib=work nolist;
16257 +       delete _treeDMDB / mt=cat;
16258 +  run;
16259 +  %end;
16261 + %if &nnpmml %then %do;
16262 +    ods pmml close;
16263 + %end;
16265 +  %doendm:
16267 +%mend em_tree_runTreeProcedure;
16269 +%macro em_tree_createFitStats( multipleTar= );
16272 +  /* create targetTable is multipleTar eq Y */
16273 +  data temptarget;
16274 +    set &EM_DATA_VARIABLESET;
16275 +    where ROLE="TARGET";
16276 +  run;
16278 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16279 +   data &EM_USER_EMOUTFIT;
16280 +     length target $32;
16281 +     merge work.fit_train
16282 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16283 +       work.fit_valid
16284 +     %end;
16285 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16286 +       work.fit_test
16287 +     %end;
16288 +     ;
16289 +     %if "&multipleTar" eq "N" %then %do;
16290 +       target="%EM_TARGET";
16291 +     %end;
16292 +     %else %do;
16293 +       target = _TARGET_;
16294 +     %end;
16295 +     drop _NW_ _SUMW_
16296 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16297 +        _VSUMW_
16298 +     %end;
16299 +     ;
16300 +   run;
16302 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16303 +     proc datasets library=work nolist;
16304 +       delete fit_valid;
16305 +     run;
16306 +   %end;
16307 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16308 +     proc datasets library=work nolist;
16309 +       delete fit_test;
16310 +     run;
16311 +   %end;
16313 +%mend em_tree_createFitStats;
16316 +%macro em_tree_makeEnglishRules;
16318 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16319 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16321 +  /* verify that necessary tables exist and if not, skip processing */
16322 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16323 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16324 +    %goto doendm;
16325 +  %end;
16326 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16327 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16328 +    %goto doendm;
16329 +  %end;
16331 +  /* determine length of variable in outpath dataset */
16332 +  %let vlength= ;
16333 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16334 +  %if &dsid ne %then %do;
16335 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16336 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16337 +  %end;
16338 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16340 +  data tempoutpath;
16341 +    length varname $&vlength;
16342 +    retain varname;
16343 +    set &EM_USER_OUTPATH;
16345 +    if ^missing(variable) then varname=variable;
16346 +    else if ^missing(var_name) then varname=var_name;
16347 +    output;
16348 +  run;
16350 +  /* create an array of generated predicted variable names */
16351 +  %let tree_pred_vars = ;
16352 +  %let tree_pred_label = ;
16353 +  %let numpred= 0;
16354 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16356 +    data _null_;
16357 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16358 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16359 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16360 +     if eof then
16361 +       call symput('numpred', strip(put(_N_, BEST.)));
16362 +    run;
16363 +  %end;
16365 +  /* determine if NPRIORS exists in outnodes  */
16366 +  %local nprior_flag;
16367 +  data _null_;
16368 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16369 +    if eof then do;
16370 +      call symput('nprior_flag', strip(put(npriors, best.)));
16371 +    end;
16372 +  run;
16374 +  proc sort data=tempoutpath; by node; run;
16375 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16377 +  data tempoutpath;
16378 +    merge tempoutpath(in=_a) outnodes(keep= node
16379 +    %if "&nprior_flag" ne "." %then %do;
16380 +      NPRIORS
16381 +    %end;
16382 +    %else %do;
16383 +      N
16384 +    %end;
16385 +    %if &numpred gt 0 %then %do;
16386 +      %do i=1 %to &numpred;
16387 +        &&tree_pred_vars&i
16388 +      %end;
16389 +    %end;
16390 +    );
16391 +    by node;
16392 +    if _a;
16393 +  run;
16395 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16397 +  data _null_;
16398 +    file x;
16399 +    set tempoutpath;
16400 +    by node descending varname;
16401 +    retain origvar oldnode string;
16402 +    length origvar $32 oldnode 8 string $200;
16404 +    if _N_ = 1 then do;
16405 +      origvar = varname;
16406 +      oldnode = node;
16407 +    end;
16409 +    if first.node then do;
16410 +       put "&EM_CODEBAR";
16411 +       put " Node = " node;
16412 +       put "&EM_CODEBAR";
16413 +    end;
16415 +      if first.varname then do;
16416 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16417 +            if MISSING(CHARACTER_VALUE) then do;
16418 +             if NUMERIC_VALUE ne .  then do;
16419 +              if ^first.node then do;
16420 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16421 +              end;
16422 +              else do;
16423 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16424 +              end;
16425 +             end;
16426 +            end;
16427 +            else do;
16428 +              if ^first.node then do;
16429 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16430 +              end;
16431 +              else do;
16432 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16433 +              end;
16434 +             end;
16435 +         end;
16436 +         else if RELATION in ("=") then do;
16437 +            if ^first.node then do;
16438 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16439 +            end;
16440 +            else do;
16441 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16442 +            end;
16443 +         end;
16444 +         else if RELATION in ("ISMISSING") then do;
16445 +            if ^first.node then do;
16446 +              string = " AND "|| strip(varname) || " equals Missing";
16447 +            end;
16448 +            else do;
16449 +              string = "if "|| strip(varname) ||" equals Missing";
16450 +            end;
16451 +         end;
16452 +         else if RELATION in ("ISNOTMISSING") then do;
16453 +            if ^first.node then do;
16454 +              string = " AND "|| strip(varname) || " equals All Values";
16455 +            end;
16456 +            else do;
16457 +              string = "if "|| strip(varname) ||" equals All Values";
16458 +            end;
16459 +         end;
16460 +         if ^missing(varname) then origvar = varname;
16461 +         oldnode=node;
16463 +      end;
16464 +      else do;
16465 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16466 +          if MISSING(CHARACTER_VALUE) then do;
16467 +           if  NUMERIC_VALUE ne .  then do;
16468 +            if ^MISSING(string) then
16469 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16470 +            else
16471 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16472 +           end;
16473 +          end;
16474 +          else do;
16475 +            if ^MISSING(string) then
16476 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16477 +            else
16478 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16479 +          end;
16481 +         end;
16482 +         else if RELATION in ("=") then do;
16483 +           string = strip(string)||", "||strip(character_value);
16484 +         end;
16485 +         else if RELATION in ("ISMISSING") then do;
16487 +         end;
16488 +         if ^missing(varname) then origvar = varname;
16489 +         oldnode=node;
16490 +      end;
16491 +      if last.varname then do;
16492 +         if RELATION in ("ISMISSING") then do;
16493 +           if ^first.varname then do;
16494 +             string = strip(string) || " or MISSING";
16495 +           end;
16496 +         end;
16497 +         put string;
16498 +         if ^missing(varname) then origvar = varname;
16499 +         oldnode=node;
16500 +      end;
16502 +      if last.node then do;
16503 +         put "then ";
16504 +         put " Tree Node Identifier   = " node;
16506 +         %if "&nprior_flag" ne "." %then %do;
16507 +           put " Number of Observations = " NPRIORS;
16508 +         %end;
16509 +         %else %do;
16510 +           put " Number of Observations = " N;
16511 +         %end;
16513 +         %if &numpred gt 0 %then %do;
16514 +           %do i=1 %to &numpred;
16515 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16516 +           %end;
16517 +         %end;
16519 +         put " ";
16520 +         if ^missing(varname) then origvar = varname;
16521 +         oldnode=node;
16522 +      end;
16524 +  run;
16526 +  proc datasets lib=work nolist;
16527 +    delete tempoutpath outnodes;
16528 +  run;
16530 +  %doendm:
16531 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS2.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596895 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1634171904 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 72253984 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 92 observations and 6 variables.
NOTE: The data set EMWS2.TREE_EMTREE has 2292 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTNODES has 7 observations and 24 variables.
NOTE: The data set EMWS2.TREE_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS2.TREE_OUTRULES has 143 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS2.TREE_OUTSTATS has 49 observations and 5 variables.
NOTE: The data set EMWS2.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\TREEFLOW.sas opened.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           3.64 seconds
      cpu time            3.48 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.65 seconds
      cpu time            3.50 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS2.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=08Dec2017:02:14:55,
      Create Time=08Dec2017:02:14:55
 
NOTE: 45 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16533
16534  *------------------------------------------------------------*;
16535  * End TRAIN: Tree;
16536  *------------------------------------------------------------*;
 
16537  *------------------------------------------------------------*;
16538  * Close any missing semi colons;
16539  *------------------------------------------------------------*;
16540  ;
16541  ;
16542  ;
16543  ;
16544  quit;
16545  *------------------------------------------------------------*;
16546  * Close any unbalanced quotes;
16547  *------------------------------------------------------------*;
16548  /*; *"; *'; */
16549  ;
16550  run;
16551  quit;
16552  /* Reset EM Options */
16553  options formchar="|----|+|---+=|-/\<>*";
16554  options nocenter ls=256 ps=10000;
16555  goptions reset=all device=GIF NODISPLAY;
 
16556  proc sort data=WORK.EM_USER_REPORT;
16557  by ID VIEW;
16558  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 08, 2017
Time:                02:14:56
*------------------------------------------------------------*
16660  %let EMEXCEPTIONSTRING=;
16661  *------------------------------------------------------------*;
16662  * SCORE: Tree;
16663  *------------------------------------------------------------*;
16664  %let EM_ACTION = SCORE;
16665  %let syscc = 0;
16666  %macro main;
16667
16668    %if %upcase(&EM_ACTION) = CREATE %then %do;
16669      filename temp catalog 'sashelp.emmodl.tree_create.source';
16670      %include temp;
16671      filename temp;
16672
16673      %em_tree_create;
16674    %end;
16675
16676     %else
16677     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16678
16679         filename temp catalog 'sashelp.emmodl.tree_train.source';
16680         %include temp;
16681         filename temp;
16682         %em_tree_train;
16683     %end;
16684
16685    %else
16686    %if %upcase(&EM_ACTION) = SCORE %then %do;
16687      filename temp catalog 'sashelp.emmodl.tree_score.source';
16688      %include temp;
16689      filename temp;
16690
16691      %em_tree_score;
16692
16693    %end;
16694
16695    %else
16696    %if %upcase(&EM_ACTION) = REPORT %then %do;
16697
16698         filename temp catalog 'sashelp.emmodl.tree_report.source';
16699         %include temp;
16700         filename temp;
16701
16702         %em_tree_report;
16703     %end;
16704
16705    %else
16706    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16707
16708         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16709         %include temp;
16710         filename temp;
16711         %EM_TREE_OPENTREEVIEWER;
16712
16713     %end;
16714
16715    %else
16716    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16717
16718         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16719         %include temp;
16720         filename temp;
16721         %EM_TREE_CLOSETREEVIEWER;
16722
16723     %end;
16724
16725
16726     %doendm:
16727  %mend main;
16728
16729  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16731 +%macro em_tree_score;
16733 +   /* determine if multiple targets will be processed */
16734 +   %let em_tree_multipleTargets=N;
16735 +   %let em_tree_numTarget=1;
16736 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16737 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16738 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16739 +         %let em_tree_multipleTargets=N;
16740 +      %end;
16741 +      %else %do;
16742 +         /* create macro array of targets  */
16743 +         data _null_;
16744 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16745 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16746 +           if eof then
16747 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16748 +        run;
16750 +        %if &em_tree_numTarget gt 1 %then %do;
16751 +           %let em_tree_multipleTargets=Y;
16752 +        %end;
16753 +      %end;
16754 +   %end;
16756 +   /* build flow and publish scoring code */
16757 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16758 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16760 +   filename treeflow "&EM_USER_TREEFLOW";
16761 +   filename treepub "&EM_USER_TREEPUBLISH";
16763 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16764 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16766 +   %em_copyfile(infref=treeflow, outfref=flowref);
16767 +   %em_copyfile(infref=treepub, outfref=pubref);
16769 +   filename treeflow;
16770 +   filename treepub;
16772 +   /* if priors are used, add code to generate unadjusted residuals in export */
16773 +   %let useAdjPriors = N;
16774 +   data _null_;
16775 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16776 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16777 +   run;
16778 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16779 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16780 +      %include temp;
16781 +      filename temp;
16783 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16784 +      filename adjref "&EM_USER_adjResidualCode";
16785 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16787 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16789 +      filename adjref;
16790 +   %end;
16792 +   /* LEAF */
16793 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16794 +      data _null_;
16795 +        file flowref mod;
16796 +        put 'drop _LEAF_;';
16797 +      run;
16799 +      data _null_;
16800 +        file pubref mod;
16801 +        put 'drop _LEAF_;';
16802 +      run;
16804 +   %end;
16806 +   filename flowref;
16807 +   filename pubref;
16809 +   /* em_metachange code */
16810 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16811 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16812 +   %end;
16814 +   /* variable selection based on importance stat    */
16815 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16816 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16817 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16818 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16819 +     %let obs = %sysfunc(fetch(&dsid));
16820 +     %do %while(&obs=0);
16821 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16822 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16823 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16824 +       %let obs = %sysfunc(fetch(&dsid));
16825 +     %end;
16826 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16827 +   %end;
16829 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16830 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16831 +    %let tree_pred_vars = ;
16832 +    %let tree_pred_lvl =;
16833 +    %let numpred= 0;
16835 +    data _null_;
16836 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16837 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16838 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16839 +     if eof then
16840 +       call symput('numpred', strip(put(_N_, BEST.)));
16841 +    run;
16842 +   %end;
16844 +   %if &numpred ne 0 %then %do;
16845 +    %do i=1 %to &numpred;
16846 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16847 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16848 +    %end;
16849 +   %end;
16851 +   /* determine if multiple targets will be processed */
16852 +   %let em_tree_multipleTargets=N;
16853 +   %let em_tree_numTarget=1;
16854 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16855 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16856 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16857 +         %let em_tree_multipleTargets=N;
16858 +      %end;
16859 +      %else %do;
16860 +        data _null_;
16861 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16862 +          if eof then
16863 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16864 +        run;
16866 +        %if &em_tree_numTarget gt 1 %then %do;
16867 +           %let em_tree_multipleTargets=Y;
16868 +        %end;
16869 +     %end;
16870 +   %end;
16872 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16873 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16875 +      /* variable importance */
16876 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16877 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16879 +         %let validexist=0;
16880 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16881 +           %let validexist=1;
16882 +         %end;
16884 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16885 +         /* and the columns may not be generated                                                                                 */
16886 +         %let em_tree_cvexists=;
16887 +         %let em_tree_surrexists=.;
16888 +         data _null_;
16889 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16890 +            if eof then do ;
16891 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16892 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16893 +            end;
16894 +         run;
16896 +         data &EM_USER_OUTIMPORT;
16897 +            set &EM_USER_OUTIMPORT;
16899 +            /* format columns based on Precison value specified */
16900 +            format importance 15.&EM_PROPERTY_PRECISION
16901 +                 %if &validexist %then %do;
16902 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16903 +                 %end;
16904 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16905 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16906 +                 %end;
16907 +            ;
16908 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16909 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16910 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16911 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16912 +                 %if "&em_tree_surrexists" ne "" %then %do;
16913 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16914 +                 %end;
16915 +                 %if &validexist %then %do;
16916 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16917 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16918 +                 %end;
16919 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16920 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16921 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16922 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16923 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16924 +                 %end;
16925 +            ;
16926 +         run;
16928 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16929 +      %end;
16930 +   %end;
16932 +   %doendm:
16933 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:02:14:56,
      Create Time=08Dec2017:02:14:56
 
NOTE: 110 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:02:14:56,
      Create Time=08Dec2017:02:14:56
 
NOTE: 88 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3803,
      Last Modified=08Dec2017:02:14:56,
      Create Time=08Dec2017:02:14:56
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3174,
      Last Modified=08Dec2017:02:14:56,
      Create Time=08Dec2017:02:14:56
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 88 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 88 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 89 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 90 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 91 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 92 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 92 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16934
16935  *------------------------------------------------------------*;
16936  * End SCORE: Tree;
16937  *------------------------------------------------------------*;
 
16938  proc sort data=WORK.EM_METACHANGE;
16939  by key uname;
16940  run;
 
NOTE: There were 92 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 92 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16941  filename x "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas";
16942  data _null_;
16943  file x;
16944  put 'if upcase(NAME) = "ACTBUY" then do;';
16945  put 'ROLE = "REJECTED";';
16946  put 'end;';
16947  put 'else ';
16948  put 'if upcase(NAME) = "BOTHPAYM" then do;';
16949  put 'ROLE = "REJECTED";';
16950  put 'end;';
16951  put 'else ';
16952  put 'if upcase(NAME) = "BUYPROP" then do;';
16953  put 'ROLE = "REJECTED";';
16954  put 'end;';
16955  put 'else ';
16956  put 'if upcase(NAME) = "CATALOGCNT" then do;';
16957  put 'ROLE = "REJECTED";';
16958  put 'end;';
16959  put 'else ';
16960  put 'if upcase(NAME) = "CCPAYM" then do;';
16961  put 'ROLE = "REJECTED";';
16962  put 'end;';
16963  put 'else ';
16964  put 'if upcase(NAME) = "COUNTY" then do;';
16965  put 'ROLE = "REJECTED";';
16966  put 'end;';
16967  put 'else ';
16968  put 'if upcase(NAME) = "DEPT01" then do;';
16969  put 'ROLE = "REJECTED";';
16970  put 'end;';
16971  put 'else ';
16972  put 'if upcase(NAME) = "DEPT02" then do;';
16973  put 'ROLE = "REJECTED";';
16974  put 'end;';
16975  put 'else ';
16976  put 'if upcase(NAME) = "DEPT03" then do;';
16977  put 'ROLE = "REJECTED";';
16978  put 'end;';
16979  put 'else ';
16980  put 'if upcase(NAME) = "DEPT04" then do;';
16981  put 'ROLE = "REJECTED";';
16982  put 'end;';
16983  put 'else ';
16984  put 'if upcase(NAME) = "DEPT05" then do;';
16985  put 'ROLE = "REJECTED";';
16986  put 'end;';
16987  put 'else ';
16988  put 'if upcase(NAME) = "DEPT06" then do;';
16989  put 'ROLE = "REJECTED";';
16990  put 'end;';
16991  put 'else ';
16992  put 'if upcase(NAME) = "DEPT07" then do;';
16993  put 'ROLE = "REJECTED";';
16994  put 'end;';
16995  put 'else ';
16996  put 'if upcase(NAME) = "DEPT08" then do;';
16997  put 'ROLE = "REJECTED";';
16998  put 'end;';
16999  put 'else ';
17000  put 'if upcase(NAME) = "DEPT09" then do;';
17001  put 'ROLE = "REJECTED";';
17002  put 'end;';
17003  put 'else ';
17004  put 'if upcase(NAME) = "DEPT10" then do;';
17005  put 'ROLE = "REJECTED";';
17006  put 'end;';
17007  put 'else ';
17008  put 'if upcase(NAME) = "DEPT11" then do;';
17009  put 'ROLE = "REJECTED";';
17010  put 'end;';
17011  put 'else ';
17012  put 'if upcase(NAME) = "DEPT12" then do;';
17013  put 'ROLE = "REJECTED";';
17014  put 'end;';
17015  put 'else ';
17016  put 'if upcase(NAME) = "DEPT13" then do;';
17017  put 'ROLE = "REJECTED";';
17018  put 'end;';
17019  put 'else ';
17020  put 'if upcase(NAME) = "DEPT14" then do;';
17021  put 'ROLE = "REJECTED";';
17022  put 'end;';
17023  put 'else ';
17024  put 'if upcase(NAME) = "DEPT15" then do;';
17025  put 'ROLE = "REJECTED";';
17026  put 'end;';
17027  put 'else ';
17028  put 'if upcase(NAME) = "DEPT16" then do;';
17029  put 'ROLE = "REJECTED";';
17030  put 'end;';
17031  put 'else ';
17032  put 'if upcase(NAME) = "DEPT17" then do;';
17033  put 'ROLE = "REJECTED";';
17034  put 'end;';
17035  put 'else ';
17036  put 'if upcase(NAME) = "DEPT18" then do;';
17037  put 'ROLE = "REJECTED";';
17038  put 'end;';
17039  put 'else ';
17040  put 'if upcase(NAME) = "DEPT19" then do;';
17041  put 'ROLE = "REJECTED";';
17042  put 'end;';
17043  put 'else ';
17044  put 'if upcase(NAME) = "DEPT20" then do;';
17045  put 'ROLE = "REJECTED";';
17046  put 'end;';
17047  put 'else ';
17048  put 'if upcase(NAME) = "DEPT21" then do;';
17049  put 'ROLE = "REJECTED";';
17050  put 'end;';
17051  put 'else ';
17052  put 'if upcase(NAME) = "DEPT22" then do;';
17053  put 'ROLE = "REJECTED";';
17054  put 'end;';
17055  put 'else ';
17056  put 'if upcase(NAME) = "DEPT23" then do;';
17057  put 'ROLE = "REJECTED";';
17058  put 'end;';
17059  put 'else ';
17060  put 'if upcase(NAME) = "DEPT24" then do;';
17061  put 'ROLE = "REJECTED";';
17062  put 'end;';
17063  put 'else ';
17064  put 'if upcase(NAME) = "DEPT25" then do;';
17065  put 'ROLE = "REJECTED";';
17066  put 'end;';
17067  put 'else ';
17068  put 'if upcase(NAME) = "DEPT26" then do;';
17069  put 'ROLE = "REJECTED";';
17070  put 'end;';
17071  put 'else ';
17072  put 'if upcase(NAME) = "DEPT27" then do;';
17073  put 'ROLE = "REJECTED";';
17074  put 'end;';
17075  put 'else ';
17076  put 'if upcase(NAME) = "DOLINDEA" then do;';
17077  put 'ROLE = "REJECTED";';
17078  put 'end;';
17079  put 'else ';
17080  put 'if upcase(NAME) = "DOLINDET" then do;';
17081  put 'ROLE = "REJECTED";';
17082  put 'end;';
17083  put 'else ';
17084  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17085  put 'ROLE = "REJECTED";';
17086  put 'end;';
17087  put 'else ';
17088  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17089  put 'ROLE = "REJECTED";';
17090  put 'end;';
17091  put 'else ';
17092  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17093  put 'ROLE = "REJECTED";';
17094  put 'end;';
17095  put 'else ';
17096  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17097  put 'ROLE = "REJECTED";';
17098  put 'end;';
17099  put 'else ';
17100  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17101  put 'ROLE = "REJECTED";';
17102  put 'end;';
17103  put 'else ';
17104  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17105  put 'ROLE = "REJECTED";';
17106  put 'end;';
17107  put 'else ';
17108  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17109  put 'ROLE = "REJECTED";';
17110  put 'end;';
17111  put 'else ';
17112  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17113  put 'ROLE = "REJECTED";';
17114  put 'end;';
17115  put 'else ';
17116  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17117  put 'ROLE = "REJECTED";';
17118  put 'end;';
17119  put 'else ';
17120  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17121  put 'ROLE = "REJECTED";';
17122  put 'end;';
17123  put 'else ';
17124  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17125  put 'ROLE = "REJECTED";';
17126  put 'end;';
17127  put 'else ';
17128  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17129  put 'ROLE = "REJECTED";';
17130  put 'end;';
17131  put 'else ';
17132  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17133  put 'ROLE = "REJECTED";';
17134  put 'end;';
17135  put 'else ';
17136  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17137  put 'ROLE = "REJECTED";';
17138  put 'end;';
17139  put 'else ';
17140  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17141  put 'ROLE = "REJECTED";';
17142  put 'end;';
17143  put 'else ';
17144  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17145  put 'ROLE = "REJECTED";';
17146  put 'end;';
17147  put 'else ';
17148  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17149  put 'ROLE = "REJECTED";';
17150  put 'end;';
17151  put 'else ';
17152  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17153  put 'ROLE = "REJECTED";';
17154  put 'end;';
17155  put 'else ';
17156  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17157  put 'ROLE = "REJECTED";';
17158  put 'end;';
17159  put 'else ';
17160  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17161  put 'ROLE = "REJECTED";';
17162  put 'end;';
17163  put 'else ';
17164  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17165  put 'ROLE = "REJECTED";';
17166  put 'end;';
17167  put 'else ';
17168  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17169  put 'ROLE = "REJECTED";';
17170  put 'end;';
17171  put 'else ';
17172  put 'if upcase(NAME) = "DOLNETDA" then do;';
17173  put 'ROLE = "REJECTED";';
17174  put 'end;';
17175  put 'else ';
17176  put 'if upcase(NAME) = "DOLNETDT" then do;';
17177  put 'ROLE = "REJECTED";';
17178  put 'end;';
17179  put 'else ';
17180  put 'if upcase(NAME) = "DTBUYLST" then do;';
17181  put 'ROLE = "REJECTED";';
17182  put 'end;';
17183  put 'else ';
17184  put 'if upcase(NAME) = "FREQPRCH" then do;';
17185  put 'ROLE = "REJECTED";';
17186  put 'end;';
17187  put 'else ';
17188  put 'if upcase(NAME) = "METHPAYM" then do;';
17189  put 'ROLE = "REJECTED";';
17190  put 'end;';
17191  put 'else ';
17192  put 'if upcase(NAME) = "MONLAST" then do;';
17193  put 'ROLE = "REJECTED";';
17194  put 'end;';
17195  put 'else ';
17196  put 'if upcase(NAME) = "PCPAYM" then do;';
17197  put 'ROLE = "REJECTED";';
17198  put 'end;';
17199  put 'else ';
17200  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17201  put 'ROLE = "ASSESS";';
17202  put 'end;';
17203  put 'else ';
17204  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17205  put 'ROLE = "ASSESS";';
17206  put 'end;';
17207  put 'else ';
17208  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17209  put 'ROLE = "REJECTED";';
17210  put 'end;';
17211  put 'else ';
17212  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17213  put 'ROLE = "REJECTED";';
17214  put 'end;';
17215  put 'else ';
17216  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17217  put 'ROLE = "REJECTED";';
17218  put 'end;';
17219  put 'else ';
17220  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17221  put 'ROLE = "REJECTED";';
17222  put 'end;';
17223  put 'else ';
17224  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17225  put 'ROLE = "REJECTED";';
17226  put 'end;';
17227  put 'else ';
17228  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17229  put 'ROLE = "REJECTED";';
17230  put 'end;';
17231  put 'else ';
17232  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17233  put 'ROLE = "REJECTED";';
17234  put 'end;';
17235  put 'else ';
17236  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17237  put 'ROLE = "REJECTED";';
17238  put 'end;';
17239  put 'else ';
17240  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17241  put 'ROLE = "REJECTED";';
17242  put 'end;';
17243  put 'else ';
17244  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17245  put 'ROLE = "REJECTED";';
17246  put 'end;';
17247  put 'else ';
17248  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17249  put 'ROLE = "REJECTED";';
17250  put 'end;';
17251  put 'else ';
17252  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17253  put 'ROLE = "REJECTED";';
17254  put 'end;';
17255  put 'else ';
17256  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17257  put 'ROLE = "REJECTED";';
17258  put 'end;';
17259  put 'else ';
17260  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17261  put 'ROLE = "REJECTED";';
17262  put 'end;';
17263  put 'else ';
17264  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17265  put 'ROLE = "REJECTED";';
17266  put 'end;';
17267  put 'else ';
17268  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17269  put 'ROLE = "REJECTED";';
17270  put 'end;';
17271  put 'else ';
17272  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17273  put 'ROLE = "REJECTED";';
17274  put 'end;';
17275  put 'else ';
17276  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17277  put 'ROLE = "REJECTED";';
17278  put 'end;';
17279  put 'else ';
17280  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17281  put 'ROLE = "REJECTED";';
17282  put 'end;';
17283  put 'else ';
17284  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17285  put 'ROLE = "REJECTED";';
17286  put 'end;';
17287  put 'else ';
17288  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17289  put 'ROLE = "REJECTED";';
17290  put 'end;';
17291  put 'else ';
17292  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17293  put 'ROLE = "REJECTED";';
17294  put 'end;';
17295  put 'else ';
17296  put 'if upcase(NAME) = "UNITSIDD" then do;';
17297  put 'ROLE = "REJECTED";';
17298  put 'end;';
17299  put 'else ';
17300  put 'if upcase(NAME) = "UNITSLAP" then do;';
17301  put 'ROLE = "REJECTED";';
17302  put 'end;';
17303  put 'else ';
17304  put 'if upcase(NAME) = "UNTLANPO" then do;';
17305  put 'ROLE = "REJECTED";';
17306  put 'end;';
17307  put 'else ';
17308  put 'if upcase(NAME) = "_NODE_" then do;';
17309  put 'ROLE = "SEGMENT";';
17310  put 'LEVEL = "NOMINAL";';
17311  put 'end;';
17312  run;
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=08Dec2017:02:14:57,
      Create Time=08Dec2017:01:41:50
 
NOTE: 368 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17313  filename x;
NOTE: Fileref X has been deassigned.
 
17314  filename emflow "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
17315  *------------------------------------------------------------*;
17316  * Tree: Scoring DATA data;
17317  *------------------------------------------------------------*;
17318  data EMWS2.Tree_TRAIN
17319  / view=EMWS2.Tree_TRAIN
17320  ;
17321  set EMWS2.Part_TRAIN
17322  ;
17323  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
17324 +****************************************************************;
17325 +******             DECISION TREE SCORING CODE             ******;
17326 +****************************************************************;
17327 +
17328 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17329 +LENGTH F_RESPOND  $   12;
17330 +LENGTH I_RESPOND  $   12;
17331 +LENGTH _WARN_  $    4;
17332 +
17333 +******              LABELS FOR NEW VARIABLES              ******;
17334 +label _NODE_ = 'Node' ;
17335 +label _LEAF_ = 'Leaf' ;
17336 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17337 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17338 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17339 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17340 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17341 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17342 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17343 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17344 +label F_RESPOND = 'From: RESPOND' ;
17345 +label I_RESPOND = 'Into: RESPOND' ;
17346 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17347 +label _WARN_ = 'Warnings' ;
17348 +
17349 +
17350 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17351 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17352 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17353 +
17354 +
17355 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17356 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17357 +
17358 +******             ASSIGN OBSERVATION TO NODE             ******;
17359 +IF  NOT MISSING(DOLL24 ) AND
17360 +                 121.2 <= DOLL24  THEN DO;
17361 +  _NODE_  =                    3;
17362 +  _LEAF_  =                    4;
17363 +  P_RESPOND1  =     0.13338973491257;
17364 +  P_RESPOND0  =     0.86661026508742;
17365 +  Q_RESPOND1  =     0.13338973491257;
17366 +  Q_RESPOND0  =     0.86661026508742;
17367 +  V_RESPOND1  =     0.12445414847161;
17368 +  V_RESPOND0  =     0.87554585152838;
17369 +  I_RESPOND  = '0' ;
17370 +  U_RESPOND  =                    0;
17371 +  END;
17372 +ELSE DO;
17373 +  IF  NOT MISSING(TENURE ) AND
17374 +    TENURE  <                  1.5 THEN DO;
17375 +    IF  NOT MISSING(DAYLAST ) AND
17376 +                      46.5 <= DAYLAST  THEN DO;
17377 +      _NODE_  =                    9;
17378 +      _LEAF_  =                    2;
17379 +      P_RESPOND1  =     0.11111111111111;
17380 +      P_RESPOND0  =     0.88888888888888;
17381 +      Q_RESPOND1  =     0.11111111111111;
17382 +      Q_RESPOND0  =     0.88888888888888;
17383 +      V_RESPOND1  =                    0;
17384 +      V_RESPOND0  =                    1;
17385 +      I_RESPOND  = '0' ;
17386 +      U_RESPOND  =                    0;
17387 +      END;
17388 +    ELSE DO;
17389 +      _NODE_  =                    8;
17390 +      _LEAF_  =                    1;
17391 +      P_RESPOND1  =     0.95454545454545;
17392 +      P_RESPOND0  =     0.04545454545454;
17393 +      Q_RESPOND1  =     0.95454545454545;
17394 +      Q_RESPOND0  =     0.04545454545454;
17395 +      V_RESPOND1  =                    1;
17396 +      V_RESPOND0  =                    0;
17397 +      I_RESPOND  = '1' ;
17398 +      U_RESPOND  =                    1;
17399 +      END;
17400 +    END;
17401 +  ELSE DO;
17402 +    _NODE_  =                    5;
17403 +    _LEAF_  =                    3;
17404 +    P_RESPOND1  =     0.04640937957987;
17405 +    P_RESPOND0  =     0.95359062042012;
17406 +    Q_RESPOND1  =     0.04640937957987;
17407 +    Q_RESPOND0  =     0.95359062042012;
17408 +    V_RESPOND1  =     0.04756567425569;
17409 +    V_RESPOND0  =      0.9524343257443;
17410 +    I_RESPOND  = '0' ;
17411 +    U_RESPOND  =                    0;
17412 +    END;
17413 +  END;
17414 +
17415 +*****  RESIDUALS R_ *************;
17416 +IF  F_RESPOND  NE '1'
17417 +AND F_RESPOND  NE '0'  THEN DO;
17418 +        R_RESPOND1  = .;
17419 +        R_RESPOND0  = .;
17420 + END;
17421 + ELSE DO;
17422 +       R_RESPOND1  =  -P_RESPOND1 ;
17423 +       R_RESPOND0  =  -P_RESPOND0 ;
17424 +       SELECT( F_RESPOND  );
17425 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17426 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17427 +       END;
17428 + END;
17429 +
17430 +****************************************************************;
17431 +******          END OF DECISION TREE SCORING CODE         ******;
17432 +****************************************************************;
17433 +
17434 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17435  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17436  quit;
17437  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17438  filename emflow "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
17439  *------------------------------------------------------------*;
17440  * Tree: Scoring VALIDATE data;
17441  *------------------------------------------------------------*;
17442  data EMWS2.Tree_VALIDATE
17443  / view=EMWS2.Tree_VALIDATE
17444  ;
17445  set EMWS2.Part_VALIDATE
17446  ;
17447  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
17448 +****************************************************************;
17449 +******             DECISION TREE SCORING CODE             ******;
17450 +****************************************************************;
17451 +
17452 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17453 +LENGTH F_RESPOND  $   12;
17454 +LENGTH I_RESPOND  $   12;
17455 +LENGTH _WARN_  $    4;
17456 +
17457 +******              LABELS FOR NEW VARIABLES              ******;
17458 +label _NODE_ = 'Node' ;
17459 +label _LEAF_ = 'Leaf' ;
17460 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17461 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17462 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17463 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17464 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17465 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17466 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17467 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17468 +label F_RESPOND = 'From: RESPOND' ;
17469 +label I_RESPOND = 'Into: RESPOND' ;
17470 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17471 +label _WARN_ = 'Warnings' ;
17472 +
17473 +
17474 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17475 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17476 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17477 +
17478 +
17479 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17480 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17481 +
17482 +******             ASSIGN OBSERVATION TO NODE             ******;
17483 +IF  NOT MISSING(DOLL24 ) AND
17484 +                 121.2 <= DOLL24  THEN DO;
17485 +  _NODE_  =                    3;
17486 +  _LEAF_  =                    4;
17487 +  P_RESPOND1  =     0.13338973491257;
17488 +  P_RESPOND0  =     0.86661026508742;
17489 +  Q_RESPOND1  =     0.13338973491257;
17490 +  Q_RESPOND0  =     0.86661026508742;
17491 +  V_RESPOND1  =     0.12445414847161;
17492 +  V_RESPOND0  =     0.87554585152838;
17493 +  I_RESPOND  = '0' ;
17494 +  U_RESPOND  =                    0;
17495 +  END;
17496 +ELSE DO;
17497 +  IF  NOT MISSING(TENURE ) AND
17498 +    TENURE  <                  1.5 THEN DO;
17499 +    IF  NOT MISSING(DAYLAST ) AND
17500 +                      46.5 <= DAYLAST  THEN DO;
17501 +      _NODE_  =                    9;
17502 +      _LEAF_  =                    2;
17503 +      P_RESPOND1  =     0.11111111111111;
17504 +      P_RESPOND0  =     0.88888888888888;
17505 +      Q_RESPOND1  =     0.11111111111111;
17506 +      Q_RESPOND0  =     0.88888888888888;
17507 +      V_RESPOND1  =                    0;
17508 +      V_RESPOND0  =                    1;
17509 +      I_RESPOND  = '0' ;
17510 +      U_RESPOND  =                    0;
17511 +      END;
17512 +    ELSE DO;
17513 +      _NODE_  =                    8;
17514 +      _LEAF_  =                    1;
17515 +      P_RESPOND1  =     0.95454545454545;
17516 +      P_RESPOND0  =     0.04545454545454;
17517 +      Q_RESPOND1  =     0.95454545454545;
17518 +      Q_RESPOND0  =     0.04545454545454;
17519 +      V_RESPOND1  =                    1;
17520 +      V_RESPOND0  =                    0;
17521 +      I_RESPOND  = '1' ;
17522 +      U_RESPOND  =                    1;
17523 +      END;
17524 +    END;
17525 +  ELSE DO;
17526 +    _NODE_  =                    5;
17527 +    _LEAF_  =                    3;
17528 +    P_RESPOND1  =     0.04640937957987;
17529 +    P_RESPOND0  =     0.95359062042012;
17530 +    Q_RESPOND1  =     0.04640937957987;
17531 +    Q_RESPOND0  =     0.95359062042012;
17532 +    V_RESPOND1  =     0.04756567425569;
17533 +    V_RESPOND0  =      0.9524343257443;
17534 +    I_RESPOND  = '0' ;
17535 +    U_RESPOND  =                    0;
17536 +    END;
17537 +  END;
17538 +
17539 +*****  RESIDUALS R_ *************;
17540 +IF  F_RESPOND  NE '1'
17541 +AND F_RESPOND  NE '0'  THEN DO;
17542 +        R_RESPOND1  = .;
17543 +        R_RESPOND0  = .;
17544 + END;
17545 + ELSE DO;
17546 +       R_RESPOND1  =  -P_RESPOND1 ;
17547 +       R_RESPOND0  =  -P_RESPOND0 ;
17548 +       SELECT( F_RESPOND  );
17549 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17550 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17551 +       END;
17552 + END;
17553 +
17554 +****************************************************************;
17555 +******          END OF DECISION TREE SCORING CODE         ******;
17556 +****************************************************************;
17557 +
17558 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17559  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17560  quit;
17561  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17563  proc sort data=WORK.EM_USER_REPORT;
17564  by ID VIEW;
17565  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17566  *------------------------------------------------------------*;
17567  * Tree: Computing metadata for TRAIN data;
17568  *------------------------------------------------------------*;
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18282  data WORK.MODELTEMP_INFO;
18283  set EMWS2.Tree_EMINFO;
18284  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18285  run;
 
NOTE: There were 0 observations read from the data set EMWS2.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18286  data EMWS2.Tree_EMINFO;
18287  length TARGET KEY $32 DATA $43;
18288  input TARGET KEY DATA $;
18289  cards;
 
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18293  run;
18294  data EMWS2.Tree_EMINFO;
18295  set EMWS2.Tree_EMINFO WORK.MODELTEMP_INFO;
18296  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18297  proc sort data = EMWS2.Tree_EMINFO NOTHREADS;
18298  by TARGET KEY;
18299  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18300  proc sort data = EMWS2.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18301  by TARGET KEY;
18302  run;
 
NOTE: There were 3 observations read from the data set EMWS2.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18303  proc sort data = EMWS2.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18304  by TARGET KEY;
18305  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18306  data EMWS2.Tree_EMINFO;
18307  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18308  by TARGET KEY;
18309  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS2.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18310  proc datasets lib=work nolist;
18311  delete TEMP_INFO SORTEDEMINFO;
18312  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18313  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 08, 2017
Time:                02:14:58
*------------------------------------------------------------*
18337  data EMWS2.Tree_EMOUTFIT;
18338  set EMWS2.Tree_EMOUTFIT;
18339  length TargetLabel $200;
18340  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18341  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18342  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18343  proc sort data=EMWS2.Tree_EMREPORTFIT nothreads;
18344  by TARGET;
18345  run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The data set EMWS2.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18346  %let _EMwarndup = 0;
18347  %let _EMtargetdup =;
18348  %let _EMASEtargetdup =;
18349  data _null_;
18350  set EMWS2.Tree_EMOUTFIT;
18351  if .<_ASE_<0.000001 then do;
18352  call symput('_EMwarndup', '1');
18353  call symput('_EMtargetdup', target);
18354  call symput('_EMASEtargetdup', put(_ASE_, best.));
18355  end;
18356  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18357  %let EMEXCEPTIONSTRING=;
18358  *------------------------------------------------------------*;
18359  * REPORT: Tree;
18360  *------------------------------------------------------------*;
18361  %let EM_ACTION = REPORT;
18362  %let syscc = 0;
18363  %macro main;
18364
18365    %if %upcase(&EM_ACTION) = CREATE %then %do;
18366      filename temp catalog 'sashelp.emmodl.tree_create.source';
18367      %include temp;
18368      filename temp;
18369
18370      %em_tree_create;
18371    %end;
18372
18373     %else
18374     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18375
18376         filename temp catalog 'sashelp.emmodl.tree_train.source';
18377         %include temp;
18378         filename temp;
18379         %em_tree_train;
18380     %end;
18381
18382    %else
18383    %if %upcase(&EM_ACTION) = SCORE %then %do;
18384      filename temp catalog 'sashelp.emmodl.tree_score.source';
18385      %include temp;
18386      filename temp;
18387
18388      %em_tree_score;
18389
18390    %end;
18391
18392    %else
18393    %if %upcase(&EM_ACTION) = REPORT %then %do;
18394
18395         filename temp catalog 'sashelp.emmodl.tree_report.source';
18396         %include temp;
18397         filename temp;
18398
18399         %em_tree_report;
18400     %end;
18401
18402    %else
18403    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18404
18405         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18406         %include temp;
18407         filename temp;
18408         %EM_TREE_OPENTREEVIEWER;
18409
18410     %end;
18411
18412    %else
18413    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18414
18415         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18416         %include temp;
18417         filename temp;
18418         %EM_TREE_CLOSETREEVIEWER;
18419
18420     %end;
18421
18422
18423     %doendm:
18424  %mend main;
18425
18426  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18428 +%macro em_tree_makePlotDs( multipleTar= );
18430 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18431 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18432 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18433 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18435 +  /* determine if validation statistics will be displayed */
18436 +  %let validflag=N;
18437 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18438 +    /* determine if validation data exists */
18439 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18440 +      %let validflag=Y;
18441 +    %end;
18442 +  %end;
18444 +   /* retrieve name of decmeta even in presence of multiple targets */
18445 +   %let decmeta = ;
18446 +   %if &EM_DEC_DECMETA eq %then %do;
18447 +     data _Target;
18448 +       set &em_data_variableset;
18449 +       where ROLE='TARGET' and USE in('D', 'Y');
18450 +       keep NAME;
18451 +     run;
18452 +     proc sort data=_Target;
18453 +       by NAME;
18454 +     run;
18455 +     proc sort data=EM_TARGETDECINFO;
18456 +       by TARGET;
18457 +     run;
18458 +     data _Target;
18459 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18460 +       by NAME;
18461 +       if _a then do;
18462 +         call symput('decmeta', trim(DECMETA));
18463 +       end;
18464 +     run;
18465 +     proc delete data=_Target;run;
18466 +   %end;
18467 +   %else %let decmeta = &EM_DEC_DECMETA;
18470 +  /* retrieve targetEvent from decmeta */
18471 +  %let targetEvent=;
18472 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18473 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18474 +      data _null_;
18475 +       set &DECMETA(where=(_TYPE_="TARGET"));
18476 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18477 +      run;
18478 +    %end;
18479 +  %end;
18481 +  /* retrieve predicted var for targetEvent from decmeta */
18482 +  %let predTarget=;
18483 +  %let predLvl=;
18484 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18485 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18486 +      data _null_;
18487 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18488 +       call symput('predTarget', strip(VARIABLE));
18489 +       call symput('predLvl', strip(LEVEL));
18490 +      run;
18491 +    %end;
18492 +  %end;
18493 +  %else %do;
18494 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18495 +      data _null_;
18496 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18497 +       call symput('predTarget', strip(VARIABLE));
18498 +      run;
18499 +    %end;
18500 +  %end;
18502 +  /* create BelowText value */
18503 +  data belowtext;
18504 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18505 +    keep node belowtext;
18506 +  run;
18508 +  /* relace belowtext with variable label if it exists */
18509 +  data belowtext2;
18510 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18511 +    keep node belowtextlbl;
18512 +  run;
18514 +  proc sort data=belowtext; by node; run;
18515 +  proc sort data=belowtext2; by node; run;
18517 +  data belowtext;
18518 +    merge belowtext belowtext2(in=_a);
18519 +    by node;
18520 +    if _a then belowtext=belowtextlbl;
18521 +    keep node belowtext;
18522 +  run;
18524 +  /* create AboveText value */
18525 +  data abovetext;
18526 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18527 +  run;
18528 +  proc sort data=abovetext; by node numeric_value; run;
18530 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18531 +  data abovetext;
18532 +    set abovetext(rename=(node=parent));
18533 +    by parent numeric_value;
18534 +    retain abovetext tempstring flag branch origval origchar ;
18535 +    length abovetext $256;
18536 +    length tempstring origchar $64;
18538 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18539 +      if first.parent then do;
18540 +        if missing(character_value) then do;
18541 +          numeric_value = round(numeric_value, &sp_precision);
18542 +          abovetext = "< "||strip(NUMERIC_VALUE);
18543 +          branch = 1;
18544 +          origval = numeric_value;
18545 +          output;
18546 +        end;
18547 +        else do;
18548 +          abovetext = "< "||strip(CHARACTER_VALUE);
18549 +          branch = 1;
18550 +          origchar = character_value;
18551 +          output;
18552 +        end;
18554 +        if first.parent AND last.parent then do;
18555 +          if missing(character_value) then do;
18556 +            numeric_value = round(numeric_value, &sp_precision);
18557 +            branch = branch + 1;
18558 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18559 +            output;
18560 +          end;
18561 +          else do;
18562 +            branch = branch + 1;
18563 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18564 +            output;
18565 +          end;
18566 +        end;
18567 +      end;
18568 +      else if last.parent then do;
18569 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18570 +          if missing(character_value) then do;
18571 +            numeric_value = round(numeric_value, &sp_precision);
18572 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18573 +          end;
18574 +          else do;
18575 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18576 +          end;
18577 +          branch = branch + 1;
18578 +          output;
18580 +          if missing(character_value) then do;
18581 +            numeric_value = round(numeric_value, &sp_precision);
18582 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18583 +          end;
18584 +          else do;
18585 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18586 +          end;
18587 +          branch = branch + 1;
18588 +          output;
18589 +        end;
18590 +        else do;
18591 +          if missing(character_value) then do;
18592 +            numeric_value = round(numeric_value, &sp_precision);
18593 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18594 +          end;
18595 +          else do;
18596 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18597 +          end;
18598 +          branch = branch + 1;
18599 +          output;
18600 +        end;
18601 +      end;
18602 +      else do;
18603 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18604 +          if missing(character_value) then do;
18605 +            numeric_value = round(numeric_value,&sp_precision);
18606 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18607 +            origval = numeric_value;
18608 +          end;
18609 +          else do;
18610 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18611 +            origchar = character_value;
18612 +          end;
18613 +          branch = branch + 1;
18614 +          output;
18616 +        end;
18617 +        else do;
18618 +          if missing(character_value) then do;
18619 +            numeric_value = round(numeric_value, &sp_precision);
18620 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18621 +            origval = numeric_value;
18622 +          end;
18623 +          else do;
18624 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18625 +            origval = character_value;
18626 +          end;
18627 +          branch = branch + 1;
18628 +          output;
18629 +        end;
18630 +      end;
18631 +    end;
18632 +    else do;
18633 +       if first.numeric_value then do;
18634 +         flag = 0;
18635 +         abovetext = strip(CHARACTER_VALUE);
18636 +         branch = numeric_value;
18637 +         if first.numeric_value AND last.numeric_value then do;
18638 +           output;
18639 +         end;
18640 +       end;
18641 +       else if last.numeric_value then do;
18642 +         if flag=0 then do;
18643 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18644 +           length = length(strip(tempstring));
18645 +           if length < 32 then do;
18646 +             abovetext = strip(tempstring);
18647 +           end;
18648 +           else do;
18649 +             abovetext = strip(abovetext)||", ...";
18650 +             flag = 1;
18651 +           end;
18652 +         end;
18653 +         branch = numeric_value;
18654 +         output;
18655 +       end;
18656 +       else do;
18657 +         if flag=0 then do;
18658 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18659 +           length = length(strip(tempstring));
18660 +           if length < 32 then do;
18661 +             abovetext = strip(tempstring);
18662 +           end;
18663 +           else do;
18664 +             abovetext = strip(abovetext)||", ...";
18665 +             flag=1;
18666 +           end;
18667 +         end;
18668 +         branch = numeric_value;
18669 +       end;
18670 +    end;
18671 +    keep parent branch abovetext;
18672 +  run;
18674 +  /* MIssing value to abovetext */
18675 +  data tempmissing;
18676 +    set &EM_USER_OUTRULES;
18677 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18678 +    rename node=parent numeric_value=branch character_value=misschar;
18679 +  run;
18682 +  proc sort data=abovetext; by parent branch; run;
18683 +  proc sort data=tempmissing; by parent branch; run;
18684 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18686 +  data tempoutnodes;
18687 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18688 +    by parent branch;
18689 +    length traintotal validtotal 8;
18690 +    retain traintotal validtotal;
18692 +    if _a then do;
18693 +      if ^MISSING(abovetext) then do;
18694 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18695 +      end;
18696 +      else do;
18697 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18698 +      end;
18699 +    end;
18700 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18702 +    if node=1 then do;
18703 +      traintotal = N;
18704 +      validtotal=VN;
18705 +    end;
18707 +    drop role rank stat misschar belowtext;
18708 +  run;
18709 +  proc sort data=tempoutnodes; by node; run;
18710 +  proc sort data=belowtext; by node; run;
18712 +  data tempoutnodes;
18713 +    merge tempoutnodes belowtext;
18714 +    by node;
18716 +  run;
18718 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18719 +  %let adjusted = N;
18720 +  %let npriors = 0;
18721 +  data _null_ ;
18722 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18723 +    if eof then do ;
18724 +      call symput("npriors" , strip(put(_N_,best.))) ;
18725 +    end;
18726 +  run;
18727 +  %if &npriors gt 0 %then %let adjusted=Y;
18730 +  /* create a table with targetUsed and targetLevel columns for each node */
18731 +  data temptarmeta;
18732 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18733 +    %if &multipleTar eq N %then %do;
18734 +      AND USE in ('D', 'Y')
18735 +    %end;
18736 +    ));
18737 +    length TARGET $32;
18738 +    Target=name;
18739 +    keep target level;
18740 +  run;
18742 +  %if &multipleTar eq Y %then %do;
18743 +    data temptargetused;
18744 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18745 +      keep node target;
18746 +    run;
18747 +    proc sort data=temptargetused; by target; run;
18748 +    proc sort data=temptarmeta; by target; run;
18749 +    data temptargetused;
18750 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18751 +      by target;
18752 +      if _a and _b;
18753 +    run;
18754 +  %end;
18755 +  %else %do;
18756 +    data temptargetused;
18757 +      set &EM_USER_OUTSTATS;
18758 +      length target $32 tarlevel $10;
18759 +      target="%EM_TARGET";
18760 +      tarlevel="%EM_TARGET_LEVEL";
18761 +      keep node target tarlevel;
18762 +    run;
18763 +    proc sort data=temptargetused nodupkey; by node; run;
18764 +  %end;
18766 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18767 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18768 +  proc sort data=temptargetused; by node; run;
18771 +  /* create tables for all interval targets as well as all class targets */
18772 +  data tempinterval tempclass;
18773 +    merge tempoutstats temptargetused( rename=(target=targetused));
18774 +    by node;
18775 +    %if "&multipleTar" eq "Y" %then %do;
18776 +      if ((missing(Target)) OR (target=targetused ));
18777 +    %end;
18779 +    if tarlevel="INTERVAL" then output tempinterval;
18780 +    else output tempclass;
18781 +  run;
18783 +  /* iniitalize intTarget and classTarget flags */
18784 +  %let em_intNobs =0;
18785 +  %let em_classNobs = 0;
18786 +  %let em_intTarget= N;
18787 +  %let em_classTarget= N;
18789 +  proc sql;
18790 +    reset noprint;
18791 +    select count(*) into :em_intNobs from tempinterval;
18792 +  quit;
18793 +  proc sql;
18794 +    reset noprint;
18795 +    select count(*) into :em_classNobs from tempclass;
18796 +  quit;
18798 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18799 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18801 +  /* retrieve all information for interval targets */
18802 +  %if &em_intTarget eq Y %then %do;
18804 +    /* determine if leaf variable exists */
18805 +    %let dsid=%sysfunc(open(tempinterval,i));
18806 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18807 +    %let rc=%sysfunc(close(&dsid));
18809 +    proc transpose data=tempinterval
18810 +      %if &leafexists %then %do;
18811 +        (drop=leaf)
18812 +      %end;
18813 +      %if &validexist %then %do;
18814 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18815 +      %end;
18816 +      %else %do;
18817 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18818 +      %end;
18819 +      by node;
18820 +      id statname;
18821 +    run;
18822 +    data tempinterval;
18823 +      set tempinterval;
18824 +      if missing(N) then delete;
18825 +    run;
18826 +  %end;
18828 +  /* retrieve all information for class targets */
18829 +  %if &em_classTarget eq Y %then %do;
18830 +    proc sort data=tempclass; by node category; run;
18831 +    %if &validflag eq N %then %do;
18832 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18833 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18834 +    %end;
18835 +    %else %do;
18836 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18837 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18838 +    %end;
18839 +      set tempclass;
18841 +      %if &validflag eq N %then %do;
18842 +        %if "&adjusted" eq "N" %then %do;
18843 +          if statname="N" then output tempn;
18844 +        %end;
18845 +        %else %do;
18846 +          if statname="NPRIORS" then output tempn;
18847 +        %end;
18848 +        else if statname="PREDICTION" then output temppredict;
18849 +        else if statname="PROBABILITY" then output tempprob;
18850 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18851 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18852 +      %end;
18853 +      %else %do;
18854 +        %if "&adjusted" eq "N" %then %do;
18855 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18856 +        %end;
18857 +        %else %do;
18858 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18859 +        %end;
18860 +        else if statname="PREDICTION" then output temppredict;
18861 +        else if statname="PROBABILITY" then output tempprob;
18862 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18863 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18864 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18865 +      %end;
18866 +    run;
18869 +    /* determine if profit/loss exists in tempprofit */
18870 +    %let em_profitflag=0;
18871 +    %let em_lossflag=0;
18872 +    proc sql;
18873 +      reset noprint;
18874 +      select count(*) into :em_profitflag from tempprofit;
18875 +    quit;
18876 +    proc sql;
18877 +      reset noprint;
18878 +      select count(*) into :em_lossflag from temploss;
18879 +    quit;
18881 +    %if &validFlag eq Y %then %do;
18882 +      proc transpose data=tempn
18883 +        %if "&adjusted" eq "N" %then %do;
18884 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18885 +        %end;
18886 +        %else %do;
18887 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18888 +        %end;
18889 +        by node;
18890 +        id statname;
18891 +      run;
18892 +      %if &em_profitflag ne 0 %then %do;
18893 +        proc transpose data=tempprofit out=tempprofit;
18894 +          by node category;
18895 +          id statname ;
18896 +        run;
18897 +      %end;
18898 +      %if &em_lossflag ne 0 %then %do;
18899 +        proc transpose data=temploss out=temploss;
18900 +          by node category;
18901 +          id statname ;
18902 +        run;
18903 +      %end;
18904 +      data tempprob;
18905 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18906 +        by node
18907 +        %if &multipleTar eq Y %then %do;
18908 +          target
18909 +        %end;
18910 +        category;
18911 +      run;
18912 +    %end;
18914 +    /* store percentcorrect value */
18915 +    data temppredict;
18916 +      merge tempprob temppredict(in=_a);
18917 +      by node category;
18918 +      if _a then do;
18919 +        percentCorrect = statvalue;
18920 +        %if &validFlag eq Y %then %do;
18921 +          vpercentCorrect= vstatvalue;
18922 +        %end;
18923 +      end;
18924 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18925 +      %if &validFlag eq Y %then %do;
18926 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18927 +      %end;
18928 +      ;
18929 +      if missing(percentCorrect) then delete;
18930 +      drop target;
18931 +    run;
18933 +    /* build profittext */
18934 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18935 +      data tempprofittext(keep= node profittext profitloss);
18936 +        length profittext $800 profitloss 8.;
18937 +        retain profittext profitloss;
18939 +        merge tempprob
18940 +        %if &em_profitflag ne 0 %then %do;
18941 +          tempprofit
18942 +        %end;
18943 +        %else %if &em_lossflag ne 0 %then %do;
18944 +          temploss
18945 +        %end;
18946 +        ;
18947 +        by node category;
18949 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18950 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18951 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18952 +          %let profittype = ALL;
18953 +        %end;
18955 +        /* create the profitloss variable for nodecolor if selected */
18956 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18958 +        %if "&profittype" eq "ALL" %then %do;
18959 +          if strip(CATEGORY)="&targetEvent" then do;
18960 +            profitloss=statvalue;
18961 +          end;
18962 +          if first.node then do;
18963 +            %if &validFlag eq N %then %do;
18964 +             %if &em_profitflag ne 0 %then %do;
18965 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18966 +             %end;
18967 +             %if &em_lossflag ne 0 %then %do;
18968 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18969 +             %end;
18970 +            %end;
18971 +            %else %do;
18972 +             %if &em_profitflag ne 0 %then %do;
18973 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18973!+;
18974 +             %end;
18975 +             %if &em_lossflag ne 0 %then %do;
18976 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18977 +             %end;
18978 +            %end;
18979 +          end;
18980 +          else if last.node then do;
18981 +            %if &validFlag eq N %then %do;
18982 +             %if &em_profitflag ne 0 %then %do;
18983 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18984 +             %end;
18985 +             %if &em_lossflag ne 0 %then %do;
18986 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18987 +             %end;
18988 +             /*if CATEGORY="&targetEvent" then do;
18989 +               profitloss=statvalue;
18990 +             end;*/
18991 +            %end;
18992 +            %else %do;
18993 +             %if &em_profitflag ne 0 %then %do;
18994 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18994!+14.&EM_PROPERTY_SPLITPRECISION);
18995 +                if CATEGORY="&targetEvent" then do;
18996 +                 profitloss=ALTERNATIVE_PROFIT;
18997 +                end;
18998 +             %end;
18999 +             %if &em_lossflag ne 0 %then %do;
19000 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19000!+14.&EM_PROPERTY_SPLITPRECISION);
19001 +                if CATEGORY="&targetEvent" then do;
19002 +                  profitloss=ALTERNATIVE_LOSS;
19003 +                end;
19004 +             %end;
19005 +            %end;
19006 +            output;
19007 +          end;
19008 +          else do;
19009 +            %if &validFlag eq N %then %do;
19010 +             %if &em_profitflag ne 0 %then %do;
19011 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19012 +             %end;
19013 +             %if &em_lossflag ne 0 %then %do;
19014 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19015 +             %end;
19016 +            %end;
19017 +            %else %do;
19018 +             %if &em_profitflag ne 0 %then %do;
19019 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19019!+14.&EM_PROPERTY_SPLITPRECISION);
19020 +             %end;
19021 +             %if &em_lossflag ne 0 %then %do;
19022 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19022!+14.&EM_PROPERTY_SPLITPRECISION);
19023 +             %end;
19024 +            %end;
19025 +          end;
19026 +        %end;
19027 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19028 +          if strip(CATEGORY) = "&targetevent" then do;
19029 +            %if &validFlag eq N %then %do;
19030 +             %if &em_profitflag ne 0 %then %do;
19031 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19032 +             %end;
19033 +             %if &em_lossflag ne 0 %then %do;
19034 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19035 +             %end;
19036 +             profitloss=statvalue;
19037 +            %end;
19038 +            %else %do;
19039 +             %if &em_profitflag ne 0 %then %do;
19040 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19040!+;
19041 +                profitloss=ALTERNATIVE_PROFIT;
19042 +             %end;
19043 +             %if &em_lossflag ne 0 %then %do;
19044 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19045 +                profitloss=ALTERNATIVE_LOSS;
19046 +             %end;
19047 +            %end;
19048 +            output;
19049 +          end;
19050 +        %end;
19051 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19052 +          if strip(CATEGORY) = "&targetevent" then do;
19053 +            %if &validFlag eq N %then %do;
19054 +             profitloss=statvalue;
19055 +            %end;
19056 +            %else %do;
19057 +             %if &em_profitflag ne 0 %then %do;
19058 +                profitloss=ALTERNATIVE_PROFIT;
19059 +             %end;
19060 +             %if &em_lossflag ne 0 %then %do;
19061 +                profitloss=ALTERNATIVE_LOSS;
19062 +             %end;
19063 +            %end;
19064 +            output;
19065 +          end;
19066 +        %end;
19067 +      run;
19068 +    %end;
19070 +    data tempprob(keep= node probtext);
19071 +      length probtext $800;
19072 +      retain probtext;
19073 +      set tempprob ;
19074 +      by node;
19076 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19077 +      %let probtype = &EM_PROPERTY_TARGET;
19078 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19079 +        %let probtype = ALL;
19080 +      %end;
19082 +      %if "&probtype" eq "ALL" %then %do;
19083 +        if first.node then do;
19084 +          %if &validFlag eq N %then %do;
19085 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19086 +          %end;
19087 +          %else %do;
19088 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19089 +          %end;
19090 +        end;
19091 +        else if last.node then do;
19092 +          %if &validFlag eq N %then %do;
19093 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19094 +          %end;
19095 +          %else %do;
19096 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19097 +          %end;
19098 +          output;
19099 +        end;
19100 +        else do;
19101 +          %if &validFlag eq N %then %do;
19102 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19103 +          %end;
19104 +          %else %do;
19105 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19106 +          %end;
19107 +        end;
19108 +      %end;
19109 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19110 +        if strip(CATEGORY) = "&targetevent" then do;
19111 +          %if &validFlag eq N %then %do;
19112 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19113 +          %end;
19114 +          %else %do;
19115 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19116 +          %end;
19117 +          output;
19118 +        end;
19119 +      %end;
19120 +      %else %if "&probtype" eq "NONE" %then %do;
19121 +        if last.node then do;
19122 +          output;
19123 +        end;
19124 +      %end;
19125 +    run;
19126 +  %end;
19128 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19130 +  %let oldexists=0;
19131 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19132 +     data old_tree_plot;
19133 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19134 +        rename nodecolor=oldnodecolor;
19135 +     run;
19137 +     proc sort data=old_tree_plot;
19138 +        by node;
19139 +     run;
19141 +     %let oldexists=1;
19142 +  %end;
19144 +  data &EM_USER_TREE_PLOT;
19145 +    length textall $800;
19146 +    merge tempoutnodes temptargetused
19148 +    %if &em_intTarget eq Y %then %do;
19149 +      tempinterval
19150 +    %end;
19152 +    %if &em_classTarget eq Y %then %do;
19154 +      %if &validFlag eq N %then %do;
19155 +        tempn(rename=(statvalue=N))
19156 +      %end;
19157 +      %else %do;
19158 +        tempn
19159 +      %end;
19161 +      temppredict tempprob
19163 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19164 +        tempprofittext
19165 +      %end;
19166 +    %end;
19167 +    ;
19168 +    by node;
19170 +    /* build nodetext based on user selection */
19171 +    textall="";
19173 +    %if &em_intTarget eq Y %then %do;
19174 +    if tarlevel="INTERVAL" then do;
19175 +      /* Nodeid */
19176 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19177 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19178 +      %end;
19180 +      /* Target identifier if multiple targets are used */
19181 +      %if "&multipleTar" eq "Y" %then %do;
19182 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19183 +      %end;
19185 +      %if &validFlag eq Y %then %do;
19186 +         /* Column labels displayed in validflag eq Y only */
19187 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19188 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19188!+noquote ))";
19189 +         %end;
19191 +         /* Average values */
19192 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19193 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19194 +         %end;
19196 +         /* RASE */
19197 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19198 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19199 +         %end;
19201 +         /* Count */
19202 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19203 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19204 +         %end;
19205 +      %end;
19206 +      %else %do;
19207 +         /* Average values */
19208 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19209 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19210 +         %end;
19212 +         /* RASE */
19213 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19214 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19215 +         %end;
19217 +         /* Count */
19218 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19219 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19220 +         %end;
19221 +      %end;
19223 +      /* nodecolor */
19224 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19225 +        nodecolor=PREDICTION;
19226 +      %end;
19227 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19228 +        nodecolor=RASE;
19229 +      %end;
19230 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19231 +        nodecolor=1;
19232 +      %end;
19234 +    end;
19235 +    %end;
19236 +    %if &em_classTarget eq Y %then %do;
19237 +    if tarlevel^="INTERVAL" then  do;
19239 +      /* Nodeid */
19240 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19241 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19242 +      %end;
19243 +      /* Target identifier if multiple targets are used */
19244 +      %if "&multipleTar" eq "Y" %then %do;
19245 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19246 +      %end;
19248 +      /* Predicted values */
19249 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19250 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19251 +      %end;
19253 +      /* Column labels displayed in validflag eq Y only */
19254 +      %if "&ValidFlag" eq "Y" %then %do;
19255 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19256 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19256!+noquote ))";
19257 +        %end;
19258 +      %end;
19260 +      /* Target Values */
19261 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19262 +        textall=strip(textall)||"0A"x||strip(probtext);
19263 +      %end;
19265 +      /* include profit or loss for all target levels */
19266 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19267 +        textall=strip(textall)||"0A"x||strip(profittext);
19268 +      %end;
19270 +      %if &validFlag eq N %then %do;
19271 +        /* Percent Correct */
19272 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19273 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19274 +        %end;
19276 +         /* Count */
19277 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19278 +          %if "&adjusted" eq "N" %then %do;
19279 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19280 +          %end;
19281 +          %else %do;
19282 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19283 +          %end;
19284 +         %end;
19285 +      %end;
19286 +      %else %do;
19287 +        /* Percent Correct */
19288 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19289 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19290 +        %end;
19292 +         /* Count */
19293 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19294 +          %if "&adjusted" eq "N" %then %do;
19295 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19296 +          %end;
19297 +          %else %do;
19298 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19299 +          %end;
19300 +         %end;
19301 +      %end;
19303 +      /* nodecolor */
19304 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19305 +       %if &multipleTar ne Y %then %do;
19306 +        nodecolor=&predTarget;
19307 +       %end;
19308 +       %else %do;
19309 +         nodecolor=percentcorrect;
19310 +       %end;
19311 +      %end;
19312 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19313 +        nodecolor=percentcorrect;
19314 +      %end;
19315 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19316 +        nodecolor=1;
19317 +      %end;
19318 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19319 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19320 +          nodecolor=percentcorrect;
19321 +        %end;
19322 +        %else %do;
19323 +          nodecolor=profitloss;
19324 +        %end;
19325 +      %end;
19327 +    end;
19328 +    %end;
19329 +    %if &em_intTarget eq Y %then %do;
19330 +     drop  PREDICTION  TARGET TARLEVEL
19331 +     %if &ValidFlag eq Y %then %do;
19332 +         VPREDICTION
19333 +     %end;
19334 +     ;
19335 +    %end;
19336 +    %if &em_classTarget eq Y %then %do;
19337 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19338 +     %if &ValidFlag eq Y %then %do;
19339 +         VSTATVALUE
19340 +     %end;
19341 +     ;
19342 +    %end;
19344 +  run;
19346 +  /* add leaf index information to plotds - based on primary target only*/
19347 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19348 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19349 +      set &EM_USER_OUTSTATS;
19350 +      if ((statname="PROBABILITY"
19351 +      %if &validexist %then %do;
19352 +       or statname="VALID: PROBABILITY"
19353 +      %end;
19354 +      ) AND (CATEGORY="&TARGETEVENT")
19355 +      %if "&multipleTar" eq "Y" %then %do;
19356 +        AND (Target="%EM_TARGET")
19357 +      %end;
19358 +      );
19359 +    run;
19361 +    %if &validexist %then %do;
19362 +      proc sort data=tempprob; by node; run;
19363 +      %let vpredTarget = V%substr(&predTarget, 2);
19364 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19365 +         by node;
19366 +         id statname;
19367 +      run;
19368 +    %end;
19369 +  %end;
19370 +  %else %do;
19371 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19372 +      set &EM_USER_OUTSTATS;
19373 +      if ((statname="PREDICTION"
19374 +      %if &validexist %then %do;
19375 +       or statname="VALID: PREDICTION"
19376 +      %end;
19377 +      )
19378 +      %if "&multipleTar" eq "Y" %then %do;
19379 +        AND (Target="%EM_TARGET")
19380 +      %end;
19381 +      );
19382 +    run;
19383 +    %if &validexist %then %do;
19384 +      proc sort data=tempprob; by node; run;
19385 +      %let vpredTarget = V%substr(&predTarget, 2);
19386 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19387 +         by node;
19388 +         id statname;
19389 +      run;
19390 +    %end;
19391 +  %end;
19393 +  proc sort data=tempprob; by node; run;
19394 +  data tempoutnodes;
19395 +    merge tempoutnodes tempprob;
19396 +    by node;
19397 +  run;
19399 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19400 +  data tempnodes;
19401 +    retain traintotal validtotal;
19402 +    set tempnodes(where=(leaf ne . ));
19403 +    tprob=round(&predTarget, .01);
19404 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19405 +      percevent_train=round(tprob*100, .01);
19406 +    %end;
19407 +    %else %do;
19408 +      percevent_train=tprob;
19409 +    %end;
19411 +    perc_train=round((n/traintotal)*100, 0.01);
19412 +    /* leafwidth already has a *10 multiplier */
19413 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19415 +    %if &validexist %then %do;
19416 +      %let vpredTarget = V%substr(&predTarget,2);
19417 +      vprob=round(&vpredTarget, .01);
19418 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19419 +        percevent_valid=round(vprob*100, .01);
19420 +      %end;
19421 +      %else %do;
19422 +        percevent_valid=vprob;
19423 +      %end;
19424 +      perc_valid=round((vn/validtotal)*100, .01);
19425 +    %end;
19427 +    index=_N_;
19428 +    keep node index tprob perc_train percevent_train
19429 +    %if &validexist %then %do;
19430 +        vprob percevent_valid perc_valid
19431 +    %end;
19432 +    ;
19433 +  run;
19434 +  proc sort data=tempnodes; by node; run;
19435 +  data &EM_USER_TREE_PLOT;
19436 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19437 +    by node;
19438 +    if missing(node) then delete;
19439 +    %if &oldexists %then %do;
19440 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19441 +      drop oldnodecolor;
19442 +    %end;
19443 +    abovetext = compbl(abovetext);
19445 +    /* add variable labels */
19446 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19447 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19448 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19449 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19450 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19451 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19453 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19454 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19455 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19456 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19457 +          %end;
19458 +          %else %do;
19459 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19460 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19461 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19462 +          %end;
19463 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19465 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19466 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19467 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19468 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19469 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19470 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19471 +          %end;
19472 +          %else %do;
19473 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19474 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19475 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19476 +          %end;
19477 +    ;
19478 +  run;
19480 +  /* delete temporary tables */
19481 +  proc datasets lib=work nolist;
19482 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19483 +  run;
19485 +%mend em_tree_makePlotDs;
19489 +%macro em_tree_report;
19491 +   /* report properties */
19492 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19493 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19494 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19495 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19496 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19497 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19498 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19499 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19500 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19501 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19502 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19503 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19504 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19506 +   %let validexist=0;
19507 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19508 +     %let validexist=1;
19509 +   %end;
19511 +   /* determine if multiple targets will be processed */
19512 +   %let em_tree_multipleTargets=N;
19513 +   %let em_tree_numTarget=1;
19514 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19515 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19516 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19517 +         %let em_tree_multipleTargets=N;
19518 +      %end;
19519 +      %else %do;
19520 +        data _null_;
19521 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19522 +          if eof then
19523 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19524 +        run;
19526 +        %if &em_tree_numTarget gt 1 %then %do;
19527 +           %let em_tree_multipleTargets=Y;
19528 +        %end;
19529 +     %end;
19530 +   %end;
19532 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19534 +   /* variable importance */
19535 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19536 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19538 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19539 +     /* and the columns may not be generated                                                                                 */
19540 +     %let em_tree_cvexists=;
19541 +     %let em_tree_surrexists=.;
19542 +     data _null_;
19543 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19544 +       if eof then do ;
19545 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19546 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19547 +       end;
19548 +     run;
19550 +     data &EM_USER_OUTIMPORT;
19551 +         set &EM_USER_OUTIMPORT;
19552 +         /* format columns based on Precison value specified */
19553 +         format importance 15.&EM_PROPERTY_PRECISION
19554 +              %if &validexist %then %do;
19555 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19556 +              %end;
19557 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19558 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19559 +              %end;
19560 +         ;
19561 +     run;
19563 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19564 +     proc print data=&EM_USER_OUTIMPORT
19565 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19566 +          (where=((nrules>0) OR (nsurrogates>0)))
19567 +        %end;
19568 +        %else %do;
19569 +           (where=(nrules>0))
19570 +        %end;
19571 +        label noobs
19572 +        ;
19573 +     run;
19574 +     title10;
19576 +   %end;
19578 +   /* Sequence */
19579 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19580 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19581 +   data _null_ ;
19582 +      set &EM_USER_outseq (obs=2) end=eof ;
19583 +      if eof then do ;
19584 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19585 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19586 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19587 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19588 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19589 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19590 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19591 +      end;
19592 +    run;
19594 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19595 +      data &EM_USER_OUTSEQ;
19596 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19597 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19598 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19599 +           _XMISC_=_VMISC_
19600 +        %end;
19601 +        %if "&em_tree_aprof" ne "."  %then %do;
19602 +           _XAPROF_=_VAPROF_
19603 +           _XPROF_ = _VPROF_
19604 +        %end;
19605 +        %if "&em_tree_aloss" ne "."  %then %do;
19606 +           _XALOSS_=_VALOSS_
19607 +        %end;
19608 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19609 +           _XPASE_ = _VPASE_
19610 +           _XPMISC_ = _VPMISC_
19611 +        %end;
19613 +        ));
19614 +     %end;
19615 +     %else %do;
19616 +        set &EM_USER_OUTSEQ;
19617 +     %end;
19619 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19620 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19621 +            _MISC_   15.&EM_PROPERTY_PRECISION
19622 +         %end;
19623 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19624 +            _PASE_  15.&EM_PROPERTY_PRECISION
19625 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19626 +         %end;
19627 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19628 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19629 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19630 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19631 +            %end;
19632 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19633 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19634 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19635 +            %end;
19636 +         %end;
19637 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19638 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19639 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19640 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19641 +            %end;
19642 +         %end;
19643 +         %if "&em_tree_seq" ne "." %then %do;
19644 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19645 +         %end;
19646 +         %if "&em_tree_vseq" ne "." %then %do;
19647 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19648 +         %end;
19649 +         %if "&em_tree_aprof" ne "." %then %do;
19650 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19651 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19652 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19653 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19654 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19655 +           %end;
19656 +         %end;
19657 +         %else %if "&em_tree_aloss" ne "." %then %do;
19658 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19659 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19660 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19661 +           %end;
19662 +         %end;
19663 +      ;
19664 +    run;
19665 +   %end;
19667 +   /* Observation Based Importance */
19668 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19670 +      /* need to check for 0 obs */
19671 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19672 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19673 +      %let rc=%sysfunc(close(&dsid));
19675 +      %if &onobs %then %do;
19676 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19677 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19679 +         data &EM_USER_OUTOBSIMP;
19680 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19681 +           if _a;
19682 +           by _INPUT1_;
19683 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19684 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19685 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19686 +                   %end;
19687 +                   ;
19688 +         run;
19689 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19690 +      %end;
19691 +   %end;
19693 +  %end;
19695 +  /* create dataset to support tree diagram and icicle plot */
19696 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19697 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19699 +  /* display tree diagram */
19700 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19701 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19703 +  /* display icicle diagram */
19704 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19705 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19707 +  /* Leaf Statistics Plot */
19708 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19710 +  /* print leaf information to output window */
19711 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19713 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19714 +       by descending N;
19715 +     run;
19717 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19718 +     %local vn;
19719 +     data _null_;
19720 +       set t (obs=2) end=eof;
19721 +       if eof then do;
19722 +         call symput("vn", strip(put(vn, best.)));
19723 +       end;
19724 +     run;
19726 +     data t;
19727 +       set t;
19728 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19729 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19730 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19731 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19732 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19733 +       %end;
19734 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19735 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19736 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19737 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19738 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19739 +          %end;
19740 +       %end;
19741 +       ;
19742 +     run;
19744 +     /* determine if rase is found in t */
19745 +    %let dsid=%sysfunc(open(t,i));
19746 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19747 +    %let rc=%sysfunc(close(&dsid));
19749 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19750 +     proc print data=t noobs label;
19751 +       where tprob ne .;
19752 +       var node depth N tprob
19753 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19754 +         %if "&vn" ne "." %then %do;
19755 +           VN
19756 +         %end;
19757 +         vprob
19758 +       %end;
19759 +       %if &raseexists %then %do;
19760 +            RASE
19761 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19762 +              VRASE
19763 +            %end;
19764 +       %end;
19765 +       ;
19766 +     run;
19767 +     title10;
19768 +  %end;
19770 +  /* create plots that are done during training of node */
19771 +  /* display iterative plot, including reference line */
19772 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19773 +   /* %if &nleaves eq  %then %do; */
19774 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19775 +      data _null_;
19776 +        set &EM_USER_OUTTOPOLOGY end=eof;
19777 +        if eof then do;
19778 +          call symput('nleaves', LEAF);
19779 +        end;
19780 +      run;
19781 +   /* %end; */
19783 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19784 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19785 +  %end;
19787 +  /* display leaf statistics */
19788 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19790 +  /* stats by node if multiple targets = Y */
19791 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19792 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19793 +    data &EM_USER_OUTSTATS;
19794 +      set &EM_USER_OUTSTATS;
19796 +     * if STATNAME="TARGET" then delete;
19797 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19798 +      drop leaf;
19799 +    run;
19800 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19802 +  %end;
19803 +  %else %do;
19804 +    /* add outstats and outdescribe to spk but not results */
19805 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19806 +  %end;
19808 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 92 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: The data set EMWS2.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 143 observations read from the data set EMWS2.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 49 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 42 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 49 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 14 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPN.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 7 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19809
19810  *------------------------------------------------------------*;
19811  * End REPORT: Tree;
19812  *------------------------------------------------------------*;
 
19813  /* Reset EM Options */
19814  options formchar="|----|+|---+=|-/\<>*";
19815  options nocenter ls=256 ps=10000;
19816  goptions reset=all device=GIF NODISPLAY;
 
19817  proc sort data=WORK.EM_USER_REPORT;
19818  by ID VIEW;
19819  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19820  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19821  by NAME;
19822  run;
 
NOTE: There were 99 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19823  proc sort data=EMWS2.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19824  by NAME;
19825  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19826  data WORK.ASSESS_META;
19827  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19828  by NAME;
19829  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19830  data EM_temp_assessMeta;
19831  set EMWS2.Tree_CMeta_TRAIN;
19832  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19833  run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19834  data EM_temp_assessdata;
19835  set EMWS2.Tree_TRAIN(keep=
19836  F_RESPOND
19837  I_RESPOND
19838  P_RESPOND0
19839  P_RESPOND1
19840  Q_RESPOND0
19841  Q_RESPOND1
19842  R_RESPOND0
19843  R_RESPOND1
19844  U_RESPOND
19845  V_RESPOND0
19846  V_RESPOND1
19847  _WARN_
19848  RESPOND
19849  );
19850  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24135   data EM_temp_assessMeta;
24136   set EMWS2.Tree_CMeta_TRAIN;
24137   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24138   run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24139   data EM_temp_assessdata;
24140   set EMWS2.Tree_VALIDATE(keep=
24141   F_RESPOND
24142   I_RESPOND
24143   P_RESPOND0
24144   P_RESPOND1
24145   Q_RESPOND0
24146   Q_RESPOND1
24147   R_RESPOND0
24148   R_RESPOND1
24149   U_RESPOND
24150   V_RESPOND0
24151   V_RESPOND1
24152   _WARN_
24153   RESPOND
24154   );
24155   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 16121 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS2.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28449   %let _cn = %sysfunc(getoption(CENTER));
28450   options nocenter;
28451   proc print data=EMWS2.Tree_EMREPORTFIT noobs label;
28452   var STAT LABEL TRAIN
28453   VALIDATE
28454   ;
28455   by TARGET TARGETLABEL;
28456   title9 ' ';
28457   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28458   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28459   title10;
28460   options &_cn;
 
28461   proc sort data=EMWS2.Tree_EMCLASSIFICATION nothreads;
28462   by DATAROLE TARGET TARGETLABEL;
28463   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS2.TREE_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28464   %let _cn = %sysfunc(getoption(CENTER));
28465   options nocenter;
28466   proc print data=EMWS2.Tree_EMCLASSIFICATION noobs label;
28467   var from into pct_row pct_col count percent
28468   ;
28469   by DATAROLE TARGET TARGETLABEL;
28470   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28471   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28472   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28473   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28474   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28475   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28476   where _TYPE_='PREDICTION';
28477   title9 ' ';
28478   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28479   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28480   title9;
28481   title10;
28482   options &_cn;
 
28483   %let _cn = %sysfunc(getoption(CENTER));
28484   options nocenter;
28485   data EMWS2.Tree_EMEVENTREPORT;
28486   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28486 !  8;
28487   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28487 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28487 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28487 ! FALSEEVENT
28488   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28488 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28488 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28489      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28490   FALSEEVENT=0;
28491   FALSENEVENT=0;
28492   TRUEEVENT=0;
28493   TRUENEVENT=0;
28494   set EMWS2.Tree_EMEVENTREPORT;
28495   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The data set EMWS2.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28496   proc print data=EMWS2.Tree_EMEVENTREPORT noobs label;
28497   title9 ' ';
28498   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28499   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28500   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28501   title10;
28502   options &_cn;
 
28503   proc datasets library=EMWS2 nolist;
28504   modify Tree_EMRANK;
28505   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28506   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28507   run;
 
NOTE: MODIFY was successful for EMWS2.TREE_EMRANK.DATA.
28508   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28509   %let _cn = %sysfunc(getoption(CENTER));
28510   options nocenter;
28511   proc print data=EMWS2.Tree_EMRANK label noobs;
28512   var
28513   decile gain lift liftc resp respc N _meanP_;
28514   by
28515   notsorted DATAROLE
28516   notsorted TARGET
28517   notsorted TARGETLABEL
28518   ;
28519   title9 ' ';
28520   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28521   run;
 
NOTE: There were 40 observations read from the data set EMWS2.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28522   title10;
28523   options &_cn;
 
28524   proc datasets library=EMWS2 nolist;
28525   modify Tree_EMSCOREDIST;
28526   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28527   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28528   run;
 
NOTE: MODIFY was successful for EMWS2.TREE_EMSCOREDIST.DATA.
28529   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
