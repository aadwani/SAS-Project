*------------------------------------------------------------*
User:                aadwani
Date:                December 08, 2017
Time:                02:29:34
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 08, 2017
Time:                02:29:24
*------------------------------------------------------------*
14716  proc freq data=EMWS2.Tree2_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree2META;
14718  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.Tree2META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS2.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=2;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree2_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14776  title10;
 
"No decisions defined for target "RESPOND"."
14777  proc print data = EMWS2.Ids_RESPOND_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 7 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15328  *------------------------------------------------------------*;
15329  * Tree2: Generation of macros and macro variables;
15330  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15331  *------------------------------------------------------------*;
 
15332  %let EMEXCEPTIONSTRING=;
15333  *------------------------------------------------------------*;
15334  * TRAIN: Tree2;
15335  *------------------------------------------------------------*;
15336  %let EM_ACTION = TRAIN;
15337  %let syscc = 0;
15338  %macro main;
15339
15340    %if %upcase(&EM_ACTION) = CREATE %then %do;
15341      filename temp catalog 'sashelp.emmodl.tree_create.source';
15342      %include temp;
15343      filename temp;
15344
15345      %em_tree_create;
15346    %end;
15347
15348     %else
15349     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15350
15351         filename temp catalog 'sashelp.emmodl.tree_train.source';
15352         %include temp;
15353         filename temp;
15354         %em_tree_train;
15355     %end;
15356
15357    %else
15358    %if %upcase(&EM_ACTION) = SCORE %then %do;
15359      filename temp catalog 'sashelp.emmodl.tree_score.source';
15360      %include temp;
15361      filename temp;
15362
15363      %em_tree_score;
15364
15365    %end;
15366
15367    %else
15368    %if %upcase(&EM_ACTION) = REPORT %then %do;
15369
15370         filename temp catalog 'sashelp.emmodl.tree_report.source';
15371         %include temp;
15372         filename temp;
15373
15374         %em_tree_report;
15375     %end;
15376
15377    %else
15378    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15379
15380         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15381         %include temp;
15382         filename temp;
15383         %EM_TREE_OPENTREEVIEWER;
15384
15385     %end;
15386
15387    %else
15388    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15389
15390         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15391         %include temp;
15392         filename temp;
15393         %EM_TREE_CLOSETREEVIEWER;
15394
15395     %end;
15396
15397
15398     %doendm:
15399  %mend main;
15400
15401  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15403 +%macro em_tree_train;
15405 +   %if &EM_IMPORT_DATA eq %then %do;
15406 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15407 +       %put &em_codebar;
15408 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15409 +       %put &errormsg;
15410 +       %put &em_codebar;
15411 +       %goto doendm;
15412 +   %end;
15413 +   %else
15414 +       %let EMEXCEPTIONSTRING =;
15416 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15417 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15418 +        %put &em_codebar;
15419 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15420 +        %put &errormsg;
15421 +        %put &em_codebar;
15422 +        %goto doendm;
15423 +   %end;
15425 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15426 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15427 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15428 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15429 +        %put &em_codebar;
15430 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15431 +        %put &errormsg;
15432 +        %put &em_codebar;
15433 +        %goto doendm;
15434 +   %end;
15436 +   /* Initialize property macro variables */
15437 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15438 +   %include temp;
15439 +   filename temp;
15441 +   %EM_SetProperties;
15443 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15444 +   %EM_GETNAME(key=EMTREE, type=DATA);
15445 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15446 +     /* if import eq Y and no importtable defined, throw an exception */
15447 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15448 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15449 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15450 +         %put &em_codebar;
15451 +         %put &errmsg;
15452 +         %put &em_codebar;
15453 +         %goto doendm;
15454 +      %end;
15455 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15456 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15457 +         %put &em_codebar;
15458 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15459 +         %put &errormsg;
15460 +         %put &em_codebar;
15461 +         %goto doendm;
15462 +      %end;
15463 +      %else %do;
15464 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15465 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15466 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15467 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15468 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15469 +         %let dsid = %sysfunc(close(&dsid));
15470 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15471 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15472 +            %put &em_codebar;
15473 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15474 +            %put &errormsg;
15475 +            %put &em_codebar;
15476 +            %goto doendm;
15477 +         %end;
15478 +      %end;
15479 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15480 +         proc delete data=&EM_USER_EMTREE;
15481 +         run;
15482 +      %end;
15483 +   %end;
15484 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15485 +      proc delete data=&EM_USER_EMTREE;
15486 +      run;
15487 +   %end;
15489 +   /* load tree macros */
15490 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15491 +   %include temp;
15492 +   filename temp;
15494 +   /* data sets */
15495 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15496 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15497 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15499 +   /* files */
15500 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15502 +   /* check actual num of target levels */
15503 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15504 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15505 +                              nLevel=_nTargetLevel );
15506 +      %if &_nTargetLevel  > 2 %then %do;
15507 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15508 +        %put &em_codebar;
15509 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15510 +        %put &errormsg;
15511 +        %put &em_codebar;
15512 +        %goto doendm;
15513 +      %end;
15514 +   %end;
15516 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15517 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15518 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15519 +        %let costflag=0;
15520 +        data _null_;
15521 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15522 +          if eof then call symput("costflag", _N_);
15523 +        run;
15524 +        %if &costflag gt 0 %then %do;
15525 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15526 +          %put &em_codebar;
15527 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15528 +          %put &errormsg;
15529 +          %put &em_codebar;
15530 +          %goto doendm;
15531 +       %end;
15532 +     %end;
15533 +   %end;
15535 +   /* determine if multiple targets will be processed */
15536 +   %let em_tree_multipleTargets=N;
15537 +   %let em_tree_numTarget = 1;
15538 +   %let em_tree_targetVars=;
15540 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15541 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15542 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15543 +         %let em_tree_multipleTargets=N;
15544 +      %end;
15545 +      %else %do;
15546 +         /* create macro array of targets  */
15547 +         data _null_;
15548 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15549 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15550 +           if eof then
15551 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15552 +        run;
15554 +        %if &em_tree_numTarget gt 1 %then %do;
15555 +           %let em_tree_multipleTargets=Y;
15556 +        %end;
15557 +      %end;
15558 +   %end;
15560 +   /* create view of only necessary variable for performance reasons */
15561 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15562 +   data &tempData / view=&tempData;
15563 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15564 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15565 +       %EM_TARGET
15566 +     %end;
15567 +     %else %do;
15568 +       %if &em_tree_numTarget ne 0 %then %do;
15569 +         %do i=1 %to &em_tree_numTarget;
15570 +            &&em_tree_targetVars&i
15571 +         %end;
15572 +       %end;
15573 +     %end;
15574 +     );
15575 +   run;
15577 +   /* run Tree procedure */
15578 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15580 +   /* Check return code and throw exception if error is detected */
15581 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15582 +   %if &syserr %then %do;
15583 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15584 +     %goto doendm;
15585 +   %end;
15587 +   /* add decision score code if multiple targets are processed */
15588 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15589 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15590 +   %end;
15592 +   /* create outfit dataset if multiple score statements have been executed */
15593 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15595 +   /* create English Rules */
15596 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15597 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15598 +       %em_tree_makeEnglishRules;
15600 +       /* English Rules */
15601 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15603 +     %end;
15604 +   filename x;
15606 +   %doendm:
15607 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15608 +%macro EM_SetProperties;
15610 +   /* train properties */
15611 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15653 +   /* properties for interactive sample */
15654 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15659 +   /* report properties */
15660 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15674 +   /* score properties */
15675 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15678 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15680 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15681 +  %global &nLevel;
15682 +  proc dmdb batch data=&indata
15683 +    classout=_tmp_dmdbout;
15684 +    class &target;
15685 +  run;
15686 +  data _tmp_dmdbout;
15687 +    set _tmp_dmdbout;
15688 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15689 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15690 +  run;
15691 +  data _null_;
15692 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15693 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15694 +    %let dsid = %sysfunc(close(&dsid));
15695 +     call symput("&nLevel", put(&_obs, Best12.));
15696 +  run;
15698 +  proc datasets lib=work nolist;
15699 +     delete _tmp_dmdbout;
15700 +  run;
15701 +  quit;
15702 +%Mend EM_CheckBinaryTargetLevel;
15705 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15707 +  /* determine the number of obs in training data */
15708 +  proc sql;
15709 +    reset noprint;
15710 +    select count(*) into :em_nobs from &indata;
15711 +  quit;
15713 +  /* determine the number of input variables */
15714 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15715 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15717 +  /* retrieve targetEvent from decmeta */
15718 +  %let targetEvent=;
15719 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15720 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15721 +      data _null_;
15722 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15723 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15724 +      run;
15725 +    %end;
15726 +  %end;
15728 +  /* create targetTable if multipleTar eq Y */
15729 +  data temptarget;
15730 +    set &EM_DATA_VARIABLESET;
15731 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15732 +  run;
15734 + /* data sets */
15735 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15736 + %EM_GETNAME(key=EMTREE,        type=DATA);
15737 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15738 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15739 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15740 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15741 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15742 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15743 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15744 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15746 + /* files */
15747 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15748 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15750 + /* turn on pmml if requested */
15751 + %let nnpmml=0;
15752 + %if %symexist(EM_PMML) %then %do;
15753 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15754 +       %let nnpmml=1;
15756 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15757 +%end;
15759 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15761 + %if &nnpmml or &numClassTarget %then %do;
15763 +       /* create dmdb needed for pmml generation */
15764 +       %let tree_maxlevel = 512;
15765 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15766 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15767 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15768 +         %end;
15769 +       %end;
15770 +       %if &tree_maxlevel gt 0 %then %do;
15771 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15772 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15773 +       %end;
15775 +       %let targetOrderString =;
15776 +       %let targetString = ;
15777 +       data _null_;
15778 +          length orderString nameString $10000;
15779 +          retain orderString nameString;
15780 +          set &em_data_variableset end=eof;
15781 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15782 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15783 +          %end;
15784 +          %else %do;
15785 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15786 +          %end;          select(order);
15787 +            when('')        order ='DESC';
15788 +            when('FMTASC')  order='ASCFMT';
15789 +            when('FMTDESC') order='DESFMT';
15790 +            otherwise;
15791 +          end;
15792 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15793 +          nameString = trim(nameString)!!' '!!trim(NAME);
15795 +          if eof then do;
15796 +             call symput('targetOrderString', trim(orderString));
15797 +             call symput('targetString', trim(nameString));
15798 +          end;
15799 +       run;
15801 +       %let arborkluge= "work._treeDMDB";
15803 +       proc dmdb batch data=&indata
15804 +       %if &nnpmml %then %do;
15805 +           PMML
15806 +       %end;
15807 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15810 +   %if &nnpmml %then %do;
15811 +        %if "%EM_ID" ne "" %then %do;
15812 +          id %EM_ID;
15813 +        %end;
15814 +        %if &EM_NUM_CLASS gt 0 %then %do;
15815 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15816 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15817 +               &targetOrderString;
15818 +        %end;
15819 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15820 +          var %EM_INTERVAL;
15821 +        %end;
15822 +        target &targetString %EM_INTERVAL_TARGET;
15823 +        %if "%EM_FREQ" ne "" %then %do;
15824 +          freq %EM_FREQ;
15825 +        %end;
15826 +  %end;
15827 +  %else %do;
15828 +      class  &targetOrderString;
15829 +      target &targetString %EM_INTERVAL_TARGET;
15830 +  %end;
15831 +       run;
15832 +       quit;
15834 +       proc datasets lib=work nolist;
15835 +          delete classout varout;
15836 +       run;
15837 +       quit;
15839 +    %end;
15840 + %end;
15842 + /* run Arbor procedure */
15843 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15844 +  proc arbor data=&INDATA
15846 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15847 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15848 +  %end;
15850 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15851 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15852 +  %end;
15854 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15855 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15856 +  %end;
15858 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15859 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15860 +  %end;
15862 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15863 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15864 +  %end;
15866 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15867 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15868 +  %end;
15869 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15870 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15871 +  %end;
15872 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15873 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15874 +  %end;
15876 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15877 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15878 +      alpha = &EM_PROPERTY_SIGLEVEL
15879 +    %end;
15880 +  %end;
15882 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15883 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15884 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15885 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15886 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15888 +        padjust =
15889 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15890 +          &chaid
15891 +        %end;
15892 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15893 +          DEPTH
15894 +        %end;
15895 +      %end;
15896 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15897 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15898 +         pvars = &num_inputs
15899 +      %end;
15900 +    %end;
15901 +  %end;
15902 +  %else %do;
15903 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15904 +         padjust = NONE
15905 +      %end;
15906 +  %end;
15908 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15909 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15910 +    Maxrules = &num_nrules
15911 +  %end;
15913 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15914 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15915 +    Maxsurrs = &num_nsurrs
15916 +  %end;
15918 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15919 +     Missing=&EM_PROPERTY_MISSINGVALUE
15920 +  %end;
15922 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15923 +     USEVARONCE
15924 +  %end;
15926 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15927 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15928 +  %end;
15931 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15932 +    event = "&targetEvent"
15933 +  %end;
15935 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15936 +     DECSEARCH
15937 +  %end;
15939 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15940 +     PRIORSSEARCH
15941 +  %end;
15943 +  %if &arbor_1 ne %then %do;
15944 +    &arbor_1
15945 +  %end;
15947 +  %if &em_arbor ne %then %do;
15948 +     &em_arbor
15949 +  %end;
15950 +  ;
15951 + %end;
15952 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15953 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15954 +       interact;
15955 + %end;
15956 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15957 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15958 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15959 +    %put &em_codebar;
15960 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15961 +    %put &errormsg;
15962 +    %put &em_codebar;
15963 +    %goto doendm;
15964 +   %end;
15965 +   %else %do;
15966 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15967 +       interact;
15968 +   %end;
15969 + %end;
15971 + %else %do;
15972 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15973 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15974 +    %put &em_codebar;
15975 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15976 +    %put &errormsg;
15977 +    %put &em_codebar;
15978 +    %goto doendm;
15979 +   %end;
15980 +   %else %do;
15981 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15982 +        interact;
15983 +   %end;
15984 + %end;
15986 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15987 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15988 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15989 +    %end;
15991 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15992 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15993 +    %end;
15995 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15996 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15997 +    %end;
15999 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16000 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16001 +    %end;
16003 +    %if "%EM_FREQ" ne "" %then %do;
16004 +       freq %EM_FREQ;
16005 +    %end;
16007 +    %if "&multipleTar" eq "Y" %then %do;
16008 +       /* cycle through all target vars in variableset */
16009 +       %let tdsid = %sysfunc(open(temptarget));
16010 +       %if &tdsid %then %do;
16011 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16012 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16013 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16014 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16015 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16016 +             target &var / level = &lvl
16017 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16018 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16019 +             %end;
16020 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16021 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16022 +             %end;
16023 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16024 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16025 +             %end;
16026 +          %end;
16027 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16028 +       %end;
16029 +       useTarget variable = %EM_TARGET;
16030 +    %end;
16031 +    %else %do;
16032 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16033 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16034 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16035 +      %end;
16036 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16037 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16038 +      %end;
16039 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16040 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16041 +      %end;
16042 +    %end;
16044 +    %if "&multipleTar" eq "N" %then %do;
16045 +      &EM_DEC_STATEMENT;
16046 +    %end;
16048 +    Performance &EM_PROPERTY_PERFORMANCE
16049 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16050 +      nodesize=&EM_PROPERTY_NODESAMPLE
16051 +    %end;
16052 +    ;
16054 +    %if "&intFlag" eq "Y" %then %do;
16055 +       INTERACT Largest;
16056 +       Train maxnewdepth=0;
16057 +    %end;
16059 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16060 +         Assess
16061 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16062 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16063 +              %put &em_codebar;
16064 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16065 +              %put &errormsg;
16066 +              %put &em_codebar;
16067 +            %end;
16068 +            %else %do;
16069 +               Validata=&EM_IMPORT_VALIDATE
16070 +            %end;
16071 +         %end;
16072 +         %else %do;
16073 +           NoValidata
16074 +         %end;
16075 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16076 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16077 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16078 +               %if &dsid %then %do;
16079 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16080 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16081 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16082 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16083 +                   %else %do;
16084 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16085 +                      %else %let measure= MISC;
16086 +                   %end;
16087 +                 %end;
16088 +               %end;
16089 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16090 +            %end;
16091 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16092 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16093 +                 %let measure=ASE;
16094 +              %end;
16095 +              %else %do;
16096 +                 %let measure=MISC;
16097 +              %end;
16098 +            %end;
16099 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16100 +              %let measure=ASE;
16101 +            %end;
16102 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16103 +               %let measure = LIFT;
16104 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16105 +               %if &dsid %then %do;
16106 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16107 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16108 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16109 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16110 +                 %end;
16111 +               %end;
16112 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16113 +            %end;
16114 +            measure=&measure
16115 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16116 +               event = "&targetEvent"
16117 +            %end;
16118 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16119 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16120 +            %end;
16121 +         %end;
16122 +         %if "&multipleTar" eq "N" %then %do;
16123 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16124 +               CV
16125 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16126 +                 CVNITer = &EM_PROPERTY_CVNITER
16127 +               %end;
16128 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16129 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16130 +               %end;
16131 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16132 +                 CVSeed = &EM_PROPERTY_CVSEED
16133 +               %end;
16134 +            %end;
16135 +         %end;
16136 +       %end;
16137 +      ;
16139 +      %if "&intFlag" ne "Y" %then %do;
16140 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16141 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16142 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16143 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16145 +          SUBTREE &subtree
16146 +          %if "&subtree" eq "NLEAVES" %then %do;
16147 +            =&EM_PROPERTY_NSUBTREE
16148 +          %end;
16149 +          ;
16150 +        %end;
16152 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16153 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16154 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16155 +          %end;
16156 +       %end;
16157 +      %end;
16158 + %end;
16161 + MakeMacro nleaves = nleaves;
16162 + save
16163 + %if "&EM_USER_EMTREE" ne "" %then %do;
16164 +   MODEL=&EM_USER_EMTREE
16165 + %end;
16166 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16167 +   SEQUENCE=&EM_USER_OUTSEQ
16168 + %end;
16169 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16170 +   IMPORTANCE=&EM_USER_OUTIMPORT
16171 + %end;
16172 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16173 +   NODESTAT=&EM_USER_OUTNODES
16174 + %end;
16175 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16176 +   SUMMARY=&EM_USER_OUTSUMMARY
16177 + %end;
16178 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16179 +   STATSBYNODE=&EM_USER_OUTSTATS
16180 + %end;
16181 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16182 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16183 + %end;
16184 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16185 +   Pathlistnonmissing=&EM_USER_OUTPATH
16186 + %end;
16187 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16188 +   RULES = &EM_USER_OUTRULES
16189 + %end;
16190 + ;
16192 + %if "&intFlag" ne "Y" %then %do;
16194 +   %let lookupString = ;
16195 +   %if ^%symexist(EM_OPTION) %then
16196 +      %let EM_OPTION=;
16198 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16199 +      %let lookupString = LOOKUP=SELECT;
16200 +   %end;
16202 +   %let codetext=;
16203 +   %let norescodetxt=;
16205 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16206 +     %let codetext=&codetext DUMMY;
16207 +     %let norescodetxt=&norescodetxt DUMMY;
16208 +   %end;
16209 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16210 +     %let codetext=&codetext NOLEAFID;
16211 +     %let norescodetxt=&norescodetxt NOLEAFID;
16212 +   %end;
16213 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16214 +     %let norescodetxt=&norescodetxt NOPRED;
16215 +   %end;
16217 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16218 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16220 +   %if &nnpmml %then %do;
16221 +     code pmml;
16222 +   %end;
16224 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16225 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16226 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16227 +   %end;
16228 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16229 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16230 +   %end;
16231 + %end;
16233 + run;
16234 + quit;
16236 + /*%em_checkerror(); */
16237 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16238 +   /* Delete DMDB catalog */
16239 +   proc datasets lib=work nolist;
16240 +       delete _treeDMDB / mt=cat;
16241 +  run;
16242 +  %end;
16244 + %if &nnpmml %then %do;
16245 +    ods pmml close;
16246 + %end;
16248 +  %doendm:
16250 +%mend em_tree_runTreeProcedure;
16252 +%macro em_tree_createFitStats( multipleTar= );
16255 +  /* create targetTable is multipleTar eq Y */
16256 +  data temptarget;
16257 +    set &EM_DATA_VARIABLESET;
16258 +    where ROLE="TARGET";
16259 +  run;
16261 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16262 +   data &EM_USER_EMOUTFIT;
16263 +     length target $32;
16264 +     merge work.fit_train
16265 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16266 +       work.fit_valid
16267 +     %end;
16268 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16269 +       work.fit_test
16270 +     %end;
16271 +     ;
16272 +     %if "&multipleTar" eq "N" %then %do;
16273 +       target="%EM_TARGET";
16274 +     %end;
16275 +     %else %do;
16276 +       target = _TARGET_;
16277 +     %end;
16278 +     drop _NW_ _SUMW_
16279 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16280 +        _VSUMW_
16281 +     %end;
16282 +     ;
16283 +   run;
16285 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16286 +     proc datasets library=work nolist;
16287 +       delete fit_valid;
16288 +     run;
16289 +   %end;
16290 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16291 +     proc datasets library=work nolist;
16292 +       delete fit_test;
16293 +     run;
16294 +   %end;
16296 +%mend em_tree_createFitStats;
16299 +%macro em_tree_makeEnglishRules;
16301 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16302 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16304 +  /* verify that necessary tables exist and if not, skip processing */
16305 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16306 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16307 +    %goto doendm;
16308 +  %end;
16309 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16310 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16311 +    %goto doendm;
16312 +  %end;
16314 +  /* determine length of variable in outpath dataset */
16315 +  %let vlength= ;
16316 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16317 +  %if &dsid ne %then %do;
16318 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16319 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16320 +  %end;
16321 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16323 +  data tempoutpath;
16324 +    length varname $&vlength;
16325 +    retain varname;
16326 +    set &EM_USER_OUTPATH;
16328 +    if ^missing(variable) then varname=variable;
16329 +    else if ^missing(var_name) then varname=var_name;
16330 +    output;
16331 +  run;
16333 +  /* create an array of generated predicted variable names */
16334 +  %let tree_pred_vars = ;
16335 +  %let tree_pred_label = ;
16336 +  %let numpred= 0;
16337 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16339 +    data _null_;
16340 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16341 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16342 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16343 +     if eof then
16344 +       call symput('numpred', strip(put(_N_, BEST.)));
16345 +    run;
16346 +  %end;
16348 +  /* determine if NPRIORS exists in outnodes  */
16349 +  %local nprior_flag;
16350 +  data _null_;
16351 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16352 +    if eof then do;
16353 +      call symput('nprior_flag', strip(put(npriors, best.)));
16354 +    end;
16355 +  run;
16357 +  proc sort data=tempoutpath; by node; run;
16358 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16360 +  data tempoutpath;
16361 +    merge tempoutpath(in=_a) outnodes(keep= node
16362 +    %if "&nprior_flag" ne "." %then %do;
16363 +      NPRIORS
16364 +    %end;
16365 +    %else %do;
16366 +      N
16367 +    %end;
16368 +    %if &numpred gt 0 %then %do;
16369 +      %do i=1 %to &numpred;
16370 +        &&tree_pred_vars&i
16371 +      %end;
16372 +    %end;
16373 +    );
16374 +    by node;
16375 +    if _a;
16376 +  run;
16378 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16380 +  data _null_;
16381 +    file x;
16382 +    set tempoutpath;
16383 +    by node descending varname;
16384 +    retain origvar oldnode string;
16385 +    length origvar $32 oldnode 8 string $200;
16387 +    if _N_ = 1 then do;
16388 +      origvar = varname;
16389 +      oldnode = node;
16390 +    end;
16392 +    if first.node then do;
16393 +       put "&EM_CODEBAR";
16394 +       put " Node = " node;
16395 +       put "&EM_CODEBAR";
16396 +    end;
16398 +      if first.varname then do;
16399 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16400 +            if MISSING(CHARACTER_VALUE) then do;
16401 +             if NUMERIC_VALUE ne .  then do;
16402 +              if ^first.node then do;
16403 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16404 +              end;
16405 +              else do;
16406 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16407 +              end;
16408 +             end;
16409 +            end;
16410 +            else do;
16411 +              if ^first.node then do;
16412 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16413 +              end;
16414 +              else do;
16415 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16416 +              end;
16417 +             end;
16418 +         end;
16419 +         else if RELATION in ("=") then do;
16420 +            if ^first.node then do;
16421 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16422 +            end;
16423 +            else do;
16424 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16425 +            end;
16426 +         end;
16427 +         else if RELATION in ("ISMISSING") then do;
16428 +            if ^first.node then do;
16429 +              string = " AND "|| strip(varname) || " equals Missing";
16430 +            end;
16431 +            else do;
16432 +              string = "if "|| strip(varname) ||" equals Missing";
16433 +            end;
16434 +         end;
16435 +         else if RELATION in ("ISNOTMISSING") then do;
16436 +            if ^first.node then do;
16437 +              string = " AND "|| strip(varname) || " equals All Values";
16438 +            end;
16439 +            else do;
16440 +              string = "if "|| strip(varname) ||" equals All Values";
16441 +            end;
16442 +         end;
16443 +         if ^missing(varname) then origvar = varname;
16444 +         oldnode=node;
16446 +      end;
16447 +      else do;
16448 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16449 +          if MISSING(CHARACTER_VALUE) then do;
16450 +           if  NUMERIC_VALUE ne .  then do;
16451 +            if ^MISSING(string) then
16452 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16453 +            else
16454 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16455 +           end;
16456 +          end;
16457 +          else do;
16458 +            if ^MISSING(string) then
16459 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16460 +            else
16461 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16462 +          end;
16464 +         end;
16465 +         else if RELATION in ("=") then do;
16466 +           string = strip(string)||", "||strip(character_value);
16467 +         end;
16468 +         else if RELATION in ("ISMISSING") then do;
16470 +         end;
16471 +         if ^missing(varname) then origvar = varname;
16472 +         oldnode=node;
16473 +      end;
16474 +      if last.varname then do;
16475 +         if RELATION in ("ISMISSING") then do;
16476 +           if ^first.varname then do;
16477 +             string = strip(string) || " or MISSING";
16478 +           end;
16479 +         end;
16480 +         put string;
16481 +         if ^missing(varname) then origvar = varname;
16482 +         oldnode=node;
16483 +      end;
16485 +      if last.node then do;
16486 +         put "then ";
16487 +         put " Tree Node Identifier   = " node;
16489 +         %if "&nprior_flag" ne "." %then %do;
16490 +           put " Number of Observations = " NPRIORS;
16491 +         %end;
16492 +         %else %do;
16493 +           put " Number of Observations = " N;
16494 +         %end;
16496 +         %if &numpred gt 0 %then %do;
16497 +           %do i=1 %to &numpred;
16498 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16499 +           %end;
16500 +         %end;
16502 +         put " ";
16503 +         if ^missing(varname) then origvar = varname;
16504 +         oldnode=node;
16505 +      end;
16507 +  run;
16509 +  proc datasets lib=work nolist;
16510 +    delete tempoutpath outnodes;
16511 +  run;
16513 +  %doendm:
16514 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS2.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596690 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633961984 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 72253984 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 92 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_EMTREE has 2298 observations and 4 variables.
NOTE: The data set EMWS2.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS2.TREE2_OUTPATH has 55 observations and 7 variables.
NOTE: The data set EMWS2.TREE2_OUTRULES has 387 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS2.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS2.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\TREEFLOW.sas opened.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           3.81 seconds
      cpu time            3.53 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.84 seconds
      cpu time            3.56 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set EMWS2.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=08Dec2017:02:29:29,
      Create Time=08Dec2017:02:29:29
 
NOTE: 94 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16516
16517  *------------------------------------------------------------*;
16518  * End TRAIN: Tree2;
16519  *------------------------------------------------------------*;
 
16520  *------------------------------------------------------------*;
16521  * Close any missing semi colons;
16522  *------------------------------------------------------------*;
16523  ;
16524  ;
16525  ;
16526  ;
16527  quit;
16528  *------------------------------------------------------------*;
16529  * Close any unbalanced quotes;
16530  *------------------------------------------------------------*;
16531  /*; *"; *'; */
16532  ;
16533  run;
16534  quit;
16535  /* Reset EM Options */
16536  options formchar="|----|+|---+=|-/\<>*";
16537  options nocenter ls=256 ps=10000;
16538  goptions reset=all device=GIF NODISPLAY;
 
16539  proc sort data=WORK.EM_USER_REPORT;
16540  by ID VIEW;
16541  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 08, 2017
Time:                02:29:30
*------------------------------------------------------------*
16643  %let EMEXCEPTIONSTRING=;
16644  *------------------------------------------------------------*;
16645  * SCORE: Tree2;
16646  *------------------------------------------------------------*;
16647  %let EM_ACTION = SCORE;
16648  %let syscc = 0;
16649  %macro main;
16650
16651    %if %upcase(&EM_ACTION) = CREATE %then %do;
16652      filename temp catalog 'sashelp.emmodl.tree_create.source';
16653      %include temp;
16654      filename temp;
16655
16656      %em_tree_create;
16657    %end;
16658
16659     %else
16660     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16661
16662         filename temp catalog 'sashelp.emmodl.tree_train.source';
16663         %include temp;
16664         filename temp;
16665         %em_tree_train;
16666     %end;
16667
16668    %else
16669    %if %upcase(&EM_ACTION) = SCORE %then %do;
16670      filename temp catalog 'sashelp.emmodl.tree_score.source';
16671      %include temp;
16672      filename temp;
16673
16674      %em_tree_score;
16675
16676    %end;
16677
16678    %else
16679    %if %upcase(&EM_ACTION) = REPORT %then %do;
16680
16681         filename temp catalog 'sashelp.emmodl.tree_report.source';
16682         %include temp;
16683         filename temp;
16684
16685         %em_tree_report;
16686     %end;
16687
16688    %else
16689    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16690
16691         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16692         %include temp;
16693         filename temp;
16694         %EM_TREE_OPENTREEVIEWER;
16695
16696     %end;
16697
16698    %else
16699    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16700
16701         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16702         %include temp;
16703         filename temp;
16704         %EM_TREE_CLOSETREEVIEWER;
16705
16706     %end;
16707
16708
16709     %doendm:
16710  %mend main;
16711
16712  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16714 +%macro em_tree_score;
16716 +   /* determine if multiple targets will be processed */
16717 +   %let em_tree_multipleTargets=N;
16718 +   %let em_tree_numTarget=1;
16719 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16720 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16721 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16722 +         %let em_tree_multipleTargets=N;
16723 +      %end;
16724 +      %else %do;
16725 +         /* create macro array of targets  */
16726 +         data _null_;
16727 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16728 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16729 +           if eof then
16730 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16731 +        run;
16733 +        %if &em_tree_numTarget gt 1 %then %do;
16734 +           %let em_tree_multipleTargets=Y;
16735 +        %end;
16736 +      %end;
16737 +   %end;
16739 +   /* build flow and publish scoring code */
16740 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16741 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16743 +   filename treeflow "&EM_USER_TREEFLOW";
16744 +   filename treepub "&EM_USER_TREEPUBLISH";
16746 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16747 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16749 +   %em_copyfile(infref=treeflow, outfref=flowref);
16750 +   %em_copyfile(infref=treepub, outfref=pubref);
16752 +   filename treeflow;
16753 +   filename treepub;
16755 +   /* if priors are used, add code to generate unadjusted residuals in export */
16756 +   %let useAdjPriors = N;
16757 +   data _null_;
16758 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16759 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16760 +   run;
16761 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16762 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16763 +      %include temp;
16764 +      filename temp;
16766 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16767 +      filename adjref "&EM_USER_adjResidualCode";
16768 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16770 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16772 +      filename adjref;
16773 +   %end;
16775 +   /* LEAF */
16776 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16777 +      data _null_;
16778 +        file flowref mod;
16779 +        put 'drop _LEAF_;';
16780 +      run;
16782 +      data _null_;
16783 +        file pubref mod;
16784 +        put 'drop _LEAF_;';
16785 +      run;
16787 +   %end;
16789 +   filename flowref;
16790 +   filename pubref;
16792 +   /* em_metachange code */
16793 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16794 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16795 +   %end;
16797 +   /* variable selection based on importance stat    */
16798 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16799 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16800 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16801 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16802 +     %let obs = %sysfunc(fetch(&dsid));
16803 +     %do %while(&obs=0);
16804 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16805 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16806 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16807 +       %let obs = %sysfunc(fetch(&dsid));
16808 +     %end;
16809 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16810 +   %end;
16812 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16813 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16814 +    %let tree_pred_vars = ;
16815 +    %let tree_pred_lvl =;
16816 +    %let numpred= 0;
16818 +    data _null_;
16819 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16820 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16821 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16822 +     if eof then
16823 +       call symput('numpred', strip(put(_N_, BEST.)));
16824 +    run;
16825 +   %end;
16827 +   %if &numpred ne 0 %then %do;
16828 +    %do i=1 %to &numpred;
16829 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16830 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16831 +    %end;
16832 +   %end;
16834 +   /* determine if multiple targets will be processed */
16835 +   %let em_tree_multipleTargets=N;
16836 +   %let em_tree_numTarget=1;
16837 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16838 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16839 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16840 +         %let em_tree_multipleTargets=N;
16841 +      %end;
16842 +      %else %do;
16843 +        data _null_;
16844 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16845 +          if eof then
16846 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16847 +        run;
16849 +        %if &em_tree_numTarget gt 1 %then %do;
16850 +           %let em_tree_multipleTargets=Y;
16851 +        %end;
16852 +     %end;
16853 +   %end;
16855 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16856 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16858 +      /* variable importance */
16859 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16860 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16862 +         %let validexist=0;
16863 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16864 +           %let validexist=1;
16865 +         %end;
16867 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16868 +         /* and the columns may not be generated                                                                                 */
16869 +         %let em_tree_cvexists=;
16870 +         %let em_tree_surrexists=.;
16871 +         data _null_;
16872 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16873 +            if eof then do ;
16874 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16875 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16876 +            end;
16877 +         run;
16879 +         data &EM_USER_OUTIMPORT;
16880 +            set &EM_USER_OUTIMPORT;
16882 +            /* format columns based on Precison value specified */
16883 +            format importance 15.&EM_PROPERTY_PRECISION
16884 +                 %if &validexist %then %do;
16885 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16886 +                 %end;
16887 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16888 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16889 +                 %end;
16890 +            ;
16891 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16892 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16893 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16894 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16895 +                 %if "&em_tree_surrexists" ne "" %then %do;
16896 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16897 +                 %end;
16898 +                 %if &validexist %then %do;
16899 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16900 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16901 +                 %end;
16902 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16903 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16904 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16905 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16906 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16907 +                 %end;
16908 +            ;
16909 +         run;
16911 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16912 +      %end;
16913 +   %end;
16915 +   %doendm:
16916 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:02:29:29,
      Create Time=08Dec2017:02:29:29
 
NOTE: 170 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:02:29:29,
      Create Time=08Dec2017:02:29:29
 
NOTE: 148 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5983,
      Last Modified=08Dec2017:02:29:29,
      Create Time=08Dec2017:02:29:29
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5354,
      Last Modified=08Dec2017:02:29:29,
      Create Time=08Dec2017:02:29:29
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 88 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 88 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 89 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 92 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
16917
16918  *------------------------------------------------------------*;
16919  * End SCORE: Tree2;
16920  *------------------------------------------------------------*;
 
16921  proc sort data=WORK.EM_METACHANGE;
16922  by key uname;
16923  run;
 
NOTE: There were 89 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 89 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16924  filename x "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\CDELTA_TRAIN.sas";
16925  data _null_;
16926  file x;
16927  put 'if upcase(NAME) = "BOTHPAYM" then do;';
16928  put 'ROLE = "REJECTED";';
16929  put 'end;';
16930  put 'else ';
16931  put 'if upcase(NAME) = "BUYPROP" then do;';
16932  put 'ROLE = "REJECTED";';
16933  put 'end;';
16934  put 'else ';
16935  put 'if upcase(NAME) = "CATALOGCNT" then do;';
16936  put 'ROLE = "REJECTED";';
16937  put 'end;';
16938  put 'else ';
16939  put 'if upcase(NAME) = "CCPAYM" then do;';
16940  put 'ROLE = "REJECTED";';
16941  put 'end;';
16942  put 'else ';
16943  put 'if upcase(NAME) = "COUNTY" then do;';
16944  put 'ROLE = "REJECTED";';
16945  put 'end;';
16946  put 'else ';
16947  put 'if upcase(NAME) = "DEPT01" then do;';
16948  put 'ROLE = "REJECTED";';
16949  put 'end;';
16950  put 'else ';
16951  put 'if upcase(NAME) = "DEPT02" then do;';
16952  put 'ROLE = "REJECTED";';
16953  put 'end;';
16954  put 'else ';
16955  put 'if upcase(NAME) = "DEPT03" then do;';
16956  put 'ROLE = "REJECTED";';
16957  put 'end;';
16958  put 'else ';
16959  put 'if upcase(NAME) = "DEPT04" then do;';
16960  put 'ROLE = "REJECTED";';
16961  put 'end;';
16962  put 'else ';
16963  put 'if upcase(NAME) = "DEPT05" then do;';
16964  put 'ROLE = "REJECTED";';
16965  put 'end;';
16966  put 'else ';
16967  put 'if upcase(NAME) = "DEPT06" then do;';
16968  put 'ROLE = "REJECTED";';
16969  put 'end;';
16970  put 'else ';
16971  put 'if upcase(NAME) = "DEPT07" then do;';
16972  put 'ROLE = "REJECTED";';
16973  put 'end;';
16974  put 'else ';
16975  put 'if upcase(NAME) = "DEPT08" then do;';
16976  put 'ROLE = "REJECTED";';
16977  put 'end;';
16978  put 'else ';
16979  put 'if upcase(NAME) = "DEPT09" then do;';
16980  put 'ROLE = "REJECTED";';
16981  put 'end;';
16982  put 'else ';
16983  put 'if upcase(NAME) = "DEPT10" then do;';
16984  put 'ROLE = "REJECTED";';
16985  put 'end;';
16986  put 'else ';
16987  put 'if upcase(NAME) = "DEPT11" then do;';
16988  put 'ROLE = "REJECTED";';
16989  put 'end;';
16990  put 'else ';
16991  put 'if upcase(NAME) = "DEPT12" then do;';
16992  put 'ROLE = "REJECTED";';
16993  put 'end;';
16994  put 'else ';
16995  put 'if upcase(NAME) = "DEPT13" then do;';
16996  put 'ROLE = "REJECTED";';
16997  put 'end;';
16998  put 'else ';
16999  put 'if upcase(NAME) = "DEPT14" then do;';
17000  put 'ROLE = "REJECTED";';
17001  put 'end;';
17002  put 'else ';
17003  put 'if upcase(NAME) = "DEPT15" then do;';
17004  put 'ROLE = "REJECTED";';
17005  put 'end;';
17006  put 'else ';
17007  put 'if upcase(NAME) = "DEPT16" then do;';
17008  put 'ROLE = "REJECTED";';
17009  put 'end;';
17010  put 'else ';
17011  put 'if upcase(NAME) = "DEPT17" then do;';
17012  put 'ROLE = "REJECTED";';
17013  put 'end;';
17014  put 'else ';
17015  put 'if upcase(NAME) = "DEPT18" then do;';
17016  put 'ROLE = "REJECTED";';
17017  put 'end;';
17018  put 'else ';
17019  put 'if upcase(NAME) = "DEPT19" then do;';
17020  put 'ROLE = "REJECTED";';
17021  put 'end;';
17022  put 'else ';
17023  put 'if upcase(NAME) = "DEPT20" then do;';
17024  put 'ROLE = "REJECTED";';
17025  put 'end;';
17026  put 'else ';
17027  put 'if upcase(NAME) = "DEPT21" then do;';
17028  put 'ROLE = "REJECTED";';
17029  put 'end;';
17030  put 'else ';
17031  put 'if upcase(NAME) = "DEPT22" then do;';
17032  put 'ROLE = "REJECTED";';
17033  put 'end;';
17034  put 'else ';
17035  put 'if upcase(NAME) = "DEPT23" then do;';
17036  put 'ROLE = "REJECTED";';
17037  put 'end;';
17038  put 'else ';
17039  put 'if upcase(NAME) = "DEPT24" then do;';
17040  put 'ROLE = "REJECTED";';
17041  put 'end;';
17042  put 'else ';
17043  put 'if upcase(NAME) = "DEPT26" then do;';
17044  put 'ROLE = "REJECTED";';
17045  put 'end;';
17046  put 'else ';
17047  put 'if upcase(NAME) = "DEPT27" then do;';
17048  put 'ROLE = "REJECTED";';
17049  put 'end;';
17050  put 'else ';
17051  put 'if upcase(NAME) = "DOLINDEA" then do;';
17052  put 'ROLE = "REJECTED";';
17053  put 'end;';
17054  put 'else ';
17055  put 'if upcase(NAME) = "DOLINDET" then do;';
17056  put 'ROLE = "REJECTED";';
17057  put 'end;';
17058  put 'else ';
17059  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17060  put 'ROLE = "REJECTED";';
17061  put 'end;';
17062  put 'else ';
17063  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17064  put 'ROLE = "REJECTED";';
17065  put 'end;';
17066  put 'else ';
17067  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17068  put 'ROLE = "REJECTED";';
17069  put 'end;';
17070  put 'else ';
17071  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17072  put 'ROLE = "REJECTED";';
17073  put 'end;';
17074  put 'else ';
17075  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17076  put 'ROLE = "REJECTED";';
17077  put 'end;';
17078  put 'else ';
17079  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17080  put 'ROLE = "REJECTED";';
17081  put 'end;';
17082  put 'else ';
17083  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17084  put 'ROLE = "REJECTED";';
17085  put 'end;';
17086  put 'else ';
17087  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17088  put 'ROLE = "REJECTED";';
17089  put 'end;';
17090  put 'else ';
17091  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17092  put 'ROLE = "REJECTED";';
17093  put 'end;';
17094  put 'else ';
17095  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17096  put 'ROLE = "REJECTED";';
17097  put 'end;';
17098  put 'else ';
17099  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17100  put 'ROLE = "REJECTED";';
17101  put 'end;';
17102  put 'else ';
17103  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17104  put 'ROLE = "REJECTED";';
17105  put 'end;';
17106  put 'else ';
17107  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17108  put 'ROLE = "REJECTED";';
17109  put 'end;';
17110  put 'else ';
17111  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17112  put 'ROLE = "REJECTED";';
17113  put 'end;';
17114  put 'else ';
17115  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17116  put 'ROLE = "REJECTED";';
17117  put 'end;';
17118  put 'else ';
17119  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17120  put 'ROLE = "REJECTED";';
17121  put 'end;';
17122  put 'else ';
17123  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17124  put 'ROLE = "REJECTED";';
17125  put 'end;';
17126  put 'else ';
17127  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17128  put 'ROLE = "REJECTED";';
17129  put 'end;';
17130  put 'else ';
17131  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17132  put 'ROLE = "REJECTED";';
17133  put 'end;';
17134  put 'else ';
17135  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17136  put 'ROLE = "REJECTED";';
17137  put 'end;';
17138  put 'else ';
17139  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17140  put 'ROLE = "REJECTED";';
17141  put 'end;';
17142  put 'else ';
17143  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17144  put 'ROLE = "REJECTED";';
17145  put 'end;';
17146  put 'else ';
17147  put 'if upcase(NAME) = "DOLNETDA" then do;';
17148  put 'ROLE = "REJECTED";';
17149  put 'end;';
17150  put 'else ';
17151  put 'if upcase(NAME) = "DOLNETDT" then do;';
17152  put 'ROLE = "REJECTED";';
17153  put 'end;';
17154  put 'else ';
17155  put 'if upcase(NAME) = "DTBUYLST" then do;';
17156  put 'ROLE = "REJECTED";';
17157  put 'end;';
17158  put 'else ';
17159  put 'if upcase(NAME) = "METHPAYM" then do;';
17160  put 'ROLE = "REJECTED";';
17161  put 'end;';
17162  put 'else ';
17163  put 'if upcase(NAME) = "MONLAST" then do;';
17164  put 'ROLE = "REJECTED";';
17165  put 'end;';
17166  put 'else ';
17167  put 'if upcase(NAME) = "PCPAYM" then do;';
17168  put 'ROLE = "REJECTED";';
17169  put 'end;';
17170  put 'else ';
17171  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17172  put 'ROLE = "ASSESS";';
17173  put 'end;';
17174  put 'else ';
17175  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17176  put 'ROLE = "ASSESS";';
17177  put 'end;';
17178  put 'else ';
17179  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17180  put 'ROLE = "REJECTED";';
17181  put 'end;';
17182  put 'else ';
17183  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17184  put 'ROLE = "REJECTED";';
17185  put 'end;';
17186  put 'else ';
17187  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17188  put 'ROLE = "REJECTED";';
17189  put 'end;';
17190  put 'else ';
17191  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17192  put 'ROLE = "REJECTED";';
17193  put 'end;';
17194  put 'else ';
17195  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17196  put 'ROLE = "REJECTED";';
17197  put 'end;';
17198  put 'else ';
17199  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17200  put 'ROLE = "REJECTED";';
17201  put 'end;';
17202  put 'else ';
17203  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17204  put 'ROLE = "REJECTED";';
17205  put 'end;';
17206  put 'else ';
17207  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17208  put 'ROLE = "REJECTED";';
17209  put 'end;';
17210  put 'else ';
17211  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17212  put 'ROLE = "REJECTED";';
17213  put 'end;';
17214  put 'else ';
17215  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17216  put 'ROLE = "REJECTED";';
17217  put 'end;';
17218  put 'else ';
17219  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17220  put 'ROLE = "REJECTED";';
17221  put 'end;';
17222  put 'else ';
17223  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17224  put 'ROLE = "REJECTED";';
17225  put 'end;';
17226  put 'else ';
17227  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17228  put 'ROLE = "REJECTED";';
17229  put 'end;';
17230  put 'else ';
17231  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17232  put 'ROLE = "REJECTED";';
17233  put 'end;';
17234  put 'else ';
17235  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17236  put 'ROLE = "REJECTED";';
17237  put 'end;';
17238  put 'else ';
17239  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17240  put 'ROLE = "REJECTED";';
17241  put 'end;';
17242  put 'else ';
17243  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17244  put 'ROLE = "REJECTED";';
17245  put 'end;';
17246  put 'else ';
17247  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17248  put 'ROLE = "REJECTED";';
17249  put 'end;';
17250  put 'else ';
17251  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17252  put 'ROLE = "REJECTED";';
17253  put 'end;';
17254  put 'else ';
17255  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17256  put 'ROLE = "REJECTED";';
17257  put 'end;';
17258  put 'else ';
17259  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17260  put 'ROLE = "REJECTED";';
17261  put 'end;';
17262  put 'else ';
17263  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17264  put 'ROLE = "REJECTED";';
17265  put 'end;';
17266  put 'else ';
17267  put 'if upcase(NAME) = "UNITSIDD" then do;';
17268  put 'ROLE = "REJECTED";';
17269  put 'end;';
17270  put 'else ';
17271  put 'if upcase(NAME) = "UNITSLAP" then do;';
17272  put 'ROLE = "REJECTED";';
17273  put 'end;';
17274  put 'else ';
17275  put 'if upcase(NAME) = "UNTLANPO" then do;';
17276  put 'ROLE = "REJECTED";';
17277  put 'end;';
17278  put 'else ';
17279  put 'if upcase(NAME) = "_NODE_" then do;';
17280  put 'ROLE = "SEGMENT";';
17281  put 'LEVEL = "NOMINAL";';
17282  put 'end;';
17283  run;
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=08Dec2017:02:29:30,
      Create Time=08Dec2017:02:26:57
 
NOTE: 356 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17284  filename x;
NOTE: Fileref X has been deassigned.
 
17285  filename emflow "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas";
17286  *------------------------------------------------------------*;
17287  * Tree2: Scoring DATA data;
17288  *------------------------------------------------------------*;
17289  data EMWS2.Tree2_TRAIN
17290  / view=EMWS2.Tree2_TRAIN
17291  ;
17292  set EMWS2.Part_TRAIN
17293  ;
17294  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas.
17295 +****************************************************************;
17296 +******             DECISION TREE SCORING CODE             ******;
17297 +****************************************************************;
17298 +
17299 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17300 +LENGTH F_RESPOND  $   12;
17301 +LENGTH I_RESPOND  $   12;
17302 +LENGTH _WARN_  $    4;
17303 +
17304 +******              LABELS FOR NEW VARIABLES              ******;
17305 +label _NODE_ = 'Node' ;
17306 +label _LEAF_ = 'Leaf' ;
17307 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17308 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17309 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17310 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17311 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17312 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17313 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17314 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17315 +label F_RESPOND = 'From: RESPOND' ;
17316 +label I_RESPOND = 'Into: RESPOND' ;
17317 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17318 +label _WARN_ = 'Warnings' ;
17319 +
17320 +
17321 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17322 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17323 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17324 +
17325 +
17326 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17327 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17328 +
17329 +******             ASSIGN OBSERVATION TO NODE             ******;
17330 +IF  NOT MISSING(DOLL24 ) AND
17331 +                 121.2 <= DOLL24  THEN DO;
17332 +  IF  NOT MISSING(DEPT25 ) AND
17333 +                    32.5 <= DEPT25  THEN DO;
17334 +    _NODE_  =                    7;
17335 +    _LEAF_  =                    8;
17336 +    P_RESPOND1  =      0.4390243902439;
17337 +    P_RESPOND0  =     0.56097560975609;
17338 +    Q_RESPOND1  =      0.4390243902439;
17339 +    Q_RESPOND0  =     0.56097560975609;
17340 +    V_RESPOND1  =      0.3076923076923;
17341 +    V_RESPOND0  =     0.69230769230769;
17342 +    I_RESPOND  = '0' ;
17343 +    U_RESPOND  =                    0;
17344 +    END;
17345 +  ELSE DO;
17346 +    IF  NOT MISSING(FREQPRCH ) AND
17347 +                       8.5 <= FREQPRCH  THEN DO;
17348 +      _NODE_  =                   13;
17349 +      _LEAF_  =                    7;
17350 +      P_RESPOND1  =     0.17607413647851;
17351 +      P_RESPOND0  =     0.82392586352148;
17352 +      Q_RESPOND1  =     0.17607413647851;
17353 +      Q_RESPOND0  =     0.82392586352148;
17354 +      V_RESPOND1  =     0.17874396135265;
17355 +      V_RESPOND0  =     0.82125603864734;
17356 +      I_RESPOND  = '0' ;
17357 +      U_RESPOND  =                    0;
17358 +      END;
17359 +    ELSE DO;
17360 +      _NODE_  =                   12;
17361 +      _LEAF_  =                    6;
17362 +      P_RESPOND1  =     0.10013175230566;
17363 +      P_RESPOND0  =     0.89986824769433;
17364 +      Q_RESPOND1  =     0.10013175230566;
17365 +      Q_RESPOND0  =     0.89986824769433;
17366 +      V_RESPOND1  =       0.089590443686;
17367 +      V_RESPOND0  =     0.91040955631399;
17368 +      I_RESPOND  = '0' ;
17369 +      U_RESPOND  =                    0;
17370 +      END;
17371 +    END;
17372 +  END;
17373 +ELSE DO;
17374 +  IF  NOT MISSING(TENURE ) AND
17375 +    TENURE  <                  1.5 THEN DO;
17376 +    IF  NOT MISSING(DAYLAST ) AND
17377 +                      46.5 <= DAYLAST  THEN DO;
17378 +      _NODE_  =                    9;
17379 +      _LEAF_  =                    2;
17380 +      P_RESPOND1  =     0.11111111111111;
17381 +      P_RESPOND0  =     0.88888888888888;
17382 +      Q_RESPOND1  =     0.11111111111111;
17383 +      Q_RESPOND0  =     0.88888888888888;
17384 +      V_RESPOND1  =                    0;
17385 +      V_RESPOND0  =                    1;
17386 +      I_RESPOND  = '0' ;
17387 +      U_RESPOND  =                    0;
17388 +      END;
17389 +    ELSE DO;
17390 +      _NODE_  =                    8;
17391 +      _LEAF_  =                    1;
17392 +      P_RESPOND1  =     0.95454545454545;
17393 +      P_RESPOND0  =     0.04545454545454;
17394 +      Q_RESPOND1  =     0.95454545454545;
17395 +      Q_RESPOND0  =     0.04545454545454;
17396 +      V_RESPOND1  =                    1;
17397 +      V_RESPOND0  =                    0;
17398 +      I_RESPOND  = '1' ;
17399 +      U_RESPOND  =                    1;
17400 +      END;
17401 +    END;
17402 +  ELSE DO;
17403 +    IF  NOT MISSING(DOLL24 ) AND
17404 +                    23.975 <= DOLL24  THEN DO;
17405 +      IF  NOT MISSING(ACTBUY ) AND
17406 +                         1.5 <= ACTBUY  THEN DO;
17407 +        _NODE_  =                   19;
17408 +        _LEAF_  =                    5;
17409 +        P_RESPOND1  =     0.10306612486147;
17410 +        P_RESPOND0  =     0.89693387513852;
17411 +        Q_RESPOND1  =     0.10306612486147;
17412 +        Q_RESPOND0  =     0.89693387513852;
17413 +        V_RESPOND1  =     0.09674922600619;
17414 +        V_RESPOND0  =      0.9032507739938;
17415 +        I_RESPOND  = '0' ;
17416 +        U_RESPOND  =                    0;
17417 +        END;
17418 +      ELSE DO;
17419 +        _NODE_  =                   18;
17420 +        _LEAF_  =                    4;
17421 +        P_RESPOND1  =     0.05328917657684;
17422 +        P_RESPOND0  =     0.94671082342315;
17423 +        Q_RESPOND1  =     0.05328917657684;
17424 +        Q_RESPOND0  =     0.94671082342315;
17425 +        V_RESPOND1  =     0.05952028427598;
17426 +        V_RESPOND0  =     0.94047971572401;
17427 +        I_RESPOND  = '0' ;
17428 +        U_RESPOND  =                    0;
17429 +        END;
17430 +      END;
17431 +    ELSE DO;
17432 +      _NODE_  =                   10;
17433 +      _LEAF_  =                    3;
17434 +      P_RESPOND1  =     0.03609902631033;
17435 +      P_RESPOND0  =     0.96390097368966;
17436 +      Q_RESPOND1  =     0.03609902631033;
17437 +      Q_RESPOND0  =     0.96390097368966;
17438 +      V_RESPOND1  =     0.03674786591713;
17439 +      V_RESPOND0  =     0.96325213408286;
17440 +      I_RESPOND  = '0' ;
17441 +      U_RESPOND  =                    0;
17442 +      END;
17443 +    END;
17444 +  END;
17445 +
17446 +*****  RESIDUALS R_ *************;
17447 +IF  F_RESPOND  NE '1'
17448 +AND F_RESPOND  NE '0'  THEN DO;
17449 +        R_RESPOND1  = .;
17450 +        R_RESPOND0  = .;
17451 + END;
17452 + ELSE DO;
17453 +       R_RESPOND1  =  -P_RESPOND1 ;
17454 +       R_RESPOND0  =  -P_RESPOND0 ;
17455 +       SELECT( F_RESPOND  );
17456 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17457 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17458 +       END;
17459 + END;
17460 +
17461 +****************************************************************;
17462 +******          END OF DECISION TREE SCORING CODE         ******;
17463 +****************************************************************;
17464 +
17465 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17466  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17467  quit;
17468  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17469  filename emflow "\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas";
17470  *------------------------------------------------------------*;
17471  * Tree2: Scoring VALIDATE data;
17472  *------------------------------------------------------------*;
17473  data EMWS2.Tree2_VALIDATE
17474  / view=EMWS2.Tree2_VALIDATE
17475  ;
17476  set EMWS2.Part_VALIDATE
17477  ;
17478  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas.
17479 +****************************************************************;
17480 +******             DECISION TREE SCORING CODE             ******;
17481 +****************************************************************;
17482 +
17483 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17484 +LENGTH F_RESPOND  $   12;
17485 +LENGTH I_RESPOND  $   12;
17486 +LENGTH _WARN_  $    4;
17487 +
17488 +******              LABELS FOR NEW VARIABLES              ******;
17489 +label _NODE_ = 'Node' ;
17490 +label _LEAF_ = 'Leaf' ;
17491 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17492 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17493 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17494 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17495 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17496 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17497 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17498 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17499 +label F_RESPOND = 'From: RESPOND' ;
17500 +label I_RESPOND = 'Into: RESPOND' ;
17501 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17502 +label _WARN_ = 'Warnings' ;
17503 +
17504 +
17505 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17506 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17507 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17508 +
17509 +
17510 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17511 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17512 +
17513 +******             ASSIGN OBSERVATION TO NODE             ******;
17514 +IF  NOT MISSING(DOLL24 ) AND
17515 +                 121.2 <= DOLL24  THEN DO;
17516 +  IF  NOT MISSING(DEPT25 ) AND
17517 +                    32.5 <= DEPT25  THEN DO;
17518 +    _NODE_  =                    7;
17519 +    _LEAF_  =                    8;
17520 +    P_RESPOND1  =      0.4390243902439;
17521 +    P_RESPOND0  =     0.56097560975609;
17522 +    Q_RESPOND1  =      0.4390243902439;
17523 +    Q_RESPOND0  =     0.56097560975609;
17524 +    V_RESPOND1  =      0.3076923076923;
17525 +    V_RESPOND0  =     0.69230769230769;
17526 +    I_RESPOND  = '0' ;
17527 +    U_RESPOND  =                    0;
17528 +    END;
17529 +  ELSE DO;
17530 +    IF  NOT MISSING(FREQPRCH ) AND
17531 +                       8.5 <= FREQPRCH  THEN DO;
17532 +      _NODE_  =                   13;
17533 +      _LEAF_  =                    7;
17534 +      P_RESPOND1  =     0.17607413647851;
17535 +      P_RESPOND0  =     0.82392586352148;
17536 +      Q_RESPOND1  =     0.17607413647851;
17537 +      Q_RESPOND0  =     0.82392586352148;
17538 +      V_RESPOND1  =     0.17874396135265;
17539 +      V_RESPOND0  =     0.82125603864734;
17540 +      I_RESPOND  = '0' ;
17541 +      U_RESPOND  =                    0;
17542 +      END;
17543 +    ELSE DO;
17544 +      _NODE_  =                   12;
17545 +      _LEAF_  =                    6;
17546 +      P_RESPOND1  =     0.10013175230566;
17547 +      P_RESPOND0  =     0.89986824769433;
17548 +      Q_RESPOND1  =     0.10013175230566;
17549 +      Q_RESPOND0  =     0.89986824769433;
17550 +      V_RESPOND1  =       0.089590443686;
17551 +      V_RESPOND0  =     0.91040955631399;
17552 +      I_RESPOND  = '0' ;
17553 +      U_RESPOND  =                    0;
17554 +      END;
17555 +    END;
17556 +  END;
17557 +ELSE DO;
17558 +  IF  NOT MISSING(TENURE ) AND
17559 +    TENURE  <                  1.5 THEN DO;
17560 +    IF  NOT MISSING(DAYLAST ) AND
17561 +                      46.5 <= DAYLAST  THEN DO;
17562 +      _NODE_  =                    9;
17563 +      _LEAF_  =                    2;
17564 +      P_RESPOND1  =     0.11111111111111;
17565 +      P_RESPOND0  =     0.88888888888888;
17566 +      Q_RESPOND1  =     0.11111111111111;
17567 +      Q_RESPOND0  =     0.88888888888888;
17568 +      V_RESPOND1  =                    0;
17569 +      V_RESPOND0  =                    1;
17570 +      I_RESPOND  = '0' ;
17571 +      U_RESPOND  =                    0;
17572 +      END;
17573 +    ELSE DO;
17574 +      _NODE_  =                    8;
17575 +      _LEAF_  =                    1;
17576 +      P_RESPOND1  =     0.95454545454545;
17577 +      P_RESPOND0  =     0.04545454545454;
17578 +      Q_RESPOND1  =     0.95454545454545;
17579 +      Q_RESPOND0  =     0.04545454545454;
17580 +      V_RESPOND1  =                    1;
17581 +      V_RESPOND0  =                    0;
17582 +      I_RESPOND  = '1' ;
17583 +      U_RESPOND  =                    1;
17584 +      END;
17585 +    END;
17586 +  ELSE DO;
17587 +    IF  NOT MISSING(DOLL24 ) AND
17588 +                    23.975 <= DOLL24  THEN DO;
17589 +      IF  NOT MISSING(ACTBUY ) AND
17590 +                         1.5 <= ACTBUY  THEN DO;
17591 +        _NODE_  =                   19;
17592 +        _LEAF_  =                    5;
17593 +        P_RESPOND1  =     0.10306612486147;
17594 +        P_RESPOND0  =     0.89693387513852;
17595 +        Q_RESPOND1  =     0.10306612486147;
17596 +        Q_RESPOND0  =     0.89693387513852;
17597 +        V_RESPOND1  =     0.09674922600619;
17598 +        V_RESPOND0  =      0.9032507739938;
17599 +        I_RESPOND  = '0' ;
17600 +        U_RESPOND  =                    0;
17601 +        END;
17602 +      ELSE DO;
17603 +        _NODE_  =                   18;
17604 +        _LEAF_  =                    4;
17605 +        P_RESPOND1  =     0.05328917657684;
17606 +        P_RESPOND0  =     0.94671082342315;
17607 +        Q_RESPOND1  =     0.05328917657684;
17608 +        Q_RESPOND0  =     0.94671082342315;
17609 +        V_RESPOND1  =     0.05952028427598;
17610 +        V_RESPOND0  =     0.94047971572401;
17611 +        I_RESPOND  = '0' ;
17612 +        U_RESPOND  =                    0;
17613 +        END;
17614 +      END;
17615 +    ELSE DO;
17616 +      _NODE_  =                   10;
17617 +      _LEAF_  =                    3;
17618 +      P_RESPOND1  =     0.03609902631033;
17619 +      P_RESPOND0  =     0.96390097368966;
17620 +      Q_RESPOND1  =     0.03609902631033;
17621 +      Q_RESPOND0  =     0.96390097368966;
17622 +      V_RESPOND1  =     0.03674786591713;
17623 +      V_RESPOND0  =     0.96325213408286;
17624 +      I_RESPOND  = '0' ;
17625 +      U_RESPOND  =                    0;
17626 +      END;
17627 +    END;
17628 +  END;
17629 +
17630 +*****  RESIDUALS R_ *************;
17631 +IF  F_RESPOND  NE '1'
17632 +AND F_RESPOND  NE '0'  THEN DO;
17633 +        R_RESPOND1  = .;
17634 +        R_RESPOND0  = .;
17635 + END;
17636 + ELSE DO;
17637 +       R_RESPOND1  =  -P_RESPOND1 ;
17638 +       R_RESPOND0  =  -P_RESPOND0 ;
17639 +       SELECT( F_RESPOND  );
17640 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17641 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17642 +       END;
17643 + END;
17644 +
17645 +****************************************************************;
17646 +******          END OF DECISION TREE SCORING CODE         ******;
17647 +****************************************************************;
17648 +
17649 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17650  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17651  quit;
17652  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17654  proc sort data=WORK.EM_USER_REPORT;
17655  by ID VIEW;
17656  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17657  *------------------------------------------------------------*;
17658  * Tree2: Computing metadata for TRAIN data;
17659  *------------------------------------------------------------*;
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
18360  data EMWS2.Tree2_EMINFO;
18361  length TARGET KEY $32 DATA $43;
18362  input TARGET KEY DATA $;
18363  cards;
 
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18367  run;
18368  proc sort data = EMWS2.Tree2_EMINFO NOTHREADS;
18369  by TARGET KEY;
18370  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18371  proc sort data = EMWS2.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18372  by TARGET KEY;
18373  run;
 
NOTE: There were 3 observations read from the data set EMWS2.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18374  proc sort data = EMWS2.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18375  by TARGET KEY;
18376  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18377  data EMWS2.Tree2_EMINFO;
18378  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18379  by TARGET KEY;
18380  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18381  proc datasets lib=work nolist;
18382  delete TEMP_INFO SORTEDEMINFO;
18383  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18384  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS2.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 08, 2017
Time:                02:29:32
*------------------------------------------------------------*
18408  data EMWS2.Tree2_EMOUTFIT;
18409  set EMWS2.Tree2_EMOUTFIT;
18410  length TargetLabel $200;
18411  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18412  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18413  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_EMOUTFIT.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18414  proc sort data=EMWS2.Tree2_EMREPORTFIT nothreads;
18415  by TARGET;
18416  run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE2_EMREPORTFIT.
NOTE: The data set EMWS2.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18417  %let _EMwarndup = 0;
18418  %let _EMtargetdup =;
18419  %let _EMASEtargetdup =;
18420  data _null_;
18421  set EMWS2.Tree2_EMOUTFIT;
18422  if .<_ASE_<0.000001 then do;
18423  call symput('_EMwarndup', '1');
18424  call symput('_EMtargetdup', target);
18425  call symput('_EMASEtargetdup', put(_ASE_, best.));
18426  end;
18427  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18428  %let EMEXCEPTIONSTRING=;
18429  *------------------------------------------------------------*;
18430  * REPORT: Tree2;
18431  *------------------------------------------------------------*;
18432  %let EM_ACTION = REPORT;
18433  %let syscc = 0;
18434  %macro main;
18435
18436    %if %upcase(&EM_ACTION) = CREATE %then %do;
18437      filename temp catalog 'sashelp.emmodl.tree_create.source';
18438      %include temp;
18439      filename temp;
18440
18441      %em_tree_create;
18442    %end;
18443
18444     %else
18445     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18446
18447         filename temp catalog 'sashelp.emmodl.tree_train.source';
18448         %include temp;
18449         filename temp;
18450         %em_tree_train;
18451     %end;
18452
18453    %else
18454    %if %upcase(&EM_ACTION) = SCORE %then %do;
18455      filename temp catalog 'sashelp.emmodl.tree_score.source';
18456      %include temp;
18457      filename temp;
18458
18459      %em_tree_score;
18460
18461    %end;
18462
18463    %else
18464    %if %upcase(&EM_ACTION) = REPORT %then %do;
18465
18466         filename temp catalog 'sashelp.emmodl.tree_report.source';
18467         %include temp;
18468         filename temp;
18469
18470         %em_tree_report;
18471     %end;
18472
18473    %else
18474    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18475
18476         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18477         %include temp;
18478         filename temp;
18479         %EM_TREE_OPENTREEVIEWER;
18480
18481     %end;
18482
18483    %else
18484    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18485
18486         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18487         %include temp;
18488         filename temp;
18489         %EM_TREE_CLOSETREEVIEWER;
18490
18491     %end;
18492
18493
18494     %doendm:
18495  %mend main;
18496
18497  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18499 +%macro em_tree_makePlotDs( multipleTar= );
18501 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18502 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18503 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18504 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18506 +  /* determine if validation statistics will be displayed */
18507 +  %let validflag=N;
18508 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18509 +    /* determine if validation data exists */
18510 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18511 +      %let validflag=Y;
18512 +    %end;
18513 +  %end;
18515 +   /* retrieve name of decmeta even in presence of multiple targets */
18516 +   %let decmeta = ;
18517 +   %if &EM_DEC_DECMETA eq %then %do;
18518 +     data _Target;
18519 +       set &em_data_variableset;
18520 +       where ROLE='TARGET' and USE in('D', 'Y');
18521 +       keep NAME;
18522 +     run;
18523 +     proc sort data=_Target;
18524 +       by NAME;
18525 +     run;
18526 +     proc sort data=EM_TARGETDECINFO;
18527 +       by TARGET;
18528 +     run;
18529 +     data _Target;
18530 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18531 +       by NAME;
18532 +       if _a then do;
18533 +         call symput('decmeta', trim(DECMETA));
18534 +       end;
18535 +     run;
18536 +     proc delete data=_Target;run;
18537 +   %end;
18538 +   %else %let decmeta = &EM_DEC_DECMETA;
18541 +  /* retrieve targetEvent from decmeta */
18542 +  %let targetEvent=;
18543 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18544 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18545 +      data _null_;
18546 +       set &DECMETA(where=(_TYPE_="TARGET"));
18547 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18548 +      run;
18549 +    %end;
18550 +  %end;
18552 +  /* retrieve predicted var for targetEvent from decmeta */
18553 +  %let predTarget=;
18554 +  %let predLvl=;
18555 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18556 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18557 +      data _null_;
18558 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18559 +       call symput('predTarget', strip(VARIABLE));
18560 +       call symput('predLvl', strip(LEVEL));
18561 +      run;
18562 +    %end;
18563 +  %end;
18564 +  %else %do;
18565 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18566 +      data _null_;
18567 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18568 +       call symput('predTarget', strip(VARIABLE));
18569 +      run;
18570 +    %end;
18571 +  %end;
18573 +  /* create BelowText value */
18574 +  data belowtext;
18575 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18576 +    keep node belowtext;
18577 +  run;
18579 +  /* relace belowtext with variable label if it exists */
18580 +  data belowtext2;
18581 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18582 +    keep node belowtextlbl;
18583 +  run;
18585 +  proc sort data=belowtext; by node; run;
18586 +  proc sort data=belowtext2; by node; run;
18588 +  data belowtext;
18589 +    merge belowtext belowtext2(in=_a);
18590 +    by node;
18591 +    if _a then belowtext=belowtextlbl;
18592 +    keep node belowtext;
18593 +  run;
18595 +  /* create AboveText value */
18596 +  data abovetext;
18597 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18598 +  run;
18599 +  proc sort data=abovetext; by node numeric_value; run;
18601 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18602 +  data abovetext;
18603 +    set abovetext(rename=(node=parent));
18604 +    by parent numeric_value;
18605 +    retain abovetext tempstring flag branch origval origchar ;
18606 +    length abovetext $256;
18607 +    length tempstring origchar $64;
18609 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18610 +      if first.parent then do;
18611 +        if missing(character_value) then do;
18612 +          numeric_value = round(numeric_value, &sp_precision);
18613 +          abovetext = "< "||strip(NUMERIC_VALUE);
18614 +          branch = 1;
18615 +          origval = numeric_value;
18616 +          output;
18617 +        end;
18618 +        else do;
18619 +          abovetext = "< "||strip(CHARACTER_VALUE);
18620 +          branch = 1;
18621 +          origchar = character_value;
18622 +          output;
18623 +        end;
18625 +        if first.parent AND last.parent then do;
18626 +          if missing(character_value) then do;
18627 +            numeric_value = round(numeric_value, &sp_precision);
18628 +            branch = branch + 1;
18629 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18630 +            output;
18631 +          end;
18632 +          else do;
18633 +            branch = branch + 1;
18634 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18635 +            output;
18636 +          end;
18637 +        end;
18638 +      end;
18639 +      else if last.parent then do;
18640 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18641 +          if missing(character_value) then do;
18642 +            numeric_value = round(numeric_value, &sp_precision);
18643 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18644 +          end;
18645 +          else do;
18646 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18647 +          end;
18648 +          branch = branch + 1;
18649 +          output;
18651 +          if missing(character_value) then do;
18652 +            numeric_value = round(numeric_value, &sp_precision);
18653 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18654 +          end;
18655 +          else do;
18656 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18657 +          end;
18658 +          branch = branch + 1;
18659 +          output;
18660 +        end;
18661 +        else do;
18662 +          if missing(character_value) then do;
18663 +            numeric_value = round(numeric_value, &sp_precision);
18664 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18665 +          end;
18666 +          else do;
18667 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18668 +          end;
18669 +          branch = branch + 1;
18670 +          output;
18671 +        end;
18672 +      end;
18673 +      else do;
18674 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18675 +          if missing(character_value) then do;
18676 +            numeric_value = round(numeric_value,&sp_precision);
18677 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18678 +            origval = numeric_value;
18679 +          end;
18680 +          else do;
18681 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18682 +            origchar = character_value;
18683 +          end;
18684 +          branch = branch + 1;
18685 +          output;
18687 +        end;
18688 +        else do;
18689 +          if missing(character_value) then do;
18690 +            numeric_value = round(numeric_value, &sp_precision);
18691 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18692 +            origval = numeric_value;
18693 +          end;
18694 +          else do;
18695 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18696 +            origval = character_value;
18697 +          end;
18698 +          branch = branch + 1;
18699 +          output;
18700 +        end;
18701 +      end;
18702 +    end;
18703 +    else do;
18704 +       if first.numeric_value then do;
18705 +         flag = 0;
18706 +         abovetext = strip(CHARACTER_VALUE);
18707 +         branch = numeric_value;
18708 +         if first.numeric_value AND last.numeric_value then do;
18709 +           output;
18710 +         end;
18711 +       end;
18712 +       else if last.numeric_value then do;
18713 +         if flag=0 then do;
18714 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18715 +           length = length(strip(tempstring));
18716 +           if length < 32 then do;
18717 +             abovetext = strip(tempstring);
18718 +           end;
18719 +           else do;
18720 +             abovetext = strip(abovetext)||", ...";
18721 +             flag = 1;
18722 +           end;
18723 +         end;
18724 +         branch = numeric_value;
18725 +         output;
18726 +       end;
18727 +       else do;
18728 +         if flag=0 then do;
18729 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18730 +           length = length(strip(tempstring));
18731 +           if length < 32 then do;
18732 +             abovetext = strip(tempstring);
18733 +           end;
18734 +           else do;
18735 +             abovetext = strip(abovetext)||", ...";
18736 +             flag=1;
18737 +           end;
18738 +         end;
18739 +         branch = numeric_value;
18740 +       end;
18741 +    end;
18742 +    keep parent branch abovetext;
18743 +  run;
18745 +  /* MIssing value to abovetext */
18746 +  data tempmissing;
18747 +    set &EM_USER_OUTRULES;
18748 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18749 +    rename node=parent numeric_value=branch character_value=misschar;
18750 +  run;
18753 +  proc sort data=abovetext; by parent branch; run;
18754 +  proc sort data=tempmissing; by parent branch; run;
18755 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18757 +  data tempoutnodes;
18758 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18759 +    by parent branch;
18760 +    length traintotal validtotal 8;
18761 +    retain traintotal validtotal;
18763 +    if _a then do;
18764 +      if ^MISSING(abovetext) then do;
18765 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18766 +      end;
18767 +      else do;
18768 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18769 +      end;
18770 +    end;
18771 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18773 +    if node=1 then do;
18774 +      traintotal = N;
18775 +      validtotal=VN;
18776 +    end;
18778 +    drop role rank stat misschar belowtext;
18779 +  run;
18780 +  proc sort data=tempoutnodes; by node; run;
18781 +  proc sort data=belowtext; by node; run;
18783 +  data tempoutnodes;
18784 +    merge tempoutnodes belowtext;
18785 +    by node;
18787 +  run;
18789 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18790 +  %let adjusted = N;
18791 +  %let npriors = 0;
18792 +  data _null_ ;
18793 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18794 +    if eof then do ;
18795 +      call symput("npriors" , strip(put(_N_,best.))) ;
18796 +    end;
18797 +  run;
18798 +  %if &npriors gt 0 %then %let adjusted=Y;
18801 +  /* create a table with targetUsed and targetLevel columns for each node */
18802 +  data temptarmeta;
18803 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18804 +    %if &multipleTar eq N %then %do;
18805 +      AND USE in ('D', 'Y')
18806 +    %end;
18807 +    ));
18808 +    length TARGET $32;
18809 +    Target=name;
18810 +    keep target level;
18811 +  run;
18813 +  %if &multipleTar eq Y %then %do;
18814 +    data temptargetused;
18815 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18816 +      keep node target;
18817 +    run;
18818 +    proc sort data=temptargetused; by target; run;
18819 +    proc sort data=temptarmeta; by target; run;
18820 +    data temptargetused;
18821 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18822 +      by target;
18823 +      if _a and _b;
18824 +    run;
18825 +  %end;
18826 +  %else %do;
18827 +    data temptargetused;
18828 +      set &EM_USER_OUTSTATS;
18829 +      length target $32 tarlevel $10;
18830 +      target="%EM_TARGET";
18831 +      tarlevel="%EM_TARGET_LEVEL";
18832 +      keep node target tarlevel;
18833 +    run;
18834 +    proc sort data=temptargetused nodupkey; by node; run;
18835 +  %end;
18837 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18838 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18839 +  proc sort data=temptargetused; by node; run;
18842 +  /* create tables for all interval targets as well as all class targets */
18843 +  data tempinterval tempclass;
18844 +    merge tempoutstats temptargetused( rename=(target=targetused));
18845 +    by node;
18846 +    %if "&multipleTar" eq "Y" %then %do;
18847 +      if ((missing(Target)) OR (target=targetused ));
18848 +    %end;
18850 +    if tarlevel="INTERVAL" then output tempinterval;
18851 +    else output tempclass;
18852 +  run;
18854 +  /* iniitalize intTarget and classTarget flags */
18855 +  %let em_intNobs =0;
18856 +  %let em_classNobs = 0;
18857 +  %let em_intTarget= N;
18858 +  %let em_classTarget= N;
18860 +  proc sql;
18861 +    reset noprint;
18862 +    select count(*) into :em_intNobs from tempinterval;
18863 +  quit;
18864 +  proc sql;
18865 +    reset noprint;
18866 +    select count(*) into :em_classNobs from tempclass;
18867 +  quit;
18869 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18870 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18872 +  /* retrieve all information for interval targets */
18873 +  %if &em_intTarget eq Y %then %do;
18875 +    /* determine if leaf variable exists */
18876 +    %let dsid=%sysfunc(open(tempinterval,i));
18877 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18878 +    %let rc=%sysfunc(close(&dsid));
18880 +    proc transpose data=tempinterval
18881 +      %if &leafexists %then %do;
18882 +        (drop=leaf)
18883 +      %end;
18884 +      %if &validexist %then %do;
18885 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18886 +      %end;
18887 +      %else %do;
18888 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18889 +      %end;
18890 +      by node;
18891 +      id statname;
18892 +    run;
18893 +    data tempinterval;
18894 +      set tempinterval;
18895 +      if missing(N) then delete;
18896 +    run;
18897 +  %end;
18899 +  /* retrieve all information for class targets */
18900 +  %if &em_classTarget eq Y %then %do;
18901 +    proc sort data=tempclass; by node category; run;
18902 +    %if &validflag eq N %then %do;
18903 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18904 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18905 +    %end;
18906 +    %else %do;
18907 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18908 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18909 +    %end;
18910 +      set tempclass;
18912 +      %if &validflag eq N %then %do;
18913 +        %if "&adjusted" eq "N" %then %do;
18914 +          if statname="N" then output tempn;
18915 +        %end;
18916 +        %else %do;
18917 +          if statname="NPRIORS" then output tempn;
18918 +        %end;
18919 +        else if statname="PREDICTION" then output temppredict;
18920 +        else if statname="PROBABILITY" then output tempprob;
18921 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18922 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18923 +      %end;
18924 +      %else %do;
18925 +        %if "&adjusted" eq "N" %then %do;
18926 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18927 +        %end;
18928 +        %else %do;
18929 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18930 +        %end;
18931 +        else if statname="PREDICTION" then output temppredict;
18932 +        else if statname="PROBABILITY" then output tempprob;
18933 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18934 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18935 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18936 +      %end;
18937 +    run;
18940 +    /* determine if profit/loss exists in tempprofit */
18941 +    %let em_profitflag=0;
18942 +    %let em_lossflag=0;
18943 +    proc sql;
18944 +      reset noprint;
18945 +      select count(*) into :em_profitflag from tempprofit;
18946 +    quit;
18947 +    proc sql;
18948 +      reset noprint;
18949 +      select count(*) into :em_lossflag from temploss;
18950 +    quit;
18952 +    %if &validFlag eq Y %then %do;
18953 +      proc transpose data=tempn
18954 +        %if "&adjusted" eq "N" %then %do;
18955 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18956 +        %end;
18957 +        %else %do;
18958 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18959 +        %end;
18960 +        by node;
18961 +        id statname;
18962 +      run;
18963 +      %if &em_profitflag ne 0 %then %do;
18964 +        proc transpose data=tempprofit out=tempprofit;
18965 +          by node category;
18966 +          id statname ;
18967 +        run;
18968 +      %end;
18969 +      %if &em_lossflag ne 0 %then %do;
18970 +        proc transpose data=temploss out=temploss;
18971 +          by node category;
18972 +          id statname ;
18973 +        run;
18974 +      %end;
18975 +      data tempprob;
18976 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18977 +        by node
18978 +        %if &multipleTar eq Y %then %do;
18979 +          target
18980 +        %end;
18981 +        category;
18982 +      run;
18983 +    %end;
18985 +    /* store percentcorrect value */
18986 +    data temppredict;
18987 +      merge tempprob temppredict(in=_a);
18988 +      by node category;
18989 +      if _a then do;
18990 +        percentCorrect = statvalue;
18991 +        %if &validFlag eq Y %then %do;
18992 +          vpercentCorrect= vstatvalue;
18993 +        %end;
18994 +      end;
18995 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18996 +      %if &validFlag eq Y %then %do;
18997 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18998 +      %end;
18999 +      ;
19000 +      if missing(percentCorrect) then delete;
19001 +      drop target;
19002 +    run;
19004 +    /* build profittext */
19005 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19006 +      data tempprofittext(keep= node profittext profitloss);
19007 +        length profittext $800 profitloss 8.;
19008 +        retain profittext profitloss;
19010 +        merge tempprob
19011 +        %if &em_profitflag ne 0 %then %do;
19012 +          tempprofit
19013 +        %end;
19014 +        %else %if &em_lossflag ne 0 %then %do;
19015 +          temploss
19016 +        %end;
19017 +        ;
19018 +        by node category;
19020 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19021 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19022 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19023 +          %let profittype = ALL;
19024 +        %end;
19026 +        /* create the profitloss variable for nodecolor if selected */
19027 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19029 +        %if "&profittype" eq "ALL" %then %do;
19030 +          if strip(CATEGORY)="&targetEvent" then do;
19031 +            profitloss=statvalue;
19032 +          end;
19033 +          if first.node then do;
19034 +            %if &validFlag eq N %then %do;
19035 +             %if &em_profitflag ne 0 %then %do;
19036 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19037 +             %end;
19038 +             %if &em_lossflag ne 0 %then %do;
19039 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19040 +             %end;
19041 +            %end;
19042 +            %else %do;
19043 +             %if &em_profitflag ne 0 %then %do;
19044 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19044!+;
19045 +             %end;
19046 +             %if &em_lossflag ne 0 %then %do;
19047 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19048 +             %end;
19049 +            %end;
19050 +          end;
19051 +          else if last.node then do;
19052 +            %if &validFlag eq N %then %do;
19053 +             %if &em_profitflag ne 0 %then %do;
19054 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19055 +             %end;
19056 +             %if &em_lossflag ne 0 %then %do;
19057 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19058 +             %end;
19059 +             /*if CATEGORY="&targetEvent" then do;
19060 +               profitloss=statvalue;
19061 +             end;*/
19062 +            %end;
19063 +            %else %do;
19064 +             %if &em_profitflag ne 0 %then %do;
19065 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19065!+14.&EM_PROPERTY_SPLITPRECISION);
19066 +                if CATEGORY="&targetEvent" then do;
19067 +                 profitloss=ALTERNATIVE_PROFIT;
19068 +                end;
19069 +             %end;
19070 +             %if &em_lossflag ne 0 %then %do;
19071 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19071!+14.&EM_PROPERTY_SPLITPRECISION);
19072 +                if CATEGORY="&targetEvent" then do;
19073 +                  profitloss=ALTERNATIVE_LOSS;
19074 +                end;
19075 +             %end;
19076 +            %end;
19077 +            output;
19078 +          end;
19079 +          else do;
19080 +            %if &validFlag eq N %then %do;
19081 +             %if &em_profitflag ne 0 %then %do;
19082 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19083 +             %end;
19084 +             %if &em_lossflag ne 0 %then %do;
19085 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19086 +             %end;
19087 +            %end;
19088 +            %else %do;
19089 +             %if &em_profitflag ne 0 %then %do;
19090 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19090!+14.&EM_PROPERTY_SPLITPRECISION);
19091 +             %end;
19092 +             %if &em_lossflag ne 0 %then %do;
19093 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19093!+14.&EM_PROPERTY_SPLITPRECISION);
19094 +             %end;
19095 +            %end;
19096 +          end;
19097 +        %end;
19098 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19099 +          if strip(CATEGORY) = "&targetevent" then do;
19100 +            %if &validFlag eq N %then %do;
19101 +             %if &em_profitflag ne 0 %then %do;
19102 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19103 +             %end;
19104 +             %if &em_lossflag ne 0 %then %do;
19105 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19106 +             %end;
19107 +             profitloss=statvalue;
19108 +            %end;
19109 +            %else %do;
19110 +             %if &em_profitflag ne 0 %then %do;
19111 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19111!+;
19112 +                profitloss=ALTERNATIVE_PROFIT;
19113 +             %end;
19114 +             %if &em_lossflag ne 0 %then %do;
19115 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19116 +                profitloss=ALTERNATIVE_LOSS;
19117 +             %end;
19118 +            %end;
19119 +            output;
19120 +          end;
19121 +        %end;
19122 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19123 +          if strip(CATEGORY) = "&targetevent" then do;
19124 +            %if &validFlag eq N %then %do;
19125 +             profitloss=statvalue;
19126 +            %end;
19127 +            %else %do;
19128 +             %if &em_profitflag ne 0 %then %do;
19129 +                profitloss=ALTERNATIVE_PROFIT;
19130 +             %end;
19131 +             %if &em_lossflag ne 0 %then %do;
19132 +                profitloss=ALTERNATIVE_LOSS;
19133 +             %end;
19134 +            %end;
19135 +            output;
19136 +          end;
19137 +        %end;
19138 +      run;
19139 +    %end;
19141 +    data tempprob(keep= node probtext);
19142 +      length probtext $800;
19143 +      retain probtext;
19144 +      set tempprob ;
19145 +      by node;
19147 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19148 +      %let probtype = &EM_PROPERTY_TARGET;
19149 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19150 +        %let probtype = ALL;
19151 +      %end;
19153 +      %if "&probtype" eq "ALL" %then %do;
19154 +        if first.node then do;
19155 +          %if &validFlag eq N %then %do;
19156 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19157 +          %end;
19158 +          %else %do;
19159 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19160 +          %end;
19161 +        end;
19162 +        else if last.node then do;
19163 +          %if &validFlag eq N %then %do;
19164 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19165 +          %end;
19166 +          %else %do;
19167 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19168 +          %end;
19169 +          output;
19170 +        end;
19171 +        else do;
19172 +          %if &validFlag eq N %then %do;
19173 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19174 +          %end;
19175 +          %else %do;
19176 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19177 +          %end;
19178 +        end;
19179 +      %end;
19180 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19181 +        if strip(CATEGORY) = "&targetevent" then do;
19182 +          %if &validFlag eq N %then %do;
19183 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19184 +          %end;
19185 +          %else %do;
19186 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19187 +          %end;
19188 +          output;
19189 +        end;
19190 +      %end;
19191 +      %else %if "&probtype" eq "NONE" %then %do;
19192 +        if last.node then do;
19193 +          output;
19194 +        end;
19195 +      %end;
19196 +    run;
19197 +  %end;
19199 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19201 +  %let oldexists=0;
19202 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19203 +     data old_tree_plot;
19204 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19205 +        rename nodecolor=oldnodecolor;
19206 +     run;
19208 +     proc sort data=old_tree_plot;
19209 +        by node;
19210 +     run;
19212 +     %let oldexists=1;
19213 +  %end;
19215 +  data &EM_USER_TREE_PLOT;
19216 +    length textall $800;
19217 +    merge tempoutnodes temptargetused
19219 +    %if &em_intTarget eq Y %then %do;
19220 +      tempinterval
19221 +    %end;
19223 +    %if &em_classTarget eq Y %then %do;
19225 +      %if &validFlag eq N %then %do;
19226 +        tempn(rename=(statvalue=N))
19227 +      %end;
19228 +      %else %do;
19229 +        tempn
19230 +      %end;
19232 +      temppredict tempprob
19234 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19235 +        tempprofittext
19236 +      %end;
19237 +    %end;
19238 +    ;
19239 +    by node;
19241 +    /* build nodetext based on user selection */
19242 +    textall="";
19244 +    %if &em_intTarget eq Y %then %do;
19245 +    if tarlevel="INTERVAL" then do;
19246 +      /* Nodeid */
19247 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19248 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19249 +      %end;
19251 +      /* Target identifier if multiple targets are used */
19252 +      %if "&multipleTar" eq "Y" %then %do;
19253 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19254 +      %end;
19256 +      %if &validFlag eq Y %then %do;
19257 +         /* Column labels displayed in validflag eq Y only */
19258 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19259 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19259!+noquote ))";
19260 +         %end;
19262 +         /* Average values */
19263 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19264 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19265 +         %end;
19267 +         /* RASE */
19268 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19269 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19270 +         %end;
19272 +         /* Count */
19273 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19274 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19275 +         %end;
19276 +      %end;
19277 +      %else %do;
19278 +         /* Average values */
19279 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19280 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19281 +         %end;
19283 +         /* RASE */
19284 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19285 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19286 +         %end;
19288 +         /* Count */
19289 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19290 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19291 +         %end;
19292 +      %end;
19294 +      /* nodecolor */
19295 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19296 +        nodecolor=PREDICTION;
19297 +      %end;
19298 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19299 +        nodecolor=RASE;
19300 +      %end;
19301 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19302 +        nodecolor=1;
19303 +      %end;
19305 +    end;
19306 +    %end;
19307 +    %if &em_classTarget eq Y %then %do;
19308 +    if tarlevel^="INTERVAL" then  do;
19310 +      /* Nodeid */
19311 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19312 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19313 +      %end;
19314 +      /* Target identifier if multiple targets are used */
19315 +      %if "&multipleTar" eq "Y" %then %do;
19316 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19317 +      %end;
19319 +      /* Predicted values */
19320 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19321 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19322 +      %end;
19324 +      /* Column labels displayed in validflag eq Y only */
19325 +      %if "&ValidFlag" eq "Y" %then %do;
19326 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19327 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19327!+noquote ))";
19328 +        %end;
19329 +      %end;
19331 +      /* Target Values */
19332 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19333 +        textall=strip(textall)||"0A"x||strip(probtext);
19334 +      %end;
19336 +      /* include profit or loss for all target levels */
19337 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19338 +        textall=strip(textall)||"0A"x||strip(profittext);
19339 +      %end;
19341 +      %if &validFlag eq N %then %do;
19342 +        /* Percent Correct */
19343 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19344 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19345 +        %end;
19347 +         /* Count */
19348 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19349 +          %if "&adjusted" eq "N" %then %do;
19350 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19351 +          %end;
19352 +          %else %do;
19353 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19354 +          %end;
19355 +         %end;
19356 +      %end;
19357 +      %else %do;
19358 +        /* Percent Correct */
19359 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19360 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19361 +        %end;
19363 +         /* Count */
19364 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19365 +          %if "&adjusted" eq "N" %then %do;
19366 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19367 +          %end;
19368 +          %else %do;
19369 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19370 +          %end;
19371 +         %end;
19372 +      %end;
19374 +      /* nodecolor */
19375 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19376 +       %if &multipleTar ne Y %then %do;
19377 +        nodecolor=&predTarget;
19378 +       %end;
19379 +       %else %do;
19380 +         nodecolor=percentcorrect;
19381 +       %end;
19382 +      %end;
19383 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19384 +        nodecolor=percentcorrect;
19385 +      %end;
19386 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19387 +        nodecolor=1;
19388 +      %end;
19389 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19390 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19391 +          nodecolor=percentcorrect;
19392 +        %end;
19393 +        %else %do;
19394 +          nodecolor=profitloss;
19395 +        %end;
19396 +      %end;
19398 +    end;
19399 +    %end;
19400 +    %if &em_intTarget eq Y %then %do;
19401 +     drop  PREDICTION  TARGET TARLEVEL
19402 +     %if &ValidFlag eq Y %then %do;
19403 +         VPREDICTION
19404 +     %end;
19405 +     ;
19406 +    %end;
19407 +    %if &em_classTarget eq Y %then %do;
19408 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19409 +     %if &ValidFlag eq Y %then %do;
19410 +         VSTATVALUE
19411 +     %end;
19412 +     ;
19413 +    %end;
19415 +  run;
19417 +  /* add leaf index information to plotds - based on primary target only*/
19418 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19419 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19420 +      set &EM_USER_OUTSTATS;
19421 +      if ((statname="PROBABILITY"
19422 +      %if &validexist %then %do;
19423 +       or statname="VALID: PROBABILITY"
19424 +      %end;
19425 +      ) AND (CATEGORY="&TARGETEVENT")
19426 +      %if "&multipleTar" eq "Y" %then %do;
19427 +        AND (Target="%EM_TARGET")
19428 +      %end;
19429 +      );
19430 +    run;
19432 +    %if &validexist %then %do;
19433 +      proc sort data=tempprob; by node; run;
19434 +      %let vpredTarget = V%substr(&predTarget, 2);
19435 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19436 +         by node;
19437 +         id statname;
19438 +      run;
19439 +    %end;
19440 +  %end;
19441 +  %else %do;
19442 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19443 +      set &EM_USER_OUTSTATS;
19444 +      if ((statname="PREDICTION"
19445 +      %if &validexist %then %do;
19446 +       or statname="VALID: PREDICTION"
19447 +      %end;
19448 +      )
19449 +      %if "&multipleTar" eq "Y" %then %do;
19450 +        AND (Target="%EM_TARGET")
19451 +      %end;
19452 +      );
19453 +    run;
19454 +    %if &validexist %then %do;
19455 +      proc sort data=tempprob; by node; run;
19456 +      %let vpredTarget = V%substr(&predTarget, 2);
19457 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19458 +         by node;
19459 +         id statname;
19460 +      run;
19461 +    %end;
19462 +  %end;
19464 +  proc sort data=tempprob; by node; run;
19465 +  data tempoutnodes;
19466 +    merge tempoutnodes tempprob;
19467 +    by node;
19468 +  run;
19470 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19471 +  data tempnodes;
19472 +    retain traintotal validtotal;
19473 +    set tempnodes(where=(leaf ne . ));
19474 +    tprob=round(&predTarget, .01);
19475 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19476 +      percevent_train=round(tprob*100, .01);
19477 +    %end;
19478 +    %else %do;
19479 +      percevent_train=tprob;
19480 +    %end;
19482 +    perc_train=round((n/traintotal)*100, 0.01);
19483 +    /* leafwidth already has a *10 multiplier */
19484 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19486 +    %if &validexist %then %do;
19487 +      %let vpredTarget = V%substr(&predTarget,2);
19488 +      vprob=round(&vpredTarget, .01);
19489 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19490 +        percevent_valid=round(vprob*100, .01);
19491 +      %end;
19492 +      %else %do;
19493 +        percevent_valid=vprob;
19494 +      %end;
19495 +      perc_valid=round((vn/validtotal)*100, .01);
19496 +    %end;
19498 +    index=_N_;
19499 +    keep node index tprob perc_train percevent_train
19500 +    %if &validexist %then %do;
19501 +        vprob percevent_valid perc_valid
19502 +    %end;
19503 +    ;
19504 +  run;
19505 +  proc sort data=tempnodes; by node; run;
19506 +  data &EM_USER_TREE_PLOT;
19507 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19508 +    by node;
19509 +    if missing(node) then delete;
19510 +    %if &oldexists %then %do;
19511 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19512 +      drop oldnodecolor;
19513 +    %end;
19514 +    abovetext = compbl(abovetext);
19516 +    /* add variable labels */
19517 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19518 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19519 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19520 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19521 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19522 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19524 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19525 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19526 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19527 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19528 +          %end;
19529 +          %else %do;
19530 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19531 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19532 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19533 +          %end;
19534 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19536 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19537 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19538 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19539 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19540 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19541 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19542 +          %end;
19543 +          %else %do;
19544 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19545 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19546 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19547 +          %end;
19548 +    ;
19549 +  run;
19551 +  /* delete temporary tables */
19552 +  proc datasets lib=work nolist;
19553 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19554 +  run;
19556 +%mend em_tree_makePlotDs;
19560 +%macro em_tree_report;
19562 +   /* report properties */
19563 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19564 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19565 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19566 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19567 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19568 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19569 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19570 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19571 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19572 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19573 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19574 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19575 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19577 +   %let validexist=0;
19578 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19579 +     %let validexist=1;
19580 +   %end;
19582 +   /* determine if multiple targets will be processed */
19583 +   %let em_tree_multipleTargets=N;
19584 +   %let em_tree_numTarget=1;
19585 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19586 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19587 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19588 +         %let em_tree_multipleTargets=N;
19589 +      %end;
19590 +      %else %do;
19591 +        data _null_;
19592 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19593 +          if eof then
19594 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19595 +        run;
19597 +        %if &em_tree_numTarget gt 1 %then %do;
19598 +           %let em_tree_multipleTargets=Y;
19599 +        %end;
19600 +     %end;
19601 +   %end;
19603 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19605 +   /* variable importance */
19606 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19607 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19609 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19610 +     /* and the columns may not be generated                                                                                 */
19611 +     %let em_tree_cvexists=;
19612 +     %let em_tree_surrexists=.;
19613 +     data _null_;
19614 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19615 +       if eof then do ;
19616 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19617 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19618 +       end;
19619 +     run;
19621 +     data &EM_USER_OUTIMPORT;
19622 +         set &EM_USER_OUTIMPORT;
19623 +         /* format columns based on Precison value specified */
19624 +         format importance 15.&EM_PROPERTY_PRECISION
19625 +              %if &validexist %then %do;
19626 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19627 +              %end;
19628 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19629 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19630 +              %end;
19631 +         ;
19632 +     run;
19634 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19635 +     proc print data=&EM_USER_OUTIMPORT
19636 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19637 +          (where=((nrules>0) OR (nsurrogates>0)))
19638 +        %end;
19639 +        %else %do;
19640 +           (where=(nrules>0))
19641 +        %end;
19642 +        label noobs
19643 +        ;
19644 +     run;
19645 +     title10;
19647 +   %end;
19649 +   /* Sequence */
19650 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19651 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19652 +   data _null_ ;
19653 +      set &EM_USER_outseq (obs=2) end=eof ;
19654 +      if eof then do ;
19655 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19656 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19657 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19658 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19659 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19660 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19661 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19662 +      end;
19663 +    run;
19665 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19666 +      data &EM_USER_OUTSEQ;
19667 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19668 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19669 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19670 +           _XMISC_=_VMISC_
19671 +        %end;
19672 +        %if "&em_tree_aprof" ne "."  %then %do;
19673 +           _XAPROF_=_VAPROF_
19674 +           _XPROF_ = _VPROF_
19675 +        %end;
19676 +        %if "&em_tree_aloss" ne "."  %then %do;
19677 +           _XALOSS_=_VALOSS_
19678 +        %end;
19679 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19680 +           _XPASE_ = _VPASE_
19681 +           _XPMISC_ = _VPMISC_
19682 +        %end;
19684 +        ));
19685 +     %end;
19686 +     %else %do;
19687 +        set &EM_USER_OUTSEQ;
19688 +     %end;
19690 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19691 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19692 +            _MISC_   15.&EM_PROPERTY_PRECISION
19693 +         %end;
19694 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19695 +            _PASE_  15.&EM_PROPERTY_PRECISION
19696 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19697 +         %end;
19698 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19699 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19700 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19701 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19702 +            %end;
19703 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19704 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19705 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19706 +            %end;
19707 +         %end;
19708 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19709 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19710 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19711 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19712 +            %end;
19713 +         %end;
19714 +         %if "&em_tree_seq" ne "." %then %do;
19715 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19716 +         %end;
19717 +         %if "&em_tree_vseq" ne "." %then %do;
19718 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19719 +         %end;
19720 +         %if "&em_tree_aprof" ne "." %then %do;
19721 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19722 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19723 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19724 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19725 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19726 +           %end;
19727 +         %end;
19728 +         %else %if "&em_tree_aloss" ne "." %then %do;
19729 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19730 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19731 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19732 +           %end;
19733 +         %end;
19734 +      ;
19735 +    run;
19736 +   %end;
19738 +   /* Observation Based Importance */
19739 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19741 +      /* need to check for 0 obs */
19742 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19743 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19744 +      %let rc=%sysfunc(close(&dsid));
19746 +      %if &onobs %then %do;
19747 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19748 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19750 +         data &EM_USER_OUTOBSIMP;
19751 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19752 +           if _a;
19753 +           by _INPUT1_;
19754 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19755 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19756 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19757 +                   %end;
19758 +                   ;
19759 +         run;
19760 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19761 +      %end;
19762 +   %end;
19764 +  %end;
19766 +  /* create dataset to support tree diagram and icicle plot */
19767 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19768 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19770 +  /* display tree diagram */
19771 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19772 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19774 +  /* display icicle diagram */
19775 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19776 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19778 +  /* Leaf Statistics Plot */
19779 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19781 +  /* print leaf information to output window */
19782 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19784 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19785 +       by descending N;
19786 +     run;
19788 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19789 +     %local vn;
19790 +     data _null_;
19791 +       set t (obs=2) end=eof;
19792 +       if eof then do;
19793 +         call symput("vn", strip(put(vn, best.)));
19794 +       end;
19795 +     run;
19797 +     data t;
19798 +       set t;
19799 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19800 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19801 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19802 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19803 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19804 +       %end;
19805 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19806 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19807 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19808 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19809 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19810 +          %end;
19811 +       %end;
19812 +       ;
19813 +     run;
19815 +     /* determine if rase is found in t */
19816 +    %let dsid=%sysfunc(open(t,i));
19817 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19818 +    %let rc=%sysfunc(close(&dsid));
19820 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19821 +     proc print data=t noobs label;
19822 +       where tprob ne .;
19823 +       var node depth N tprob
19824 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19825 +         %if "&vn" ne "." %then %do;
19826 +           VN
19827 +         %end;
19828 +         vprob
19829 +       %end;
19830 +       %if &raseexists %then %do;
19831 +            RASE
19832 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19833 +              VRASE
19834 +            %end;
19835 +       %end;
19836 +       ;
19837 +     run;
19838 +     title10;
19839 +  %end;
19841 +  /* create plots that are done during training of node */
19842 +  /* display iterative plot, including reference line */
19843 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19844 +   /* %if &nleaves eq  %then %do; */
19845 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19846 +      data _null_;
19847 +        set &EM_USER_OUTTOPOLOGY end=eof;
19848 +        if eof then do;
19849 +          call symput('nleaves', LEAF);
19850 +        end;
19851 +      run;
19852 +   /* %end; */
19854 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19855 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19856 +  %end;
19858 +  /* display leaf statistics */
19859 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19861 +  /* stats by node if multiple targets = Y */
19862 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19863 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19864 +    data &EM_USER_OUTSTATS;
19865 +      set &EM_USER_OUTSTATS;
19867 +     * if STATNAME="TARGET" then delete;
19868 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19869 +      drop leaf;
19870 +    run;
19871 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19873 +  %end;
19874 +  %else %do;
19875 +    /* add outstats and outdescribe to spk but not results */
19876 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19877 +  %end;
19879 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 92 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS2.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS2.TREE2_OUTSEQ.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 387 observations read from the data set EMWS2.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS2.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19880
19881  *------------------------------------------------------------*;
19882  * End REPORT: Tree2;
19883  *------------------------------------------------------------*;
 
19884  /* Reset EM Options */
19885  options formchar="|----|+|---+=|-/\<>*";
19886  options nocenter ls=256 ps=10000;
19887  goptions reset=all device=GIF NODISPLAY;
 
19888  proc sort data=WORK.EM_USER_REPORT;
19889  by ID VIEW;
19890  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19891  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19892  by NAME;
19893  run;
 
NOTE: There were 99 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19894  proc sort data=EMWS2.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19895  by NAME;
19896  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19897  data WORK.ASSESS_META;
19898  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19899  by NAME;
19900  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19901  data EM_temp_assessMeta;
19902  set EMWS2.Tree2_CMeta_TRAIN;
19903  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19904  run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19905  data EM_temp_assessdata;
19906  set EMWS2.Tree2_TRAIN(keep=
19907  F_RESPOND
19908  I_RESPOND
19909  P_RESPOND0
19910  P_RESPOND1
19911  Q_RESPOND0
19912  Q_RESPOND1
19913  R_RESPOND0
19914  R_RESPOND1
19915  U_RESPOND
19916  V_RESPOND0
19917  V_RESPOND1
19918  _WARN_
19919  RESPOND
19920  );
19921  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24206   data EM_temp_assessMeta;
24207   set EMWS2.Tree2_CMeta_TRAIN;
24208   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24209   run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24210   data EM_temp_assessdata;
24211   set EMWS2.Tree2_VALIDATE(keep=
24212   F_RESPOND
24213   I_RESPOND
24214   P_RESPOND0
24215   P_RESPOND1
24216   Q_RESPOND0
24217   Q_RESPOND1
24218   R_RESPOND0
24219   R_RESPOND1
24220   U_RESPOND
24221   V_RESPOND0
24222   V_RESPOND1
24223   _WARN_
24224   RESPOND
24225   );
24226   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 16121 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS2.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28520   %let _cn = %sysfunc(getoption(CENTER));
28521   options nocenter;
28522   proc print data=EMWS2.Tree2_EMREPORTFIT noobs label;
28523   var STAT LABEL TRAIN
28524   VALIDATE
28525   ;
28526   by TARGET TARGETLABEL;
28527   title9 ' ';
28528   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28529   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28530   title10;
28531   options &_cn;
 
28532   proc sort data=EMWS2.Tree2_EMCLASSIFICATION nothreads;
28533   by DATAROLE TARGET TARGETLABEL;
28534   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS2.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28535   %let _cn = %sysfunc(getoption(CENTER));
28536   options nocenter;
28537   proc print data=EMWS2.Tree2_EMCLASSIFICATION noobs label;
28538   var from into pct_row pct_col count percent
28539   ;
28540   by DATAROLE TARGET TARGETLABEL;
28541   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28542   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28543   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28544   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28545   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28546   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28547   where _TYPE_='PREDICTION';
28548   title9 ' ';
28549   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28550   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28551   title9;
28552   title10;
28553   options &_cn;
 
28554   %let _cn = %sysfunc(getoption(CENTER));
28555   options nocenter;
28556   data EMWS2.Tree2_EMEVENTREPORT;
28557   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28557 !  8;
28558   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28558 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28558 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28558 ! FALSEEVENT
28559   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28559 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28559 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28560      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28561   FALSEEVENT=0;
28562   FALSENEVENT=0;
28563   TRUEEVENT=0;
28564   TRUENEVENT=0;
28565   set EMWS2.Tree2_EMEVENTREPORT;
28566   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS2.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28567   proc print data=EMWS2.Tree2_EMEVENTREPORT noobs label;
28568   title9 ' ';
28569   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28570   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28571   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28572   title10;
28573   options &_cn;
 
28574   proc datasets library=EMWS2 nolist;
28575   modify Tree2_EMRANK;
28576   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28577   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28578   run;
 
NOTE: MODIFY was successful for EMWS2.TREE2_EMRANK.DATA.
28579   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28580   %let _cn = %sysfunc(getoption(CENTER));
28581   options nocenter;
28582   proc print data=EMWS2.Tree2_EMRANK label noobs;
28583   var
28584   decile gain lift liftc resp respc N _meanP_;
28585   by
28586   notsorted DATAROLE
28587   notsorted TARGET
28588   notsorted TARGETLABEL
28589   ;
28590   title9 ' ';
28591   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28592   run;
 
NOTE: There were 40 observations read from the data set EMWS2.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28593   title10;
28594   options &_cn;
 
28595   proc datasets library=EMWS2 nolist;
28596   modify Tree2_EMSCOREDIST;
28597   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28598   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28599   run;
 
NOTE: MODIFY was successful for EMWS2.TREE2_EMSCOREDIST.DATA.
28600   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
