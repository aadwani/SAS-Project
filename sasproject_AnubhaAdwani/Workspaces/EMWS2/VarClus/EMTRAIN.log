*------------------------------------------------------------*
* Training Log
Date:                December 08, 2017
Time:                02:38:51
*------------------------------------------------------------*
14715  proc freq data=EMWS2.VarClus_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.VarClusMETA;
14717  run;

NOTE: There were 99 observations read from the data set EMWS2.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14718  proc print data=WORK.VarClusMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 7 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14724  title10;

14725  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15116  *------------------------------------------------------------*;
15117  * VarClus: Generation of macros and macro variables;
15118  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15119  *------------------------------------------------------------*;

15120  %let EMEXCEPTIONSTRING=;
15121  *------------------------------------------------------------*;
15122  * TRAIN: VarClus;
15123  *------------------------------------------------------------*;
15124  %let EM_ACTION = TRAIN;
15125  %let syscc = 0;
15126  
15127  %macro main;
15128  
15129     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15130     %include temp;
15131     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15132     %include temp;
15133     filename temp;
15134  
15135    %SetProperties;
15136  
15137     %if %upcase(&EM_ACTION) = CREATE %then %do;
15138         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15139         %include temp;
15140         filename temp;
15141         %create;
15142     %end;
15143     %else
15144     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15145          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15146             %include temp;
15147             filename temp;
15148             %train;
15149     %end;
15150     %else
15151     %if %upcase(&EM_ACTION) = SCORE %then %do;
15152             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15153             %include temp;
15154             filename temp;
15155             %score;
15156     %end;
15157     %else
15158     %if %upcase(&EM_ACTION) = REPORT %then %do;
15159             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15160             %include temp;
15161             filename temp;
15162             %report;
15163     %end;
15164     /*
15165     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15166         %put 'OPENING TABLE';
15167     %end;
15168     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15169         %put 'CLOSE TABLE';
15170     %end;
15171     */
15172  %mend main;
15173  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15174 +
15175 +/* Initialize property macro variables */
15176 +%macro SetProperties;
15177 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15178 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15179 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15180 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15181 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15182 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15183 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15184 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15185 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15186 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15187 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15188 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15189 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15190 +
15191 +%mend SetProperties;
15192 +
15193 +%Macro MakeDummyVariables(indata=,
15194 +                          outvar=,
15195 +                          outdata=,
15196 +                          fileref=,
15197 +                          recreatecmeta=N, /* optional */
15198 +                          incmeta=,     /* optional */
15199 +                          outcmeta=,    /* optional */
15200 +                          ndummyvars=_ndummyvars
15201 +                          );
15202 +    %global &ndummyvars;
15203 +
15204 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15205 +       class
15206 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15207 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15208 +    ;
15209 +    run;
15210 +    %let &ndummyvars = 0;
15211 +    data _null_;
15212 +    %let dsid = %sysfunc(open(work._classout));
15213 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15214 +    %let dsid = %sysfunc(close(&dsid));
15215 +    run;
15216 +
15217 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15218 +       input
15219 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15220 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15221 +        / level=nominal stdize=no;
15222 +       make outvar = &outvar;
15223 +       score data = &indata out =&outdata;
15224 +       code  file=  "&fileref";
15225 +    run;
15226 +    %if &recreatecmeta eq Y %then %do;
15227 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15228 +    data _tmpds;
15229 +        set _tmpds;
15230 +           ROLE = 'INPUT';
15231 +           LEVEL = 'INTERVAL';
15232 +           CREATOR='DMZIP';
15233 +           if NAME = '_TYPE_' then delete;
15234 +    run;
15235 +    data &outcmeta;
15236 +         set &incmeta _tmpds;
15237 +    run;
15238 +    %end;
15239 +    proc datasets lib=work nolist;
15240 +      delete  _dmdbdat _dmdbcat _classout
15241 +    %if &recreatecmeta eq Y %then %do;
15242 +    _tmpds
15243 +    %end;
15244 +    ;
15245 +    quit;
15246 +%Mend MakeDummyVariables;
15247 +
15248 +/*--- Determine Optimal Number of Cluster ----
15249 +%macro FindClusNum(statds=, groupds=, minvariation=);
15250 +   %global optnclus;
15251 +   data varclus_tmp(drop=_NAME_);
15252 +      set &statDs;
15253 +      where _type_ ='PROPOR';
15254 +   run;
15255 +   proc sort data=varclus_tmp;
15256 +      by _NCL_;
15257 +   run;
15258 +   proc transpose data=varclus_tmp out=varclus_tmp;
15259 +      by _NCL_;
15260 +      var %EM_INTERVAL_INPUT
15261 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15262 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15263 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15264 +          %do i = 2 %to &nvar;
15265 +          %let varname = %sysfunc(varname(&dsid, &i));
15266 +          &varname
15267 +          %end;
15268 +      %end;
15269 +   ;
15270 +   run;
15271 +
15272 +   %if &minVariation eq %then %do;
15273 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15274 +   %end;
15275 +   %if ^(0<&minVariation<100) %then %do;
15276 +       %let minVariation = 90;
15277 +   %end;
15278 +
15279 +   data _null_;
15280 +      set varclus_tmp end=eof;
15281 +      by _NCL_;
15282 +      retain flag 0;
15283 +      if first._ncl_ then flag=0;
15284 +      if .<col1 < &minVariation then flag=1;
15285 +      if last._ncl_ and ^flag then do;
15286 +         call symput('OPTNCL', _ncl_);
15287 +         stop;
15288 +      end;
15289 +     if eof then call symput('OPTNCL', _ncl_);
15290 +   run;
15291 +
15292 +   %let optnclus = &OPTNCL;
15293 +
15294 +   data varclus_tmp(drop=_NCL_ _NAME_);
15295 +      set &statDs;
15296 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15297 +   run;
15298 +   proc sort data=varclus_tmp;
15299 +      by _TYPE_;
15300 +   run;
15301 +   proc transpose data=varclus_tmp out=varclus_tmp;
15302 +      by _TYPE_;
15303 +   run;
15304 +   proc sort data=varclus_tmp;
15305 +      by _name_ _type_;
15306 +   run;
15307 +
15308 +  proc transpose data=varclus_tmp out=&groupds;
15309 +      by _NAME_;
15310 +   run;
15311 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15312 +      by Cluster descending Rsquare;
15313 +      where Cluster ne 0;
15314 +   run;
15315 +   proc datasets lib=work nolist mt=(DATA VIEW);
15316 +      delete varclus_tmp;
15317 +   run;
15318 +   quit;
15319 +%mend findClusNum;
15320 +*/
15321 +
15322 +%macro getNclusfromTrain(inoutstat=, nc=);
15323 +%global &nc;
15324 +data _null_;
15325 +    set &inoutstat end=eof;
15326 +    if eof then do;
15327 +    call symput("&nc", _ncl_);
15328 +    end;
15329 +run;
15330 +%mend  getNclusfromTrain;
15331 +
15332 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15333 +
15334 +     *--- Build Code to Modify Metadata ---*;
15335 +     filename X "&deltacodefile";
15336 +     data _null_;
15337 +        FILE X;
15338 +        set &groupds end=eof;
15339 +        /*by Cluster;*/
15340 +         if _N_=1 then do;
15341 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15342 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15343 +           %end;
15344 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15345 +           put "if upcase(strip(NAME)) in (";
15346 +        end;
15347 +        if Strip(upcase(Selected)) eq 'YES' then do;
15348 +           string = '"'!!trim(left(VARIABLE))!!'"';
15349 +           put string;
15350 +        end;
15351 +        if eof then do;
15352 +           put ') then ROLE="INPUT";';
15353 +           put 'else ROLE="REJECTED";';
15354 +           put 'end;';
15355 +
15356 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15357 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15358 +           %end;
15359 +        end;
15360 +     run;
15361 +     quit;
15362 +
15363 +     filename X;
15364 +
15365 +     quit;
15366 +%mend MakeDeltaCode;
15367 +
15368 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15369 +    %if ^%sysfunc(exist(&statds)) %then %do;
15370 +         %goto doendc;
15371 +    %end;
15372 +
15373 +    data &corrds(drop=_TYPE_ _NCL_) ;
15374 +       set &statds;
15375 +       where _type_ eq 'CORR' ;
15376 +    run ;
15377 +    proc sort data=&corrds;
15378 +       by _NAME_ ;
15379 +    run ;
15380 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15381 +      BY _NAME_ ;
15382 +    run ;
15383 +    data &corrplotds;
15384 +       length _Y_ $100;
15385 +       set &corrplotDs;
15386 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15387 +    run ;
15388 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15389 +       set &corrplotds;
15390 +       where _LABEL_ ne '' ;
15391 +       keep _TMP_ _LABEL_ ;
15392 +    run ;
15393 +    data _null_;
15394 +       nobs=0;
15395 +       dsid = open('varclus_match');
15396 +       if dsid then do;
15397 +          nobs = attrn(dsid, 'NOBS');
15398 +          dsid = close(dsid);
15399 +       end;
15400 +       call symput ('CORR_NOBS', nobs);
15401 +    run;
15402 +    %if &corr_nobs %then %do;
15403 +        proc sort data=varclus_match;
15404 +           by _name_;
15405 +        run ;
15406 +        proc sort data=&corrplotds;
15407 +           by _name_;
15408 +        run ;
15409 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15410 +           merge varclus_match &corrplotds;
15411 +           by _NAME_ ;
15412 +           if _X_ eq '' then _X_=_NAME_ ;
15413 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15414 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15415 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15416 +
15417 +       run ;
15418 +    %end;
15419 +    %else %do;
15420 +        proc sort data=&corrplotds;
15421 +           by _name_;
15422 +        run ;
15423 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15424 +           set &corrplotds;
15425 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15426 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15427 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15428 +
15429 +        run ;
15430 +    %end;
15431 +    proc sort data=&corrplotds;
15432 +       by _X_ _Y_;
15433 +    run ;
15434 +    proc datasets lib=work nolist mt=(DATA VIEW);
15435 +       delete varclus_match;
15436 +    run;
15437 +    quit;
15438 +
15439 +%doendc:
15440 +
15441 +%mend MakeVarClusCorrData;
15442 +
15443 +%macro MakeStatPlotData(statds= , outstatplotds=);
15444 +   %if %sysfunc(exist(&statds)) %then %do;
15445 +
15446 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15447 +          set &statDs;
15448 +          where _type_ in('MEAN', 'STD', 'N');
15449 +       run ;
15450 +       proc transpose data=varclus_tmp out=&outstatplotds;
15451 +          id _TYPE_ ;
15452 +       run ;
15453 +       data &outstatplotds;
15454 +          set &outstatplotds(obs=1000);
15455 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15456 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15457 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15458 +          else SCALEDSTD= STD ;
15459 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15460 +       run ;
15461 +       proc sort data=&outstatplotds;
15462 +          by descending SCALEDSTD ;
15463 +       run ;
15464 +       proc datasets lib=work nolist mt=(DATA VIEW);
15465 +          delete varclus_tmp;
15466 +       run;
15467 +       quit;
15468 +    %end;
15469 +
15470 +%mend MakeStatPlotData;
15471 +
15472 +
15473 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15474 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15475 +    data &EM_USER_OUTSTATSCORE;
15476 +          set &indata;
15477 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15478 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15479 +          if _TYPE_ = 'STD' then _NAME_='STD';
15480 +          DROP _TYPE_ _NCL_;
15481 +     run;
15482 +
15483 +     filename _file_  "&fileRef";
15484 +
15485 +     data _null_;
15486 +        FILE _file_ MOD;
15487 +        put ' ';
15488 +        put '/*-------------------------------------------------*/';
15489 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15490 +        put '/*-------------------------------------------------*/';
15491 +        put ' ';
15492 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15493 +
15494 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15495 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15496 +
15497 +        %let k = 1;
15498 +        %do %while(^%sysfunc(fetch(&dsid)));
15499 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15500 +                %if &k > 2 %then %do;
15501 +                 %let cn = %eval(&k-2);
15502 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15503 +                %end;
15504 +                %let k = %eval(&k+1);
15505 +        %end;
15506 +
15507 +        %let rc = %sysfunc(rewind(&dsid));
15508 +
15509 +        %do i= 2 %to &nvar;
15510 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15511 +            %do %while(^%sysfunc(fetch(&dsid)));
15512 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15513 +                %if &_name = MEAN %then
15514 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15515 +                %else %if &_name = STD %then
15516 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15517 +                %else %do;
15518 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15519 +                      %let abscoeff = %sysfunc(abs(&coeff));
15520 +                          %if &abscoeff >  0 %then %do;
15521 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15522 +                           %end;
15523 +                 %end;
15524 +             %end;
15525 +             %let rc = %sysfunc(rewind(&dsid));
15526 +         %end;
15527 +
15528 +        %let dsid= %sysfunc(close(&dsid));
15529 +       run;
15530 +%mend CreateScoreCode;
15531 +
15532 +
15533 +
15534 +/*----------------------------------------------------------
15535 +    Instead of using %MakeRSquareData,
15536 +    %MakeVarClusResultTable at macro2.source is used
15537 + +----------------------------------------------------------*/
15538 +
15539 +
15540 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15541 +
15542 +/* modifying  from ods rsquare = data */
15543 +
15544 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15545 +    Length Cluster $16;
15546 +    length Variable $32;
15547 +    Length VariableLabel $64;
15548 +    set &indata; retain CurrentCluster;
15549 +    if NumberOfClusters ^= &ncluster then delete;
15550 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15551 +    CurrentCluster = Cluster;
15552 +   run;
15553 +proc sort data =&outdata ;
15554 +     by Cluster RsquareRatio;
15555 +run;
15556 +data _tmprsq(drop=index);
15557 +     set &outdata; by Cluster;
15558 +     if first.Cluster then do;
15559 +     index = strip(scan(Cluster,2 ));
15560 +     Variable = "Clus"||index;
15561 +     VariableLabel = "Cluster Component "||index;
15562 +     OwnCluster = 1;
15563 +     NextClosest = .;
15564 +     RsquareRatio = 0;
15565 +     output;
15566 +     end;
15567 +run;
15568 +
15569 +proc sort data = _tmprsq ;
15570 +     by Cluster RsquareRatio;
15571 +run;
15572 +data &outdata;
15573 +     set &outdata _tmprsq;
15574 +by Cluster;
15575 +run;
15576 +
15577 +
15578 +/* Just create the Selected variable with all YES */
15579 +
15580 +data &outdata;
15581 +    set &outdata; by cluster;
15582 +    length Selected $8;
15583 +    Selected = 'YES';
15584 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15585 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15586 +    rename OwnCluster = RSqWithClusterComp;
15587 +    rename NextClosest = RSqWithNextClusComp;
15588 +run;
15589 +
15590 +
15591 +/* Selected = Y/N will be done %score section -----
15592 +
15593 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15594 +data &outdata;
15595 +    set &outdata; by cluster;
15596 +    length Selected $8;
15597 +    if first.Cluster then Selected = 'YES';
15598 +    else Selected = 'NO';
15599 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15600 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15601 +    rename OwnCluster = RSqWithClusterComp;
15602 +    rename NextClosest = RSqWithNextClusComp;
15603 +run;
15604 +%end;
15605 +%else %do;
15606 +data &outdata;
15607 +    set &outdata; by cluster;
15608 +    if last.Cluster then Selected = 'YES';
15609 +    else Selected = 'NO';
15610 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15611 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15612 +    rename OwnCluster = RSqWithClusterComp;
15613 +    rename NextClosest = RSqWithNextClusComp;
15614 +run;
15615 +%end;
15616 +---------------------------------------------------------------*/
15617 +
15618 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15619 +/* to calculate NextClosestClusRsq */
15620 +proc transpose data = &inClusRSquare  out=_clusRsq;
15621 +      by cluster;
15622 +      run;
15623 +data _clusRsq;
15624 +     set _clusRsq;
15625 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15626 +run;
15627 +
15628 +proc sort data=_clusRsq;
15629 +    by cluster col1;
15630 +    run;
15631 +data _clusRsq(drop=_NAME_ _LABEL_);
15632 +     set _clusRsq; by cluster;
15633 +     if last.Cluster then output;
15634 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15635 +     rename COL1 = RSqWithNextClusComp;
15636 +     rename Cluster = Variable;
15637 +     label  Cluster = "Variable";
15638 +run;
15639 +
15640 +proc sort data =&outdata;
15641 +     by Variable;
15642 +run;
15643 +data &outdata;
15644 +    merge &outdata _clusRsq;
15645 +    by Variable;
15646 +run;
15647 +proc sort data =&outdata;
15648 +by Cluster  RsquareRatio;
15649 +run;
15650 +quit;
15651 +%end;
15652 +
15653 +proc datasets lib = work nolist;
15654 +     delete _tmprsq _clusRsq;
15655 +     run;
15656 +quit;
15657 +
15658 +%mend MakeRSquareData;
15659 +
15660 +
15661 +/*-------------------------------------------------------------------------*/
15662 +
15663 +
15664 +
15665 +%macro ModifyCorr(indata=,
15666 +                  outdata=,
15667 +                  rsquare = Y
15668 +                  );
15669 +    data corr_tmp;
15670 +        set &indata;
15671 +    run;
15672 +     proc sql;
15673 +           update &indata
15674 +           set
15675 +     %let dsid = %sysfunc(open(work.corr_tmp));
15676 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15677 +          %do i = 4 %to &nvar;
15678 +          %let _name = %sysfunc(varname(&dsid, &i));
15679 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15680 +            %else  %let _name_md = &_name;
15681 +            %if &i < &nvar %then %do;
15682 +               &_name = 1- &_name_md ,
15683 +            %end;
15684 +            %else %do;
15685 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15686 +            %end;
15687 +          %end;
15688 +      %let dsid= %sysfunc(close(&dsid));
15689 +
15690 +      select * from &indata;
15691 +      run;
15692 +      proc datasets lib = work nolist;
15693 +           delete corr_tmp;
15694 +      run;
15695 +      quit;
15696 +
15697 + %mend ModifyCorr;
15698 +
15699 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15700 +    data &outdata(drop= _NCL_  _TYPE_);
15701 +       set &indata;
15702 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15703 +       rename _NAME_ = Cluster;
15704 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15705 +    run;
15706 +    %if &RSquare eq Y %then %do;
15707 +     data corr_tmp;
15708 +        set &outdata;
15709 +     run;
15710 +
15711 +     data &outdata(drop=i);
15712 +          set &outdata;
15713 +          %let dsid = %sysfunc(open(work.corr_tmp));
15714 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15715 +          %do i = 2 %to &nvar;
15716 +            %let _name = %sysfunc(varname(&dsid, &i));
15717 +            %let _name_md = &_name.**2;
15718 +                &_name = &_name_md;
15719 +          %end;
15720 +      %let dsid= %sysfunc(close(&dsid));
15721 +      run;
15722 +      proc datasets lib = work nolist;
15723 +           delete corr_tmp;
15724 +      run;
15725 +
15726 +    %end;
15727 +     quit;
15728 +%mend MakeClusStructCorrData;
15729 +
15730 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15731 +    data &outdata(drop= _NCL_  _TYPE_);
15732 +       set &indata;
15733 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15734 +       rename _NAME_ = Cluster;
15735 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15736 +    run;
15737 +    data corr_tmp;
15738 +        set &outdata;
15739 +    run;
15740 +
15741 +    %let dsid = %sysfunc(open(work.corr_tmp));
15742 +    %let nclus2= %eval(&ncluster+1);
15743 +    data &outdata;
15744 +         set &outdata;
15745 +          %do i = 2 %to &nclus2;
15746 +          %let i_1 = %eval(&i-1);
15747 +            %let _name = %sysfunc(varname(&dsid, &i));
15748 +            %let _newName = Clus&i_1;
15749 +                rename &_name = &_newName; ;
15750 +                *label &_name ="Cluster &i_1";
15751 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15752 +          %end;
15753 +          keep Cluster
15754 +          %do i = 2 %to &nclus2;
15755 +                %let _name = %sysfunc(varname(&dsid, &i));
15756 +                &_name
15757 +          %end;
15758 +          ;
15759 +    %let dsid= %sysfunc(close(&dsid));
15760 +     run;
15761 +     quit;
15762 +
15763 +    %if &RSquare eq Y %then %do;
15764 +
15765 +       data corr_tmp;
15766 +        set &outdata;
15767 +     run;
15768 +
15769 +     data &outdata(drop=i);
15770 +          set &outdata;
15771 +          %let dsid = %sysfunc(open(work.corr_tmp));
15772 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15773 +          %do i = 2 %to &nvar;
15774 +            %let _name = %sysfunc(varname(&dsid, &i));
15775 +            %let _name_md = &_name.**2;
15776 +                &_name = &_name_md;
15777 +          %end;
15778 +      %let dsid= %sysfunc(close(&dsid));
15779 +      run;
15780 +    %end;
15781 +
15782 +    %if &makeplotds eq Y %then %do;
15783 +     proc transpose data = &outdata
15784 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15785 +          by cluster;
15786 +     run;
15787 +     data &plotds;
15788 +          set  &plotds;
15789 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15790 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15791 +     run;
15792 +     %end;
15793 +     proc datasets lib = work nolist;
15794 +           delete corr_tmp;
15795 +     run;
15796 +     quit;
15797 +%mend MakeInterClusCorrData;
15798 +
15799 +
15800 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15801 +
15802 +data &outlink(drop = Selected);
15803 +     set &indata;
15804 +     LINKID = _N_;
15805 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15806 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15807 +run;
15808 +data &outnode(keep=NODEID TYPE LABEL);
15809 +    set &indata;
15810 +    length TYPE $16;
15811 +    rename Variable = NODEID;
15812 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15813 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15814 +    then  TYPE = "CLUSTER";
15815 +    else  TYPE="VARIABLE";
15816 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15817 +run;
15818 +quit;
15819 +%mend MakeClusConstellData;
15820 +
15821 +
15822 +
15823 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15824 +
15825 +data &outlink(drop = Selected);
15826 +     set &indata;
15827 +     LINKID = _N_;
15828 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15829 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15830 +run;
15831 +data &outnode(keep=NODEID TYPE LABEL);
15832 +    set &indata;
15833 +    length TYPE $16;
15834 +    rename Variable = NODEID;
15835 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15836 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15837 +    then  TYPE = "CLUSTER";
15838 +    else  TYPE="VARIABLE";
15839 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15840 +run;
15841 +quit;
15842 +%mend MakeClusConstellData;
15843 +
15844 +
15845 +/*--- This will work only when inds is not a view data -------
15846 +
15847 +%macro getNVarNObs(inds=, nvar=, nobs=);
15848 +
15849 +    %global &nvar;
15850 +    %global &nobs;
15851 +    data _null_;
15852 +         dsid = open("&inds");
15853 +         nv = attrn(dsid, 'NVAR');
15854 +         no = attrn(dsid, 'NOBS');
15855 +         dsid = close(dsid);
15856 +         call symput("&nvar", nv);
15857 +         call symput("&nobs", no);
15858 +    run;
15859 +    quit;
15860 +%mend  getNVarNObs;
15861 +
15862 ++---------------------------------------------------------------*/
15863 +
15864 +
15865 +%macro getNVar(inds=, nvar=);
15866 +    %global &nvar;
15867 +    data _null_;
15868 +         dsid = open("&inds");
15869 +         nv = attrn(dsid, 'NVAR');
15870 +         dsid = close(dsid);
15871 +         call symput("&nvar", nv);
15872 +    run;
15873 +    quit;
15874 +%mend  getNVar;
15875 +
15876 +
15877 +
15878 +%macro getNObs(inds=, nobs=);
15879 +    %global &nobs;
15880 +    data _null_;
15881 +        set &inds end=eof;
15882 +        if eof then call symput("&nobs", _N_);
15883 +    run;
15884 +    quit;
15885 +%mend  getNObs;
15886 +
15887 +%Macro CreateVarclusMeta(trainnum=);
15888 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15889 +    data &EM_USER_VARCLUSMETA;
15890 +         length TrainNum 8.;
15891 +         length NewTrain $8;
15892 +         length NGCluster 8.;
15893 +         length ExportedComp $16;
15894 +         length HideVariable $8;
15895 +         TrainNum = &trainnum;
15896 +         NewTrain = "Y";
15897 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15898 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15899 +         NGCluster = 0; /* zero means no twostage */
15900 +   run;
15901 +   quit;
15902 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15903 +
15904 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15905 +    data &outdata(drop= _NCL_  _TYPE_);
15906 +       set &indata;
15907 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15908 +       %if &globalclusid ne %then %do;
15909 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15910 +       rename _NAME_ = Cluster;
15911 +       %end;
15912 +       %else %do;
15913 +        _NAME_ = upcase(_NAME_);
15914 +       rename _NAME_ = Cluster;
15915 +       %end;
15916 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15917 +    run;
15918 +    data corr_tmp;
15919 +        set &outdata;
15920 +    run;
15921 +
15922 +    %let dsid = %sysfunc(open(work.corr_tmp));
15923 +    %let nclus2= %eval(&ncluster+1);
15924 +    data &outdata;
15925 +         set &outdata;
15926 +          %do i = 2 %to &nclus2;
15927 +          %let i_1 = %eval(&i-1);
15928 +            %let _name = %sysfunc(varname(&dsid, &i));
15929 +            %if &globalclusid ne %then
15930 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15931 +                     rename &_name = &_newName;
15932 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15933 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15934 +                %end;
15935 +            %else
15936 +                %do; %let _newName = CLUS&i_1;
15937 +                     rename &_name = &_newName;
15938 +                     *label &_name ="Cluster &i_1";
15939 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15940 +                %end;
15941 +          %end;
15942 +          keep Cluster
15943 +          %do i = 2 %to &nclus2;
15944 +                %let _name = %sysfunc(varname(&dsid, &i));
15945 +                &_name
15946 +          %end;
15947 +          ;
15948 +    %let dsid= %sysfunc(close(&dsid));
15949 +     run;
15950 +     quit;
15951 +
15952 +    %if &RSquare eq Y %then %do;
15953 +
15954 +       data corr_tmp;
15955 +        set &outdata;
15956 +     run;
15957 +
15958 +     data &outdata;
15959 +          set &outdata;
15960 +          %let dsid = %sysfunc(open(work.corr_tmp));
15961 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15962 +          %do i = 2 %to &nvar;
15963 +            %let _name = %sysfunc(varname(&dsid, &i));
15964 +            %let _name_md = &_name.**2;
15965 +                &_name = &_name_md;
15966 +          %end;
15967 +      %let dsid= %sysfunc(close(&dsid));
15968 +      run;
15969 +    %end;
15970 +
15971 +    %if &makeplotds eq Y %then %do;
15972 +     proc transpose data = &outdata
15973 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15974 +          by cluster;
15975 +     run;
15976 +     data &plotds;
15977 +          set  &plotds;
15978 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15979 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15980 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15981 +     run;
15982 +     %end;
15983 +     proc datasets lib = work nolist;
15984 +           delete corr_tmp;
15985 +     run;
15986 +     quit;
15987 +%mend MakeInterClusCorrData;
15988 +
15989 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15990 +    data _tmpds(drop= _NCL_);
15991 +       set &indata;
15992 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15993 +       %if &globalclusid ne %then %do;
15994 +           _NAME_ = "GC&globalclusid.";
15995 +       rename _NAME_ = Cluster;
15996 +       %end;
15997 +       %else %do;
15998 +        _NAME_ = "CLUS";
15999 +        rename _NAME_ = Cluster;
16000 +       %end;
16001 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16002 +    run;
16003 +    proc transpose data =_tmpds out =&outdata;
16004 +    run;
16005 +
16006 +    data &outdata(drop=COL1);
16007 +        %if &globalclusid ne %then %do;
16008 +        length GCluster $16;
16009 +        %end;
16010 +        length Cluster $32;
16011 +        length _NAME_ $32;
16012 +         set &outdata;
16013 +         _NAME_ = upcase(_NAME_);
16014 +         rename _NAME_=Variable;
16015 +         *label _NAME_="Variable";
16016 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16017 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16018 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16019 +
16020 +         %if &globalclusid ne %then %do;
16021 +          GCluster = "GC&globalclusid";
16022 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16023 +         %end;
16024 +         %else %do;
16025 +         Cluster = "CLUS"||strip(COL1);
16026 +        %end;
16027 +         rename COL2 = RSqWithOwnClusComp;
16028 +         *label COL2 = "R-Square With Own Cluster Component";
16029 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16030 +
16031 +   run;
16032 +   proc sort data =&outdata;
16033 +        by Cluster RSqWithOwnClusComp;
16034 +   run;
16035 +   proc datasets lib = work nolist;
16036 +           delete _tmpds;
16037 +   run;
16038 +   quit;
16039 +%mend MakeOwnRSquare;
16040 +
16041 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16042 +    data &outdata(drop= _NCL_  _TYPE_);
16043 +       %if &globalclusid ne %then %do;
16044 +        length GCluster $16;
16045 +        %end;
16046 +       set &indata;
16047 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16048 +       %if &globalclusid ne %then %do;
16049 +         GCluster = "GC&globalclusid";
16050 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16051 +         rename _NAME_ = Cluster;
16052 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16053 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16054 +
16055 +       %end;
16056 +       %else %do;
16057 +         _NAME_ = upcase(_NAME_);
16058 +         rename _NAME_ = Cluster;
16059 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16060 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16061 +
16062 +       %end;
16063 +     run;
16064 +    %if &RSquare eq Y %then %do;
16065 +     data corr_tmp;
16066 +          set &outdata;
16067 +     run;
16068 +     %let istart = 2;
16069 +     %if &globalclusid ne %then %let istart = 3;
16070 +     data &outdata;
16071 +          set &outdata;
16072 +          %let dsid = %sysfunc(open(work.corr_tmp));
16073 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16074 +          %do i =&istart %to &nvar;
16075 +            %let _name = %sysfunc(varname(&dsid, &i));
16076 +            %let _name_md = &_name.**2;
16077 +                &_name = &_name_md;
16078 +          %end;
16079 +      %let dsid= %sysfunc(close(&dsid));
16080 +      run;
16081 +      proc datasets lib = work nolist;
16082 +           delete corr_tmp;
16083 +      run;
16084 +    %end;
16085 +     quit;
16086 +%mend MakeClusStructCorrData;
16087 +
16088 +/*
16089 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16090 +*/
16091 +
16092 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16093 +
16094 +     /* The indata should be the outdata
16095 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16096 +
16097 +     proc sort data =&indata out=_tmpclusRsq;
16098 +     by cluster;
16099 +     run;
16100 +
16101 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16102 +      by cluster;
16103 +     run;
16104 +
16105 +     proc sort data=_tmpclusRsq;
16106 +        by _NAME_ COL1;
16107 +     run;
16108 +
16109 +     data _tmpclusRsq;
16110 +         length _NAME_ $32;
16111 +         set _tmpclusRsq; by _NAME_;
16112 +          _NAME_ = upcase(_NAME_);
16113 +          %if &ncluster ne 1 %then %do;
16114 +             if last._NAME_ then delete;
16115 +          %end;
16116 +          %else %do;
16117 +             COL1 = 0;
16118 +          %end;
16119 +     run;
16120 +     /* need to sort again */
16121 +     proc sort data=_tmpclusRsq;
16122 +        by _NAME_ COL1;
16123 +     run;
16124 +
16125 +     data &outdata;
16126 +         set _tmpclusRsq; by _NAME_;
16127 +         Cluster = upcase(Cluster);
16128 +         if last._NAME_ then output;
16129 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16130 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16131 +         rename COL1 = RSqWithNextClusComp;
16132 +         Cluster = upcase(Cluster);
16133 +         rename Cluster = ClosestCluster;
16134 +         *label  Cluster = "Next Closest Cluster";
16135 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16136 +         rename _NAME_ = Variable;
16137 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16138 +    run;
16139 +
16140 +
16141 +    %if &globalclusid ne %then %do;
16142 +    data &outdata;
16143 +       length GCluster $16;
16144 +       set &outdata;
16145 +       GCluster = "GC&globalclusid";
16146 +       run;
16147 +    %end;
16148 +    proc datasets lib = work nolist;
16149 +           delete _tmpclusRsq;
16150 +    run;
16151 +    quit;
16152 +%mend FindNextClosestClusByVar;
16153 +
16154 +
16155 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16156 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16157 +     proc sort data =&indata out=_tmpclusRsq;
16158 +     by cluster;
16159 +     run;
16160 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16161 +     by cluster;
16162 +     run;
16163 +     proc sort data=_tmpclusRsq;
16164 +        by _NAME_ col1;
16165 +     run;
16166 +     data _tmpclusRsq;
16167 +         length _NAME_ $32;
16168 +         set _tmpclusRsq; by _NAME_;
16169 +          _NAME_ = upcase(_NAME_);
16170 +          %if &ncluster ne 1 %then %do;
16171 +             if last._NAME_ then delete;
16172 +          %end;
16173 +          %else %do;
16174 +             COL1 = 0;
16175 +          %end;
16176 +     run;
16177 +     data &outdata;
16178 +         set _tmpclusRsq; by _NAME_;
16179 +         Cluster = upcase(Cluster);
16180 +         if last._NAME_ then output;
16181 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16182 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16183 +         rename COL1 = RSqWithNextClusComp;
16184 +         Cluster = upcase(Cluster);
16185 +         rename Cluster = ClosestCluster;
16186 +         *label  Cluster = "Next Closest Cluster";
16187 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16188 +         rename _NAME_ = Variable;
16189 +         *label  _NAME_ = "Variable";
16190 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16191 +
16192 +    run;
16193 +    %if &globalclusid ne %then %do;
16194 +    data &outdata;
16195 +       length GCluster $16;
16196 +       set &outdata;
16197 +       GCluster = "GC&globalclusid";
16198 +       run;
16199 +    %end;
16200 +
16201 +    proc datasets lib = work nolist;
16202 +           delete _tmpclusRsq;
16203 +    run;
16204 +
16205 +    quit;
16206 +%mend FindNextClosestClusByCluster;
16207 +
16208 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16209 +/*----
16210 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16211 +-----------*/
16212 +
16213 +proc sort data =&indata1;
16214 +    by Variable;
16215 +run;
16216 +proc sort data =&indata2;
16217 +    by Variable;
16218 +run;
16219 +data &outdata;
16220 +    merge &indata1 &indata2;
16221 +    by Variable;
16222 +    length Type $16;
16223 +    Type = 'Variable';
16224 +    *label Type ='Type';
16225 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16226 +run;
16227 +
16228 +
16229 +data &indata3;
16230 +    set  &indata3 ;
16231 +    length RSqWithOwnClusComp 8.;
16232 +    Cluster = Variable;
16233 +    RSqWithOwnClusComp = 1;
16234 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16235 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16236 +    length Type $16;
16237 +    Type = 'ClusterComp';
16238 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16239 +
16240 +;
16241 +run;
16242 +
16243 +proc sort data=&outdata;
16244 +    by Cluster;
16245 +run;
16246 +proc sort data =&indata3;
16247 +    by Cluster;
16248 +run;
16249 +
16250 +data &outdata;
16251 +     set &outdata &indata3;
16252 +     by Cluster;
16253 +run;
16254 +
16255 +
16256 +/* Create the Selected variable with all YES */
16257 +
16258 +data &outdata;
16259 +     set &outdata;
16260 +     length RsqRatio 8.;
16261 +     length Selected $8;
16262 +     *label RSqRatio = "1-R**2 Ratio";
16263 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16264 +     *label Selected = "Variable Selected";
16265 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16266 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16267 +     Selected ='YES';
16268 +     rename _LABEL_ = Label;
16269 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16270 +run;
16271 +
16272 +
16273 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16274 +        Just create the Selected variable with all YES at the step above
16275 + +------------------------------------------------------------------------------+
16276 +
16277 +proc sort data=&outdata;
16278 +    by Cluster RsqRatio;
16279 +run;
16280 +
16281 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16282 +data &outdata;
16283 +     set &outdata; by Cluster;
16284 +     length Selected $8;
16285 +     label Selected = "Variable Selected";
16286 +     if  first.Cluster then Selected ='Yes';
16287 +     else Selected = 'No';
16288 +    run;
16289 +%end;
16290 +%else %do;
16291 +data &outdata(drop = _var _varchange);
16292 +     set &outdata; retain _var 0; by Cluster;
16293 +     length Selected $8;
16294 +     label Selected = "Variable Selected";
16295 +     if first.Cluster then  _varchange = 0;
16296 +     else _varchange =1;
16297 +     if _var ne _varchange then  Selected  = 'Yes';
16298 +     else Selected = 'No';
16299 +     if last.cluster then  _var = 0;
16300 +     else _var = _varchange;
16301 +run;
16302 +%end;
16303 +
16304 +--------------------------------------------------------------*/
16305 +
16306 +quit;
16307 +%mend MakeVarClusResultTable;
16308 +
16309 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16310 +     proc sort data =&indata;
16311 +        by cluster;
16312 +     run;
16313 +     proc transpose data =&indata
16314 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16315 +          by cluster;
16316 +     run;
16317 +     data &outdata;
16318 +          set  &outdata;
16319 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16320 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16321 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16322 +     run;
16323 +     %if &globalclusid ne %then %do;
16324 +     data &outdata;
16325 +          Length GCluster $16;
16326 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16327 +          set  &outdata;
16328 +          GCluster ="GC&globalclusid.";
16329 +          run;
16330 +     %end;
16331 +
16332 +%Mend MakePlotDataFromCorrTable;
16333 +
16334 +
16335 +%macro MakeCorrelation(indata=,
16336 +                       outstat=_tmpoutstat,
16337 +                       corrmatrix=N,
16338 +                       outcorr=_tmpoutcorr,
16339 +                       includeclassvar=N,
16340 +                       target=,
16341 +                       freq=,
16342 +                       weight=);
16343 +   %if &target eq  %then %do;
16344 +
16345 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16346 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16347 +       %if &includeclassvar eq Y %then %do;
16348 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16349 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16350 +          %do i = 2 %to &nvar;
16351 +          %let varname = %sysfunc(varname(&dsid, &i));
16352 +          &varname
16353 +          %end;
16354 +       %end;
16355 +       ;
16356 +      %if &freq ne  %then %do;
16357 +          freq &freq;
16358 +      %end;
16359 +      %if &weight ne  %then %do;
16360 +          weight &weight;
16361 +      %end;
16362 +
16363 +      run;
16364 +      %if &corrmatrix eq Y %then %do;
16365 +      data  &outcorr (drop = _NCL_ _TYPE_);
16366 +           set  &outstat ;
16367 +           if _TYPE_ ='CORR' then output;
16368 +      run;
16369 +      %end;
16370 +    %end;
16371 +    %else %do;
16372 +       proc corr data=&indata outp=&outstat noprint;
16373 +            var
16374 +       %let dsid = %sysfunc(open(&indata));
16375 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16376 +          %do i = 1 %to &nvar;
16377 +              %let _name = %sysfunc(varname(&dsid, &i));
16378 +              %if &_name ne &target %then;
16379 +              &_name
16380 +           %end;
16381 +        %let dsid= %sysfunc(close(&dsid));
16382 +        ;
16383 +        with &target;
16384 +        run;
16385 +    %end;
16386 +    quit;
16387 +%mend MakeCorrelation;
16388 +
16389 +
16390 +%macro MakeCorrelationDistance(indata=,
16391 +                               outdata=,
16392 +                               rsquare = N
16393 +                               );
16394 +    data corr_tmp;
16395 +        set &indata;
16396 +        if _N_ = 1 then do;
16397 +           output;
16398 +           stop;
16399 +         end;
16400 +    run;
16401 +    %if &outdata ne  %then %let  _outdata = &outdata;
16402 +    %else %let _outdata = &indata;
16403 +
16404 +    data &_outdata;
16405 +         set &indata;
16406 +
16407 +         %let dsid = %sysfunc(open(work.corr_tmp));
16408 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16409 +          %do i = 2 %to &nvar;
16410 +              %let _name = %sysfunc(varname(&dsid, &i));
16411 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16412 +              %else  %let _name_md = &_name;
16413 +              &_name = 1- &_name_md;
16414 +          %end;
16415 +      %let dsid= %sysfunc(close(&dsid));
16416 +      run;
16417 +      proc datasets lib = work nolist;
16418 +           delete corr_tmp;
16419 +      run;
16420 +      quit;
16421 +  %mend MakeCorrelationDistance;
16422 +
16423 +
16424 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16425 +                                   rsquare = N
16426 +                                   );
16427 +    data corr_tmp;
16428 +        set &indata;
16429 +    run;
16430 +    proc sql noprint;
16431 +           update &indata
16432 +           set
16433 +     %let dsid = %sysfunc(open(work.corr_tmp));
16434 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16435 +          %do i = 4 %to &nvar;
16436 +          %let _name = %sysfunc(varname(&dsid, &i));
16437 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16438 +            %else  %let _name_md = &_name;
16439 +            %if &i < &nvar %then %do;
16440 +               &_name = 1- &_name_md ,
16441 +            %end;
16442 +            %else %do;
16443 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16444 +            %end;
16445 +          %end;
16446 +      %let dsid= %sysfunc(close(&dsid));
16447 +
16448 +      select * from &indata;
16449 +      run;
16450 +     data &indata( drop = _NCL_);
16451 +           set &indata;
16452 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16453 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16454 +     run;
16455 +     data &indata(DROP = _NCL_);
16456 +           set &indata;
16457 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16458 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16459 +           rename _NAME_ = _VAR_;
16460 +     run;
16461 +     proc datasets lib = work nolist;
16462 +           delete corr_tmp;
16463 +     run;
16464 +     quit;
16465 + %mend UpdateOutStatCorrToDistance;
16466 +
16467 +
16468 +%macro HierClusWithCorr(indata= ,
16469 +                        ncluster=,
16470 +                        method = Ward,
16471 +                        outtree = _outtree,
16472 +                        idvar =_VAR_,
16473 +                        outdata=,
16474 +                        rescore = N,
16475 +                        newncluster=
16476 +                        );
16477 +      %global &newncluster;
16478 +      %if &rescore ne Y %then %do;
16479 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16480 +                   method=&method outtree=&outtree noprint;
16481 +           id &idvar;
16482 +      run;
16483 +      %end;
16484 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16485 +      run;
16486 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16487 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16488 +      run;
16489 +      data _outcontent;
16490 +          set _outcontent;
16491 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16492 +          index = 1;
16493 +          rename NAME = _NAME_;
16494 +      run;
16495 +      proc sort data=_outcontent;
16496 +          by _NAME_;
16497 +      run;
16498 +      proc sort data =&outdata;
16499 +           by _NAME_;
16500 +      run;
16501 +      data &outdata(drop=index);
16502 +          merge &outdata _outcontent;
16503 +          by _NAME_;
16504 +          if index = . then delete;
16505 +      run;
16506 +      /*-----------------------------------------------------------*/
16507 +      data &outdata;
16508 +           length CLUSNAME $16;
16509 +           set &outdata;
16510 +           if CLUSTER > &ncluster then delete;
16511 +           CLUSNAME='GC'||strip(CLUSTER);
16512 +           *label CLUSNAME = "Cluster Name";
16513 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16514 +           rename _NAME_ = VARIABLE ;
16515 +           *label _NAME_ = "Variable";
16516 +           *label CLUSTER = "Cluster";
16517 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16518 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16519 +      run;
16520 +      proc sort data=&outdata out=&outdata;
16521 +           by CLUSTER;
16522 +      run;
16523 +      proc means data =&outdata noprint;
16524 +           output out=_meanout;
16525 +      run;
16526 +      data _null_;
16527 +            set _meanout;
16528 +            if strip(_STAT_) eq 'MAX' then do;
16529 +            call symput("&newncluster", CLUSTER);
16530 +            stop;
16531 +            end;
16532 +      run;
16533 +
16534 +      proc datasets lib = work nolist;
16535 +           delete _outcontent _meanout;
16536 +      run;
16537 +      quit;
16538 +%mend  HierClusWithCorr;
16539 +
16540 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16541 +
16542 +     data _tmpindata;
16543 +          set &indata;
16544 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16545 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16546 +          if _TYPE_ = 'STD' then _NAME_='STD';
16547 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16548 +          DROP _TYPE_ _NCL_;
16549 +     run;
16550 +
16551 +     filename _file_  "&fileRef";
16552 +
16553 +     data _null_;
16554 +        FILE _file_ MOD;
16555 +        put ' ';
16556 +        put "/*-------------------------------------------------*/";
16557 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16558 +        put "/*-------------------------------------------------*/";
16559 +        put ' ';
16560 +        %let dsid = %sysfunc(open(work._tmpindata));
16561 +
16562 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16563 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16564 +        %let k = 1;
16565 +        %do %while(^%sysfunc(fetch(&dsid)));
16566 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16567 +               %if &k > 2 %then %do;
16568 +                %let cn = %eval(&k-2);
16569 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16570 +                %end;
16571 +                %let k = %eval(&k+1);
16572 +
16573 +        %end;
16574 +        %let rc = %sysfunc(rewind(&dsid));
16575 +
16576 +        %do j= 2 %to &nvar;
16577 +            %let _varname = %sysfunc(varname(&dsid, &j));
16578 +            %do %while(^%sysfunc(fetch(&dsid)));
16579 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16580 +                %if &_name = MEAN %then
16581 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16582 +                %else %if &_name = STD %then
16583 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16584 +                %else %do;
16585 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16586 +                      %let abscoeff = %sysfunc(abs(&coeff));
16587 +                          %if &abscoeff >  0 %then %do;
16588 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16589 +                           %end;
16590 +                 %end;
16591 +             %end;
16592 +             %let rc = %sysfunc(rewind(&dsid));
16593 +         %end;
16594 +
16595 +        %let dsid= %sysfunc(close(&dsid));
16596 +
16597 +     run;
16598 +
16599 +     filename _file_;
16600 +     proc datasets lib = work nolist;
16601 +           delete _tmpindata;
16602 +     run;
16603 +     quit;
16604 +%mend CreateScoreCode2;
16605 +
16606 +
16607 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16608 +
16609 +     /*--- Build Code to Modify Metadata ---*/
16610 +     filename X "&deltacodefile";
16611 +     data _null_;
16612 +        FILE X;
16613 +        set &groupds end=eof;
16614 +        if _N_=1 then do;
16615 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16616 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16617 +           %end;
16618 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16619 +           put "if upcase(strip(NAME)) in (";
16620 +        end;
16621 +        if Strip(upcase(Selected)) eq 'YES' then do;
16622 +           string = '"'!!trim(left(VARIABLE))!!'"';
16623 +           put string;
16624 +        end;
16625 +        if eof then do;
16626 +           put ') then ROLE="INPUT";';
16627 +           put 'else ROLE="REJECTED";';
16628 +           put 'end;';
16629 +
16630 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16631 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16632 +           %end;
16633 +        end;
16634 +     run;
16635 +     quit;
16636 +
16637 +     filename X;
16638 +     quit;
16639 +%mend MakeDeltaCode2;
16640 +
16641 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16642 +  %global &ngc;
16643 +  data _null_;
16644 +  %if &indata ne %then %do;
16645 +      %let dsid = %sysfunc(open(&indata));
16646 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16647 +      %let dsid = %sysfunc(close(&dsid));
16648 +  %end;
16649 +  %else %do;
16650 +       %let nvar = %eval(&ninput+&ndummy); ;
16651 +  %end;
16652 +  %let numgc = %eval(&nvar/&div+2);
16653 +  %let &ngc = &numgc;
16654 +   run;
16655 +  quit;
16656 +%mend getInitialGClusterNumber;
16657 +
16658 +
16659 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16660 +data &outlink(drop = Selected);
16661 +     set &indata;
16662 +     LINKID = _N_;
16663 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16664 +run;
16665 +data &outnode(keep=NODEID TYPE LABEL);
16666 +    set &indata;
16667 +    length TYPE $16;
16668 +    rename VARIABLE = NODEID;
16669 +    *label  CLUSNAME="Node ID";
16670 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16671 +    TYPE = "VARIABLE";
16672 +    *label TYPE = "Node Type";
16673 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16674 +    run;
16675 +data _tmp(keep=NODEID TYPE LABEL);
16676 +    set &indata;
16677 +    length TYPE $16;
16678 +    rename CLUSNAME = NODEID;
16679 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16680 +    TYPE = "GCLUSTER";
16681 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16682 +    run;
16683 +proc sort data=_tmp;
16684 +    by NODEID;
16685 +run;
16686 +data _tmp;
16687 +    set _tmp; by NODEID;
16688 +    if first.NODEID then output;
16689 +run;
16690 +proc sort data=&outnode;
16691 +    by NODEID;
16692 +run;
16693 +data  &outnode;
16694 +    set _tmp &outnode;
16695 +run;
16696 +proc datasets lib = work nolist;
16697 +     delete _tmp;
16698 +run;
16699 +quit;
16700 +%mend MakeGobalConstellData;
16701 +
16702 +/* Make contellation plot data among GCLUSTERS */
16703 +
16704 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16705 +
16706 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16707 +     set &indata;
16708 +     LINKID = _N_;
16709 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16710 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16711 +     end;
16712 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16713 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16714 +     end;
16715 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16716 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16717 +    end;
16718 +run;
16719 +
16720 +data _tmp_outrsquare;
16721 +        set &inoutrsq;
16722 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16723 +run;
16724 +
16725 +proc freq data =_tmp_outrsquare noprint;
16726 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16727 +run;
16728 +
16729 +data &outnode(keep=_NAME_ TYPE LABEL);
16730 +    set &outlink;
16731 +    length TYPE $16;
16732 +    length LABEL $100;
16733 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16734 +
16735 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16736 +    TYPE = "GCLUSTER";
16737 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16738 +    end;
16739 +    else do;
16740 +    TYPE= "ROOT";
16741 +    LABEL= _NAME_;
16742 +    end;
16743 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16744 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16745 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16746 +    run;
16747 +
16748 +proc sort data=&outnode;
16749 +     by _NAME_;
16750 +proc sort data=_tmp_GCLUSFREQ;
16751 +     by _NAME_;
16752 +run;
16753 +
16754 +data  &outnode;
16755 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16756 +     if COUNT=. then COUNT=1;
16757 +run;
16758 +
16759 +proc datasets lib = work nolist;
16760 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16761 +run;
16762 +
16763 +quit;
16764 +%Mend MakeGClusterConstData;
16765 +
16766 +
16767 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16768 +
16769 +    data _gscoretmpds;
16770 +          set &indata;
16771 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16772 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16773 +          if _TYPE_ = 'STD' then _NAME_='STD';
16774 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16775 +          DROP _TYPE_ _NCL_;
16776 +     run;
16777 +
16778 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16779 +        GCluster Component &globalclusid ------ */
16780 +
16781 +    filename _file_  "&fileref";
16782 +
16783 +    data _null_;
16784 +        %if &globalclusid eq 1 %then %do;
16785 +          FILE _file_;
16786 +        %end;
16787 +        %else %do;
16788 +          FILE _file_ MOD;
16789 +        %end;
16790 +
16791 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16792 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16793 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16794 +
16795 +        %let k = 1;
16796 +        %do %while(^%sysfunc(fetch(&dsid)));
16797 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16798 +                %if &k > 2 %then %do;
16799 +                put "&_name = 0 ; ";
16800 +                %end;
16801 +                %let k = %eval(&k+1);
16802 +        %end;
16803 +
16804 +        %let rc = %sysfunc(rewind(&dsid));
16805 +        %do i= 2 %to &nvar;
16806 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16807 +            %do %while(^%sysfunc(fetch(&dsid)));
16808 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16809 +                %if &_name = MEAN %then
16810 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16811 +                %else %if &_name = STD %then
16812 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16813 +                %else %do;
16814 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16815 +                      %let abscoeff = %sysfunc(abs(&coeff));
16816 +                          %if &abscoeff >  0 %then %do;
16817 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16818 +                           %end;
16819 +                 %end;
16820 +             %end;
16821 +             %let rc = %sysfunc(rewind(&dsid));
16822 +
16823 +         %end;
16824 +
16825 +        %let dsid= %sysfunc(close(&dsid));
16826 +       run;
16827 +
16828 +
16829 +       proc datasets lib=work nolist;
16830 +            delete _gscoretmpds;
16831 +       run;
16832 +      quit;
16833 +
16834 +%mend CreateGClusterScoreCode;
16835 +
16836 +
16837 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16838 +
16839 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16840 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16841 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16842 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16843 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16844 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16845 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16846 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16847 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16848 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16849 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16850 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16851 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16852 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16853 +
16854 +   filename gsfile "&gscorecode";
16855 +
16856 +   data &EM_USER_GSCORE;
16857 +             set &indata;
16858 +             %include  gsfile;
16859 +        keep
16860 +        %do i=1 %to &ngcluster;
16861 +         %let gcvarname = GC&i;
16862 +         &gcvarname
16863 +        %end;
16864 +     ;
16865 +   run;
16866 +
16867 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16868 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16869 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16870 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16871 +    noprint  ;
16872 +     var
16873 +       %do i=1 %to &ngcluster;
16874 +         %let gcvarname = GC&i;
16875 +         &gcvarname
16876 +        %end;
16877 +   ;
16878 +   run;
16879 +
16880 +
16881 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16882 +   data &EM_USER_GSCORECORRPLOT ;
16883 +        set &EM_USER_GSCORECORRPLOT;
16884 +        rename _X_ = X;
16885 +        rename _Y_ = Y;
16886 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16887 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16888 +   run;
16889 +
16890 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16891 +
16892 +   data &EM_USER_GSCORETREE;
16893 +        length _NAME_ $32;
16894 +        length _LABEL_ $100;
16895 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16896 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16897 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16898 +        end;else do;
16899 +         _LABEL_ = _NAME_;
16900 +        end;
16901 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16902 +
16903 +   run;
16904 +
16905 +   quit;
16906 +
16907 +%mend MakeGClusterCorrelation;
16908 +
16909 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16910 +
16911 +
16912 +%macro train;
16913 +
16914 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16915 +   %include temp;
16916 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16917 +   %include temp;
16918 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16919 +   %include temp;
16920 +   filename temp;
16921 +
16922 +   %let VARCLUS_MAXNUMOBS = 100000;
16923 +   %let VARCLUS_MAXNUMVAR = 200;
16924 +   %let trainnum = 0;
16925 +   %let error = 0;
16926 +
16927 +   %if &EM_IMPORT_DATA eq %then %do;
16928 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16929 +       %let  error = 1;
16930 +       %goto endtrain;
16931 +   %end;
16932 +
16933 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16934 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16935 +        %let  error = 1;
16936 +        %goto endline;
16937 +    %end;
16938 +
16939 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16940 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16941 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16942 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16943 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16944 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16945 +
16946 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16947 +        %if  &_num_input_total < 2 %then %do;
16948 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16949 +            %let error = 2;
16950 +            %goto endtrain;
16951 +        %end;
16952 +   %end;
16953 +   %else %do;
16954 +         %if  &_num_input_interval < 2 %then %do;
16955 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16956 +         %let error = 2;
16957 +         %goto endtrain;
16958 +         %end;
16959 +   %end;
16960 +
16961 +   %em_checkerror();
16962 +
16963 +   %if &EMEXCEPTIONSTRING ne %then %do;
16964 +       %goto endtrain;
16965 +   %end;
16966 +
16967 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16968 +
16969 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16970 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16971 +                             outvar=&EM_USER_OUTDUMMY,
16972 +                             outdata=_newtrainds,
16973 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16974 +
16975 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16976 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16977 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16978 +                proc datasets lib=work nolist;
16979 +                delete  _newtrainds;
16980 +                run;
16981 +                quit;
16982 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16983 +                %let error = 3;
16984 +               %goto endtrain;
16985 +            %end;
16986 +        %end;
16987 +
16988 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16989 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16990 +
16991 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16992 +                %let trainnum = 2;
16993 +            %end;
16994 +            %else %do;
16995 +                %let trainnum = 1;
16996 +            %end;
16997 +        %end;
16998 +    %end;
16999 +    %else %do;
17000 +
17001 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17002 +
17003 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
17004 +
17005 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17006 +
17007 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17008 +                  %let error = 3;
17009 +                 %goto endtrain;
17010 +            %end;
17011 +        %end;
17012 +
17013 +
17014 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17015 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17016 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17017 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17018 +                %let trainnum = 2;
17019 +            %end;
17020 +            %else %do;
17021 +                %let trainnum = 1;
17022 +            %end;
17023 +        %end;
17024 +
17025 +   %end;
17026 +
17027 +    %em_checkerror();
17028 +
17029 +    %if &EMEXCEPTIONSTRING ne %then %do;
17030 +       %let error = 4;
17031 +       %goto endtrain;
17032 +    %end;
17033 +
17034 +    %CreateVarclusMeta(trainnum=&trainnum);
17035 +
17036 +    %if &error > 0 %then  %goto endtrain;
17037 +
17038 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17039 +
17040 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17041 +           %train1;
17042 +       %end;
17043 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17044 +           %train2;
17045 +       %end;
17046 +
17047 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17048 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17049 +      %em_copyfile(infref=_in, outfref=_out);
17050 +      filename _in;
17051 +      filename _out;
17052 +
17053 +
17054 +   %endtrain:
17055 +
17056 +
17057 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17059 +%macro VarClus(indata=,
17060 +               outstat=,
17061 +               outtree=,
17062 +               vars=,
17063 +               freq=,
17064 +               weight=,
17065 +               includeclassvar=
17066 +               );
17068 +   %if &vars eq %then
17069 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17071 +        /*Add by ruzhan, May 28, 2013*/
17072 +        ods graphics on;
17073 +        %let odspath =;
17074 +        data _null_;
17075 +            path = pathname('WORK');
17076 +            call symput('odspath', path);
17077 +        run;
17078 +        ods listing gpath="&odspath";
17079 +        ods output DENDROGRAM=&outtree;
17080 +       proc varclus data = &indata outstat= &outstat
17081 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17082 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17083 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17084 +        /*-----------------------
17085 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17086 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17087 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17088 +       %end;
17089 +       -------------------------*/
17090 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17091 +            maxc = &EM_PROPERTY_MAXCLUS
17092 +       %end;
17094 +       /*------------------------------------------------------------------------------------------------------
17095 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17096 +        ------------------------------------------------------------------------------------------------------*/
17098 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17099 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17100 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17101 +       %end;
17103 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17104 +            proportion = &EM_PROPERTY_PROPORTION
17105 +       %end;
17106 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17107 +               summary
17108 +       %end;
17110 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17111 +           short
17112 +       %end;
17113 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17114 +           corr trace simple
17115 +       %end;
17116 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17117 +          noprint
17118 +       %end;
17119 +        /*Comment out by ruzhan, May 28, 2013*/
17120 +       /*       outtree=&outtree*/
17121 +       ;
17122 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17124 +      %if &includeclassvar eq Y %then %do;
17125 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17126 +          %if &dsid > 0 %then %do;
17127 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17128 +              %do i = 2 %to &nvar;
17129 +                  %let varname = %sysfunc(varname(&dsid, &i));
17130 +                   &varname
17131 +              %end;
17133 +          %end;
17134 +      %end;
17136 +      ;
17137 +      /*------------------------
17138 +      %if &freq ne  %then %do;
17139 +          freq &freq;
17140 +      %end;
17141 +      %if &weight ne  %then %do;
17142 +          weight &weight;
17143 +      %end;
17144 +      ----------------------------*/
17145 +      %if %EM_FREQ ne %then %do;
17146 +           Freq %EM_FREQ;
17147 +      %end;
17148 +      ;
17149 +    run;
17150 +    ods graphics off;
17151 +    %endline:
17152 +    quit;
17153 +%mend VarClus;
17155 +%macro Train1;
17157 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17158 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17159 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17160 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17161 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17162 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17163 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17164 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17165 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17166 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17167 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17168 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17169 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17171 +   /*
17172 +     %let VARCLUS_MAXNUMOBS = 100;
17173 +     %let VARCLUS_MAXNUMVAR = 200;
17174 +   */
17176 +   /* Train
17178 +   %if &EM_IMPORT_DATA eq %then %do;
17179 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17180 +       %goto endtrain1;
17181 +   %end;
17183 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17184 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17185 +        %goto endtrain1;
17186 +   %end;
17187 +   */
17188 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17189 +       /* moved this to pretrain ------------
17191 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17192 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17193 +                             outvar=&EM_USER_OUTDUMMY,
17194 +                             outdata=_newtrainds,
17195 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17197 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17198 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17199 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17200 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17201 +                %goto endtrain;
17202 +            %end;
17203 +        %end;
17205 +        +-------------------------------------*/
17207 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17208 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17209 +          There is no _newtrainds */
17210 +         %VarClus( indata=&EM_IMPORT_DATA,
17211 +                  outstat=&EM_USER_OUTSTAT,
17212 +                  outtree = &EM_USER_OUTTREE,
17213 +                  includeclassvar=N
17214 +                 );
17215 +        %end;
17216 +        %else %do;
17217 +        %VarClus( indata=_newtrainds,
17218 +                  outstat=&EM_USER_OUTSTAT,
17219 +                  outtree = &EM_USER_OUTTREE,
17220 +                  includeclassvar=Y
17221 +                 );
17222 +         proc datasets lib=work nolist;
17223 +              delete  _newtrainds;
17224 +         run;
17225 +         %end;
17226 +    %end;
17227 +    %else %do;
17229 +        /*----- moved this to pretrain ------------
17230 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17231 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17232 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17233 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17234 +                 %goto endtrain;
17235 +            %end;
17236 +        %end;
17237 +        +-------------------------------------*/
17239 +        %VarClus(indata=&EM_IMPORT_DATA,
17240 +                  outstat=&EM_USER_OUTSTAT,
17241 +                  outtree =&EM_USER_OUTTREE,
17242 +                  includeclassvar=N
17243 +               );
17245 +   %end;
17247 +   %em_checkerror();
17249 +   %if &EMEXCEPTIONSTRING ne %then %do;
17250 +       %goto endtrain1;
17251 +   %end;
17252 +    /*
17253 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17254 +    */
17256 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17258 +    %let gid=;
17260 +    /*--- To make the main result table ----------------------*/
17262 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17263 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17264 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17265 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17266 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17267 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17269 +   /* Inter Cluster Correlation Plot ------------------------*/
17271 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17272 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17274 +   /* Create some other data sets for results ----*/
17276 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17277 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17278 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17280 +  /*---- move this to Score action ------------
17281 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17282 +   */
17284 +   /* create score code at training time */
17285 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17286 +   %endtrain1:
17287 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17290 +%macro VarClus2( indata=,
17291 +                 outdata=,
17292 +                 outstat =outstat,
17293 +                 outrsquare=outrsquare,
17294 +                 outtree = outtree,
17295 +                 outclusstruct = outclusstruct,
17296 +                 outcluscorr =outcluscorr,
17297 +                 outcluscorrplot =outcluscorrplot,
17298 +                 outclusrsquare =outclusrsquare,
17299 +                 outstatplot = outstatplot,
17300 +                 outcorr = outcorr,
17301 +                 outcorrplot = outcorrplot,
17302 +                 clusdata=,
17303 +                 outnode=outnode,
17304 +                 outlink=outlink,
17305 +                 ngroup =1  );
17306 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17307 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17308 +              %goto endline;
17309 +         %end;
17311 +        %global numglobalcluster;
17312 +        %let  numglobalcluster = &ngroup;
17313 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17314 +        %do vci =1 %to &ngroup;
17315 +           data tmp_clusdata;
17316 +                set &clusdata;
17317 +                if CLUSTER ne &vci then delete;
17318 +           run;
17319 +           %let outstatds = &outstat.&vci;
17320 +           %let outrsquareds = &outrsquare.&vci;
17321 +           %let outtreeds = &outtree.&vci;
17322 +           %let outclusstuctds = &outclusstruct.&vci;
17323 +           %let outcluscorrds = &outcluscorr.&vci;
17324 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17325 +           %let outclusrsquareds = &outclussquare.&vci;
17326 +           %let outstatplotds = &outstatplot.&vci;
17327 +           %let outcorrds = &outcorr.&vci;
17328 +           %let outcorrplotds = &outcorrplot.&vci;
17329 +           %let outnodeds = &outnode.&vci;
17330 +           %let outlinkds = &outlink.&vci;
17332 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17333 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17334 +           %let emuseroutstat = &EM_USER_&outstatds;
17336 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17337 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17338 +           %let emuserouttree = &EM_USER_&outtreeds;
17340 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17341 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17342 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17344 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17345 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17346 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17348 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17349 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17350 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17352 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17353 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17354 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17356 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17357 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17358 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17360 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17361 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17362 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17364 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17365 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17366 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17368 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17369 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17370 +           %let emuseroutnode = &EM_USER_&outnodeds;
17372 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17373 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17374 +           %let emuseroutlink = &EM_USER_&outlinkds;
17376 +           /*Add by ruzhan, May 28, 2013*/
17377 +           ods graphics on;
17378 +            %let odspath =;
17379 +            data _null_;
17380 +                path = pathname('WORK');
17381 +                call symput('odspath', path);
17382 +            run;
17383 +            ods listing gpath="&odspath";
17385 +           ods output DENDROGRAM=&emuserouttree;
17387 +           proc varclus data=&indata outstat=&emuseroutstat
17388 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17389 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17390 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17391 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17392 +                  maxc=&EM_PROPERTY_MAXCLUS
17393 +           %end;
17395 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17396 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17397 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17398 +            %end;
17400 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17401 +                proportion = &EM_PROPERTY_PROPORTION
17402 +           %end;
17403 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17404 +               summary
17405 +           %end;
17406 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17407 +               short
17408 +           %end;
17409 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17410 +               corr trace simple
17411 +           %end;
17412 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17413 +               noprint
17414 +           %end;
17415 +            /*Comment out by ruzhan, May 28, 2013*/
17416 +              /*outtree=&emuserouttree*/
17417 +           ;
17418 +           var
17419 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17420 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17421 +                %do %while(^%sysfunc(fetch(&dsid)));
17422 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17423 +                    &_varname
17424 +                %end;
17425 +            %let dsid = %sysfunc(close(&dsid));
17426 +           ;
17427 +           %if %EM_FREQ ne %then %do;
17428 +           Freq %EM_FREQ;
17429 +           %end;
17430 +           run;
17431 +            ods graphics off;
17432 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17434 +            %let gid=&vci;
17435 +            /*--- To make the main result table ----------------------*/
17436 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17437 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17438 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17439 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17440 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17441 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17443 +            /* Inter Cluster Correlation Plot ------------------------*/
17445 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17446 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17448 +           /* Create some other data sets for results ---------------*/
17450 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17451 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17452 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17454 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17456 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17458 +           %if &vci = 1 %then %do;
17459 +           data &EM_USER_OUTRSQUARE;
17460 +                set &emuseroutrsquare;
17461 +           run;
17462 +           %end;
17463 +           %else %do;
17464 +           data &EM_USER_OUTRSQUARE;
17465 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17466 +           run;
17467 +           %end;
17468 +           quit;
17469 +       %end;
17471 +       /*---- move this to Score action ------------
17472 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17473 +       */
17475 +       /* Make Score Gcluster component & correlation  */
17476 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17478 +       quit;
17479 +       %endline:
17480 +%mend VarClus2;
17483 +%macro Train2;
17485 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17486 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17487 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17488 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17489 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17490 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17491 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17492 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17493 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17494 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17495 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17496 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17497 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17498 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17499 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17500 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17501 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17502 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17506 +    /* Train */
17508 +   /* moved to pretrain ------------
17510 +   %if &EM_IMPORT_DATA eq %then %do;
17511 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17512 +       %goto endtrain2;
17513 +   %end;
17515 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17516 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17517 +        %goto endtrain2;
17518 +   %end;
17519 +   +-------------------------------------------*/
17521 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17524 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17526 +        /*----- moved to pretrain ------------
17528 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17529 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17530 +                             outvar=&EM_USER_OUTDUMMY,
17531 +                             outdata=_newtrainds,
17532 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17533 +                              ndummyvars=_ndummyvars
17534 +                            );
17536 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17537 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17538 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17539 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17540 +                %goto endtrain;
17541 +            %end;
17542 +        %end;
17544 +        +---------------------------------------*/
17545 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17546 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17547 +          There is no _newtrainds */
17548 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17549 +                             outstat=&EM_USER_GOUTSTAT,
17550 +                             corrmatrix=Y,
17551 +                             outcorr=&EM_USER_GOUTCORR,
17552 +                             includeclassvar=N,
17553 +                             freq =%EM_FREQ
17554 +                          );
17555 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17557 +        %end;
17558 +        %else %do;
17559 +         %MakeCorrelation(   indata=_newtrainds,
17560 +                             outstat=&EM_USER_GOUTSTAT,
17561 +                             corrmatrix=Y,
17562 +                             outcorr=&EM_USER_GOUTCORR,
17563 +                             includeclassvar=Y,
17564 +                             freq =%EM_FREQ
17565 +                          );
17566 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17568 +        %end;
17570 +    %end;
17571 +    %else %do;
17573 +        /* moved to pretrain -------------------
17575 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17576 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17577 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17578 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17579 +                %goto endtrain;
17580 +            %end;
17581 +        %end;
17582 +         +------------------------------------------*/
17584 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17585 +                          outstat=&EM_USER_GOUTSTAT,
17586 +                          corrmatrix=Y,
17587 +                          outcorr=&EM_USER_GOUTCORR,
17588 +                          includeclassvar=N,
17589 +                          freq =%EM_FREQ
17590 +                          );
17591 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17592 +    %end;
17594 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17595 +                                rsquare = N
17596 +                                );
17597 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17598 +                      ncluster=&_ngc,
17599 +                      method = Ward,
17600 +                      outtree =&EM_USER_GOUTTREE,
17601 +                      idvar = _VAR_,
17602 +                      outdata=&EM_USER_GOUTGROUP,
17603 +                      rescore = N,
17604 +                      newncluster=_newnclus
17605 +                        );
17607 +   /* store the number of global cluster */
17609 +   data &EM_USER_VARCLUSMETA;
17610 +        set &EM_USER_VARCLUSMETA;
17611 +        NGCluster = &_newnclus;
17612 +   run;
17614 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17616 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17617 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17618 +            %VarClus2(indata=&EM_IMPORT_DATA,
17619 +                 clusdata=&EM_USER_GOUTGROUP,
17620 +                 ngroup=&_newnclus);
17621 +         %end;
17622 +         %else %do;
17623 +             %VarClus2(indata=_newtrainds,
17624 +                 clusdata=&EM_USER_GOUTGROUP,
17625 +                 ngroup=&_newnclus);
17627 +         %end;
17629 +   %end;
17630 +   %else %do;
17631 +       %VarClus2(indata=&EM_IMPORT_DATA,
17632 +                 clusdata=&EM_USER_GOUTGROUP,
17633 +                 ngroup=&_newnclus);
17634 +   %end;
17636 +   %em_checkerror();
17637 +   %if &EMEXCEPTIONSTRING ne %then %do;
17638 +       %put &em_codebar;
17639 +       %put Error: Variable clustering failed.;
17640 +       %put &em_codebar;
17641 +       %goto endtrain2;
17642 +   %end;
17643 +   /*
17644 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17645 +   */
17646 +   %endtrain2:
17647 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17649 +%macro em_copyfile(infref=, outfref=, append=N);
17650 +
17651 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17652 +
17653 +       %let omode =;
17654 +       %if &append=Y %then
17655 +           %let omode = MOD;
17656 +       data _null_;
17657 +          length line $20000;
17658 +          file &outfref &omode lrecl=20000;
17659 +          fid=fopen("&infref",'i',20000,'v');
17660 +          if fid > 0  then do;
17661 +             do while(^fread(fid));
17662 +                rlen = frlen(fid);
17663 +                rc= fget(fid,line,20000);
17664 +                start = length(line)-length(left(line))+1;
17665 +                line=strip(line);
17666 +                put @start line;
17667 +             end;
17668 +             if fid > 0  then rc=fclose(fid);
17669 +          end;
17670 +       run;
17671 +
17672 +   %end;
17673 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

17674  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 32235 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.26 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.

NOTE: 4 input variable(s).
NOTE: Number of cases=32235
NOTE: Sum of frequencies=32235
NOTE: Sum of weights=32235
NOTE: VARDEF=DF      
NOTE: Maximum number of categories=4
NOTE: The total number of variables is 4 with dimensionality 10.
NOTE: The data set EMWS2.VARCLUS_OUTDUMMY has 3 observations and 11 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 32235 observations and 109 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file \\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.


NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.15 seconds
      cpu time            0.06 seconds
      


NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:94   
NOTE: There were 32235 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:153   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


17675  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set EMWS2.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS2.VARCLUS_OUTTREE has 165 observations and 3 variables.
NOTE: The data set EMWS2.VARCLUS_OUTSTAT has 2056 observations and 101 variables.
NOTE: The PROCEDURE VARCLUS printed pages 2-7.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           3.46 seconds
      cpu time            1.64 seconds
      


NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


17676  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214   
NOTE: There were 2056 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9   
NOTE: There were 2056 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORR has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORR has 34 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 34 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORR has 34 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.CORR_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 34 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1156 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1156 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1156 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1156 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1122 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1122 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 34 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71   
NOTE: There were 2056 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 100 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMPDS (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34   
NOTE: Variable GCluster is uninitialized.
NOTE: There were 2056 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSSTRUCT has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSSTRUCT has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.CORR_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 34 observations and 99 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3332 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3332 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3332 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3332 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3234 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3234 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3234 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3234 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 98 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: There were 98 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 98 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 34 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 98 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 34 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: There were 34 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 132 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 132 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      48936:90   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      48936:84   
NOTE: There were 2056 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 34 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 34 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: Deleting WORK.CORR_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 34 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 1156 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1156 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 1156 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS2.VARCLUS_OUTSTATPLOT has 98 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTSTATPLOT has 98 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTSTATPLOT has 98 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS2.VARCLUS_OUTCORR has 98 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCORR has 98 observations and 99 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 98 observations read from the data set EMWS2.VARCLUS_OUTCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9604 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9604 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9604 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9506 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9506 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246   
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9506 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9506 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9604 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9604 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9506 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9604 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9604 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      


NOTE: There were 9604 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9604 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 132 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTLINK has 132 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 132 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTNODE has 132 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2056 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTSTATSCORE has 36 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: The file _FILE_ is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2403,
      Last Modified=08Dec2017:02:38:52,
      Create Time=08Dec2017:02:38:52

NOTE: 137 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.45 seconds
      cpu time            0.40 seconds
      


NOTE: The file _OUT is:
      Filename=\\filer.uncc.edu\home\aadwani\SAS project\sas project\Workspaces\EMWS2\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=08Dec2017:02:38:57,
      Create Time=08Dec2017:02:38:57

NOTE: 250 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17677  *------------------------------------------------------------*;
17678  * End TRAIN: VarClus;
17679  *------------------------------------------------------------*;
17680  

17681  *------------------------------------------------------------*;
17682  * Close any missing semi colons;
17683  *------------------------------------------------------------*;
17684  ;
17685  ;
17686  ;
17687  ;
17688  quit;
17689  *------------------------------------------------------------*;
17690  * Close any unbalanced quotes;
17691  *------------------------------------------------------------*;
17692  /*; *"; *'; */
17693  ;
17694  run;
17695  quit;
17696  /* Reset EM Options */
17697  options formchar="|----|+|---+=|-/\<>*";
17698  options nocenter ls=256 ps=10000;
17699  goptions reset=all device=GIF NODISPLAY;

